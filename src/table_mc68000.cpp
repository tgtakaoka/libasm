/*
 * Copyright 2020 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "table_mc68000.h"
#include "entry_mc68000.h"
#include "entry_table.h"
#include "text_mc68000.h"

using namespace libasm::text::mc68000;

namespace libasm {
namespace mc68000 {

#define E2(_opc, _name, _isize, _src, _dst, _srcp, _dstp, _osize) \
    {_opc, Entry::Flags::create(_src, _dst, _srcp, _dstp, _osize, _isize), _name}
#define E1(_opc, _name, _isize, _src, _srcp, _osize) \
    E2(_opc, _name, _isize, _src, M_NONE, _srcp, OP___, _osize)
#define E0(_opc, _name) E1(_opc, _name, ISZ_NONE, M_NONE, OP___, SZ_NONE)
#define A2(_opc, _name, _isize, _src, _dst, _srcp, _dstp, _osize) \
    E2(_opc, _name, _isize, _src, _dst, _srcp, _dstp, _osize)
#define P2(_opc, _name, _isize, _src, _dst, _srcp, _dstp, _osize, _postVal) \
    {_opc, Entry::Flags::create(_src, _dst, _srcp, _dstp, _osize, _isize, _postVal), _name}
#define P1(_opc, _name, _isize, _src, _srcp, _osize, _post) \
    P2(_opc, _name, _isize, _src, M_NONE, _srcp, OP___, _osize, _post)
#define P0(_opc, _name, _post) P1(_opc, _name, ISZ_NONE, M_NONE, OP___, SZ_NONE, _post)

// clang-format off
constexpr Entry MC68000_TABLE[] PROGMEM = {
    E2(0000074, TEXT_ORI,   ISZ_NONE, M_IMDAT, M_CCR,   OP___, OP___, SZ_BYTE),
    E2(0000174, TEXT_ORI,   ISZ_NONE, M_IMDAT, M_SR,    OP___, OP___, SZ_WORD),
    E2(0000000, TEXT_ORI,   ISZ_DATA, M_IMDAT, M_WDATA, OP___, OP_10, SZ_DATA),
    E2(0001074, TEXT_ANDI,  ISZ_NONE, M_IMDAT, M_CCR,   OP___, OP___, SZ_BYTE),
    E2(0001174, TEXT_ANDI,  ISZ_NONE, M_IMDAT, M_SR,    OP___, OP___, SZ_WORD),
    E2(0001000, TEXT_ANDI,  ISZ_DATA, M_IMDAT, M_WDATA, OP___, OP_10, SZ_DATA),
    E2(0002000, TEXT_SUBI,  ISZ_DATA, M_IMDAT, M_WDATA, OP___, OP_10, SZ_DATA),
    E2(0003000, TEXT_ADDI,  ISZ_DATA, M_IMDAT, M_WDATA, OP___, OP_10, SZ_DATA),
    E2(0005074, TEXT_EORI,  ISZ_NONE, M_IMDAT, M_CCR,   OP___, OP___, SZ_BYTE),
    E2(0005174, TEXT_EORI,  ISZ_NONE, M_IMDAT, M_SR,    OP___, OP___, SZ_WORD),
    E2(0005000, TEXT_EORI,  ISZ_DATA, M_IMDAT, M_WDATA, OP___, OP_10, SZ_DATA),
    E2(0006000, TEXT_CMPI,  ISZ_DATA, M_IMDAT, M_WDATA, OP___, OP_10, SZ_DATA),
    E2(0004000, TEXT_BTST,  ISZ_FIXD, M_IMBIT, M_DREG,  OP___, OP__0, SZ_LONG),
    E2(0004000, TEXT_BTST,  ISZ_FIXD, M_IMBIT, M_RMEM,  OP___, OP_10, SZ_BYTE),
    E2(0004100, TEXT_BCHG,  ISZ_FIXD, M_IMBIT, M_DREG,  OP___, OP__0, SZ_LONG),
    E2(0004100, TEXT_BCHG,  ISZ_FIXD, M_IMBIT, M_WMEM,  OP___, OP_10, SZ_BYTE),
    E2(0004200, TEXT_BCLR,  ISZ_FIXD, M_IMBIT, M_DREG,  OP___, OP__0, SZ_LONG),
    E2(0004200, TEXT_BCLR,  ISZ_FIXD, M_IMBIT, M_WMEM,  OP___, OP_10, SZ_BYTE),
    E2(0004300, TEXT_BSET,  ISZ_FIXD, M_IMBIT, M_DREG,  OP___, OP__0, SZ_LONG),
    E2(0004300, TEXT_BSET,  ISZ_FIXD, M_IMBIT, M_WMEM,  OP___, OP_10, SZ_BYTE),
    E2(0000410, TEXT_MOVEP, ISZ_DATA, M_DISP,  M_DREG,  OP__0, OP__3, SZ_ADDR),
    E2(0000610, TEXT_MOVEP, ISZ_DATA, M_DREG,  M_DISP,  OP__3, OP__0, SZ_ADDR),
    E2(0000400, TEXT_BTST,  ISZ_FIXD, M_DREG,  M_DREG,  OP__3, OP__0, SZ_LONG),
    E2(0000400, TEXT_BTST,  ISZ_FIXD, M_DREG,  M_RMEM,  OP__3, OP_10, SZ_BYTE),
    E2(0000500, TEXT_BCHG,  ISZ_FIXD, M_DREG,  M_DREG,  OP__3, OP__0, SZ_LONG),
    E2(0000500, TEXT_BCHG,  ISZ_FIXD, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_BYTE),
    E2(0000600, TEXT_BCLR,  ISZ_FIXD, M_DREG,  M_DREG,  OP__3, OP__0, SZ_LONG),
    E2(0000600, TEXT_BCLR,  ISZ_FIXD, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_BYTE),
    E2(0000700, TEXT_BSET,  ISZ_FIXD, M_DREG,  M_DREG,  OP__3, OP__0, SZ_LONG),
    E2(0000700, TEXT_BSET,  ISZ_FIXD, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_BYTE),
    E2(0020100, TEXT_MOVEA, ISZ_LONG, M_RADDR, M_AREG,  OP_10, OP__3, SZ_LONG),
    E2(0030100, TEXT_MOVEA, ISZ_WORD, M_RADDR, M_AREG,  OP_10, OP__3, SZ_WORD),
    E2(0030100, TEXT_MOVEA, ISZ_FIXD, M_RADDR, M_AREG,  OP_10, OP__3, SZ_WORD),
    E2(0042300, TEXT_MOVE,  ISZ_FIXD, M_RDATA, M_CCR,   OP_10, OP___, SZ_WORD),
    E2(0040300, TEXT_MOVE,  ISZ_FIXD, M_SR,    M_WDATA, OP___, OP_10, SZ_WORD),
    E2(0043300, TEXT_MOVE,  ISZ_FIXD, M_RDATA, M_SR,    OP_10, OP___, SZ_WORD),
    E2(0010000, TEXT_MOVE,  ISZ_BYTE, M_RDATA, M_WDATA, OP_10, OP_23, SZ_BYTE),
    E2(0020000, TEXT_MOVE,  ISZ_LONG, M_RADDR, M_WDATA, OP_10, OP_23, SZ_LONG),
    E2(0030000, TEXT_MOVE,  ISZ_WORD, M_RADDR, M_WDATA, OP_10, OP_23, SZ_WORD),
    E1(0040000, TEXT_NEGX,  ISZ_DATA, M_WDATA, OP_10, SZ_DATA),
    E1(0041000, TEXT_CLR,   ISZ_DATA, M_WDATA, OP_10, SZ_DATA),
    E1(0042000, TEXT_NEG,   ISZ_DATA, M_WDATA, OP_10, SZ_DATA),
    E1(0043000, TEXT_NOT,   ISZ_DATA, M_WDATA, OP_10, SZ_DATA),
    E1(0044200, TEXT_EXT,   ISZ_DATA, M_DREG,  OP__0, SZ_ADDR),
    E1(0044000, TEXT_NBCD,  ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0044100, TEXT_SWAP,  ISZ_NONE, M_DREG,  OP__0, SZ_LONG),
    E1(0044100, TEXT_PEA,   ISZ_NONE, M_JADDR, OP_10, SZ_LONG),
    E0(0045374, TEXT_ILLEGAL),
    E1(0045300, TEXT_TAS,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0045000, TEXT_TST,   ISZ_DATA, M_WDATA, OP_10, SZ_DATA),
    E1(0047100, TEXT_TRAP,  ISZ_NONE, M_IMVEC, OP___, SZ_NONE),
    E2(0047120, TEXT_LINK,  ISZ_NONE, M_AREG,  M_IMDSP, OP__0, OP___, SZ_WORD),
    E1(0047130, TEXT_UNLK,  ISZ_NONE, M_AREG,  OP__0, SZ_NONE),
    E2(0047140, TEXT_MOVE,  ISZ_NONE, M_AREG,  M_USP,   OP__0, OP___, SZ_LONG),
    E2(0047150, TEXT_MOVE,  ISZ_NONE, M_USP,   M_AREG,  OP___, OP__0, SZ_LONG),
    E0(0047160, TEXT_RESET),
    E0(0047161, TEXT_NOP),
    E1(0047162, TEXT_STOP,  ISZ_NONE, M_IMDAT, OP___, SZ_WORD),
    E0(0047163, TEXT_RTE),
    E0(0047165, TEXT_RTS),
    E0(0047166, TEXT_TRAPV),
    E0(0047167, TEXT_RTR),
    E1(0047200, TEXT_JSR,   ISZ_NONE, M_JADDR, OP_10, SZ_WORD),
    E1(0047300, TEXT_JMP,   ISZ_NONE, M_JADDR, OP_10, SZ_WORD),
    E2(0044200, TEXT_MOVEM, ISZ_DATA, M_MULT,  M_DADDR, OP___, OP_10, SZ_ADDR),
    E2(0046200, TEXT_MOVEM, ISZ_DATA, M_IADDR, M_MULT,  OP_10, OP___, SZ_ADDR),
    E2(0040700, TEXT_LEA,   ISZ_NONE, M_JADDR, M_AREG,  OP_10, OP__3, SZ_LONG),
    E2(0040600, TEXT_CHK,   ISZ_WORD, M_RDATA, M_DREG,  OP_10, OP__3, SZ_WORD),
    E2(0050310, TEXT_DBT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0050710, TEXT_DBRA,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0050710, TEXT_DBF,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0051310, TEXT_DBHI,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0051710, TEXT_DBLS,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0052310, TEXT_DBCC,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0052310, TEXT_DBHS,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0052710, TEXT_DBCS,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0052710, TEXT_DBLO,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0053310, TEXT_DBNE,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0053710, TEXT_DBEQ,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0054310, TEXT_DBVC,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0054710, TEXT_DBVS,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0055310, TEXT_DBPL,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0055710, TEXT_DBMI,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0056310, TEXT_DBGE,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0056710, TEXT_DBLT,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0057310, TEXT_DBGT,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E2(0057710, TEXT_DBLE,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD),
    E1(0050300, TEXT_ST,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0050700, TEXT_SF,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0051300, TEXT_SHI,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0051700, TEXT_SLS,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0052300, TEXT_SCC,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0052300, TEXT_SHS,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0052700, TEXT_SCS,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0052700, TEXT_SLO,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0053300, TEXT_SNE,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0053700, TEXT_SEQ,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0054300, TEXT_SVC,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0054700, TEXT_SVS,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0055300, TEXT_SPL,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0055700, TEXT_SMI,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0056300, TEXT_SGE,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0056700, TEXT_SLT,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0057300, TEXT_SGT,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E1(0057700, TEXT_SLE,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE),
    E2(0050000, TEXT_ADDQ,  ISZ_DATA, M_IM3,   M_WADDR, OP__3, OP_10, SZ_DATA),
    E2(0050400, TEXT_SUBQ,  ISZ_DATA, M_IM3,   M_WADDR, OP__3, OP_10, SZ_DATA),
    E1(0060000, TEXT_BRA,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0060000, TEXT_BT,    ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0060400, TEXT_BSR,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0061000, TEXT_BHI,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0061400, TEXT_BLS,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0062000, TEXT_BCC,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0062000, TEXT_BHS,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0062400, TEXT_BCS,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0062400, TEXT_BLO,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0063000, TEXT_BNE,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0063400, TEXT_BEQ,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0064000, TEXT_BVC,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0064400, TEXT_BVS,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0065000, TEXT_BPL,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0065400, TEXT_BMI,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0066000, TEXT_BGE,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0066400, TEXT_BLT,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0067000, TEXT_BGT,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E1(0067400, TEXT_BLE,   ISZ_NONE, M_REL8,  OP___, SZ_BYTE),
    E2(0070000, TEXT_MOVEQ, ISZ_NONE, M_IM8,   M_DREG,  OP___, OP__3, SZ_LONG),
    E2(0100300, TEXT_DIVU,  ISZ_DATA, M_RDATA, M_DREG,  OP_10, OP__3, SZ_WORD),
    E2(0100700, TEXT_DIVS,  ISZ_DATA, M_RDATA, M_DREG,  OP_10, OP__3, SZ_WORD),
    E2(0100000, TEXT_OR,    ISZ_DATA, M_RDATA, M_DREG,  OP_10, OP__3, SZ_DATA),
    E2(0100400, TEXT_SBCD,  ISZ_NONE, M_DREG,  M_DREG,  OP__0, OP__3, SZ_BYTE),
    E2(0100410, TEXT_SBCD,  ISZ_NONE, M_PDEC,  M_PDEC,  OP__0, OP__3, SZ_BYTE),
    E2(0100400, TEXT_OR,    ISZ_DATA, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_DATA),
    E2(0110300, TEXT_SUBA,  ISZ_DATA, M_RADDR, M_AREG,  OP_10, OP__3, SZ_ADR8),
    E2(0110400, TEXT_SUBX,  ISZ_DATA, M_DREG,  M_DREG,  OP__0, OP__3, SZ_DATA),
    E2(0110410, TEXT_SUBX,  ISZ_DATA, M_PDEC,  M_PDEC,  OP__0, OP__3, SZ_DATA),
    E2(0110000, TEXT_SUB,   ISZ_DATA, M_RADDR, M_DREG,  OP_10, OP__3, SZ_DATA),
    E2(0110400, TEXT_SUB,   ISZ_DATA, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_DATA),
    E2(0130300, TEXT_CMPA,  ISZ_DATA, M_RADDR, M_AREG,  OP_10, OP__3, SZ_ADR8),
    E2(0130000, TEXT_CMP,   ISZ_DATA, M_RADDR, M_DREG,  OP_10, OP__3, SZ_DATA),
    E2(0130410, TEXT_CMPM,  ISZ_DATA, M_PINC,  M_PINC,  OP__0, OP__3, SZ_DATA),
    E2(0130400, TEXT_EOR,   ISZ_DATA, M_DREG,  M_WDATA, OP__3, OP_10, SZ_DATA),
    E2(0140300, TEXT_MULU,  ISZ_DATA, M_RDATA, M_DREG,  OP_10, OP__3, SZ_WORD),
    E2(0140700, TEXT_MULS,  ISZ_DATA, M_RDATA, M_DREG,  OP_10, OP__3, SZ_WORD),
    E2(0140000, TEXT_AND,   ISZ_DATA, M_RDATA, M_DREG,  OP_10, OP__3, SZ_DATA),
    E2(0140400, TEXT_ABCD,  ISZ_NONE, M_DREG,  M_DREG,  OP__0, OP__3, SZ_BYTE),
    E2(0140410, TEXT_ABCD,  ISZ_NONE, M_PDEC,  M_PDEC,  OP__0, OP__3, SZ_BYTE),
    E2(0140500, TEXT_EXG,   ISZ_NONE, M_DREG,  M_DREG,  OP__3, OP__0, SZ_LONG),
    E2(0140510, TEXT_EXG,   ISZ_NONE, M_AREG,  M_AREG,  OP__3, OP__0, SZ_LONG),
    E2(0140610, TEXT_EXG,   ISZ_NONE, M_DREG,  M_AREG,  OP__3, OP__0, SZ_LONG),
    E2(0140610, TEXT_EXG,   ISZ_NONE, M_AREG,  M_DREG,  OP__0, OP__3, SZ_LONG),
    E2(0140400, TEXT_AND,   ISZ_DATA, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_DATA),
    E2(0150300, TEXT_ADDA,  ISZ_DATA, M_RADDR, M_AREG,  OP_10, OP__3, SZ_ADR8),
    E2(0150400, TEXT_ADDX,  ISZ_DATA, M_DREG,  M_DREG,  OP__0, OP__3, SZ_DATA),
    E2(0150410, TEXT_ADDX,  ISZ_DATA, M_PDEC,  M_PDEC,  OP__0, OP__3, SZ_DATA),
    E2(0150000, TEXT_ADD,   ISZ_DATA, M_RADDR, M_DREG,  OP_10, OP__3, SZ_DATA),
    E2(0150400, TEXT_ADD,   ISZ_DATA, M_DREG,  M_WMEM,  OP__3, OP_10, SZ_DATA),
    E1(0160300, TEXT_ASR,   ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0160700, TEXT_ASL,   ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0161300, TEXT_LSR,   ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0161700, TEXT_LSL,   ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0162300, TEXT_ROXR,  ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0162700, TEXT_ROXL,  ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0163300, TEXT_ROR,   ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E1(0163700, TEXT_ROL,   ISZ_DATA, M_WMEM,  OP_10, SZ_WORD),
    E2(0160000, TEXT_ASR,   ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160040, TEXT_ASR,   ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160400, TEXT_ASL,   ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160440, TEXT_ASL,   ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160010, TEXT_LSR,   ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160050, TEXT_LSR,   ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160410, TEXT_LSL,   ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160450, TEXT_LSL,   ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160020, TEXT_ROXR,  ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160060, TEXT_ROXR,  ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160420, TEXT_ROXL,  ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160460, TEXT_ROXL,  ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160030, TEXT_ROR,   ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160070, TEXT_ROR,   ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160430, TEXT_ROL,   ISZ_DATA, M_IM3,   M_DREG,  OP__3, OP__0, SZ_DATA),
    E2(0160470, TEXT_ROL,   ISZ_DATA, M_DREG,  M_DREG,  OP__3, OP__0, SZ_DATA),
    A2(0020100, TEXT_MOVE,  ISZ_LONG, M_RADDR, M_AREG,  OP_10, OP__3, SZ_LONG),
    A2(0030100, TEXT_MOVE,  ISZ_WORD, M_RADDR, M_AREG,  OP_10, OP__3, SZ_WORD),
    A2(0110300, TEXT_SUB,   ISZ_DATA, M_RADDR, M_AREG,  OP_10, OP__3, SZ_ADR8),
    A2(0110374, TEXT_SUBI,  ISZ_DATA, M_IMDAT, M_AREG,  OP___, OP__3, SZ_ADR8),
    A2(0130374, TEXT_CMPI,  ISZ_DATA, M_IMDAT, M_AREG,  OP___, OP__3, SZ_ADR8),
    A2(0150300, TEXT_ADD,   ISZ_DATA, M_RADDR, M_AREG,  OP_10, OP__3, SZ_ADR8),
    A2(0150374, TEXT_ADDI,  ISZ_DATA, M_IMDAT, M_AREG,  OP___, OP__3, SZ_ADR8),
};

constexpr uint8_t MC68000_INDEX[] PROGMEM = {
    145,  // TEXT_ABCD
    146,  // TEXT_ABCD
    155,  // TEXT_ADD
    156,  // TEXT_ADD
    186,  // TEXT_ADD
    152,  // TEXT_ADDA
      7,  // TEXT_ADDI
    187,  // TEXT_ADDI
    105,  // TEXT_ADDQ
    153,  // TEXT_ADDX
    154,  // TEXT_ADDX
    144,  // TEXT_AND
    151,  // TEXT_AND
      3,  // TEXT_ANDI
      4,  // TEXT_ANDI
      5,  // TEXT_ANDI
    158,  // TEXT_ASL
    167,  // TEXT_ASL
    168,  // TEXT_ASL
    157,  // TEXT_ASR
    165,  // TEXT_ASR
    166,  // TEXT_ASR
    112,  // TEXT_BCC
     14,  // TEXT_BCHG
     15,  // TEXT_BCHG
     24,  // TEXT_BCHG
     25,  // TEXT_BCHG
     16,  // TEXT_BCLR
     17,  // TEXT_BCLR
     26,  // TEXT_BCLR
     27,  // TEXT_BCLR
    114,  // TEXT_BCS
    117,  // TEXT_BEQ
    122,  // TEXT_BGE
    124,  // TEXT_BGT
    110,  // TEXT_BHI
    113,  // TEXT_BHS
    125,  // TEXT_BLE
    115,  // TEXT_BLO
    111,  // TEXT_BLS
    123,  // TEXT_BLT
    121,  // TEXT_BMI
    116,  // TEXT_BNE
    120,  // TEXT_BPL
    107,  // TEXT_BRA
     18,  // TEXT_BSET
     19,  // TEXT_BSET
     28,  // TEXT_BSET
     29,  // TEXT_BSET
    109,  // TEXT_BSR
    108,  // TEXT_BT
     12,  // TEXT_BTST
     13,  // TEXT_BTST
     22,  // TEXT_BTST
     23,  // TEXT_BTST
    118,  // TEXT_BVC
    119,  // TEXT_BVS
     67,  // TEXT_CHK
     40,  // TEXT_CLR
    139,  // TEXT_CMP
    138,  // TEXT_CMPA
     11,  // TEXT_CMPI
    185,  // TEXT_CMPI
    140,  // TEXT_CMPM
     73,  // TEXT_DBCC
     75,  // TEXT_DBCS
     78,  // TEXT_DBEQ
     70,  // TEXT_DBF
     83,  // TEXT_DBGE
     85,  // TEXT_DBGT
     71,  // TEXT_DBHI
     74,  // TEXT_DBHS
     86,  // TEXT_DBLE
     76,  // TEXT_DBLO
     72,  // TEXT_DBLS
     84,  // TEXT_DBLT
     82,  // TEXT_DBMI
     77,  // TEXT_DBNE
     81,  // TEXT_DBPL
     69,  // TEXT_DBRA
     68,  // TEXT_DBT
     79,  // TEXT_DBVC
     80,  // TEXT_DBVS
    128,  // TEXT_DIVS
    127,  // TEXT_DIVU
    141,  // TEXT_EOR
      8,  // TEXT_EORI
      9,  // TEXT_EORI
     10,  // TEXT_EORI
    147,  // TEXT_EXG
    148,  // TEXT_EXG
    149,  // TEXT_EXG
    150,  // TEXT_EXG
     43,  // TEXT_EXT
     47,  // TEXT_ILLEGAL
     63,  // TEXT_JMP
     62,  // TEXT_JSR
     66,  // TEXT_LEA
     51,  // TEXT_LINK
    160,  // TEXT_LSL
    171,  // TEXT_LSL
    172,  // TEXT_LSL
    159,  // TEXT_LSR
    169,  // TEXT_LSR
    170,  // TEXT_LSR
     33,  // TEXT_MOVE
     34,  // TEXT_MOVE
     35,  // TEXT_MOVE
     36,  // TEXT_MOVE
     37,  // TEXT_MOVE
     38,  // TEXT_MOVE
     53,  // TEXT_MOVE
     54,  // TEXT_MOVE
    181,  // TEXT_MOVE
    182,  // TEXT_MOVE
     30,  // TEXT_MOVEA
     31,  // TEXT_MOVEA
     32,  // TEXT_MOVEA
     64,  // TEXT_MOVEM
     65,  // TEXT_MOVEM
     20,  // TEXT_MOVEP
     21,  // TEXT_MOVEP
    126,  // TEXT_MOVEQ
    143,  // TEXT_MULS
    142,  // TEXT_MULU
     44,  // TEXT_NBCD
     41,  // TEXT_NEG
     39,  // TEXT_NEGX
     56,  // TEXT_NOP
     42,  // TEXT_NOT
    129,  // TEXT_OR
    132,  // TEXT_OR
      0,  // TEXT_ORI
      1,  // TEXT_ORI
      2,  // TEXT_ORI
     46,  // TEXT_PEA
     55,  // TEXT_RESET
    164,  // TEXT_ROL
    179,  // TEXT_ROL
    180,  // TEXT_ROL
    163,  // TEXT_ROR
    177,  // TEXT_ROR
    178,  // TEXT_ROR
    162,  // TEXT_ROXL
    175,  // TEXT_ROXL
    176,  // TEXT_ROXL
    161,  // TEXT_ROXR
    173,  // TEXT_ROXR
    174,  // TEXT_ROXR
     58,  // TEXT_RTE
     61,  // TEXT_RTR
     59,  // TEXT_RTS
    130,  // TEXT_SBCD
    131,  // TEXT_SBCD
     91,  // TEXT_SCC
     93,  // TEXT_SCS
     96,  // TEXT_SEQ
     88,  // TEXT_SF
    101,  // TEXT_SGE
    103,  // TEXT_SGT
     89,  // TEXT_SHI
     92,  // TEXT_SHS
    104,  // TEXT_SLE
     94,  // TEXT_SLO
     90,  // TEXT_SLS
    102,  // TEXT_SLT
    100,  // TEXT_SMI
     95,  // TEXT_SNE
     99,  // TEXT_SPL
     87,  // TEXT_ST
     57,  // TEXT_STOP
    136,  // TEXT_SUB
    137,  // TEXT_SUB
    183,  // TEXT_SUB
    133,  // TEXT_SUBA
      6,  // TEXT_SUBI
    184,  // TEXT_SUBI
    106,  // TEXT_SUBQ
    134,  // TEXT_SUBX
    135,  // TEXT_SUBX
     97,  // TEXT_SVC
     98,  // TEXT_SVS
     45,  // TEXT_SWAP
     48,  // TEXT_TAS
     50,  // TEXT_TRAP
     60,  // TEXT_TRAPV
     49,  // TEXT_TST
     52,  // TEXT_UNLK
};

constexpr Entry MC68010_TABLE[] PROGMEM = {
    E1(0044110, TEXT_BKPT,  ISZ_NONE, M_IM3,   OP__0, SZ_NONE),
    E2(0041300, TEXT_MOVE,  ISZ_FIXD, M_CCR,   M_WDATA, OP___, OP_10, SZ_WORD),
    E1(0047164, TEXT_RTD,   ISZ_NONE, M_IMDAT, OP___, SZ_WORD),
    P2(0047172, TEXT_MOVEC, ISZ_NONE, M_CREG,  M_DREG,  EX_RC, EX_RR, SZ_LONG, 0x0000),
    P2(0047172, TEXT_MOVEC, ISZ_NONE, M_CREG,  M_AREG,  EX_RC, EX_RR, SZ_LONG, 0x8000),
    P2(0047173, TEXT_MOVEC, ISZ_NONE, M_DREG,  M_CREG,  EX_RR, EX_RC, SZ_LONG, 0x0000),
    P2(0047173, TEXT_MOVEC, ISZ_NONE, M_AREG,  M_CREG,  EX_RR, EX_RC, SZ_LONG, 0x8000),
    P2(0007000, TEXT_MOVES, ISZ_DATA, M_WMEM,  M_DREG,  OP_10, EX_RR, SZ_DATA, 0x0000),
    P2(0007000, TEXT_MOVES, ISZ_DATA, M_WMEM,  M_AREG,  OP_10, EX_RR, SZ_DATA, 0x8000),
    P2(0007000, TEXT_MOVES, ISZ_DATA, M_DREG,  M_WMEM,  EX_RR, OP_10, SZ_DATA, 0x0800),
    P2(0007000, TEXT_MOVES, ISZ_DATA, M_AREG,  M_WMEM,  EX_RR, OP_10, SZ_DATA, 0x8800),
};

constexpr uint8_t MC68010_INDEX[] PROGMEM = {
      0,  // TEXT_BKPT
      1,  // TEXT_MOVE
      3,  // TEXT_MOVEC
      4,  // TEXT_MOVEC
      5,  // TEXT_MOVEC
      6,  // TEXT_MOVEC
      7,  // TEXT_MOVES
      8,  // TEXT_MOVES
      9,  // TEXT_MOVES
     10,  // TEXT_MOVES
      2,  // TEXT_RTD
};

#if !defined(LIBASM_MC68000_NOFPU)

constexpr Entry MC68881_ARITH[] PROGMEM = {
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0000),
    P2(0xF000, TEXT_FINT,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0001),
    P2(0xF000, TEXT_FSINH,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0002),
    P2(0xF000, TEXT_FINTRZ,  ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0003),
    P2(0xF000, TEXT_FSQRT,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0004),
    P2(0xF000, TEXT_FLOGNP1, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0006),
    P2(0xF000, TEXT_FETOXM1, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0008),
    P2(0xF000, TEXT_FTANH,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0009),
    P2(0xF000, TEXT_FATAN,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x000A),
    P2(0xF000, TEXT_FASIN,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x000C),
    P2(0xF000, TEXT_FATANH,  ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x000D),
    P2(0xF000, TEXT_FSIN,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x000E),
    P2(0xF000, TEXT_FTAN,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x000F),
    P2(0xF000, TEXT_FETOX,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0010),
    P2(0xF000, TEXT_FTWOTOX, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0011),
    P2(0xF000, TEXT_FTENTOX, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0012),
    P2(0xF000, TEXT_FLOGN,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0014),
    P2(0xF000, TEXT_FLOG10,  ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0015),
    P2(0xF000, TEXT_FLOG2,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0016),
    P2(0xF000, TEXT_FABS,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0018),
    P2(0xF000, TEXT_FCOSH,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0019),
    P2(0xF000, TEXT_FNEG,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x001A),
    P2(0xF000, TEXT_FACOS,   ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x001C),
    P2(0xF000, TEXT_FCOS,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x001D),
    P2(0xF000, TEXT_FGETEXP, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x001E),
    P2(0xF000, TEXT_FGETMAN, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x001F),
    P2(0xF000, TEXT_FDIV,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0020),
    P2(0xF000, TEXT_FMOD,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0021),
    P2(0xF000, TEXT_FADD,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0022),
    P2(0xF000, TEXT_FMUL,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0023),
    P2(0xF000, TEXT_FSGLDIV, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0024),
    P2(0xF000, TEXT_FREM,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0025),
    P2(0xF000, TEXT_FSCALE,  ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0026),
    P2(0xF000, TEXT_FSGLMUL, ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0027),
    P2(0xF000, TEXT_FSUB,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0028),
    P2(0xF000, TEXT_FSINCOS, ISZ_FIXD, M_FPREG, M_FSICO, EX_RX, EX_SC, SZ_XTND, 0x0030),
    P2(0xF000, TEXT_FCMP,    ISZ_FIXD, M_FPREG, M_FPREG, EX_RX, EX_RY, SZ_XTND, 0x0038),
    P1(0xF000, TEXT_FTST,    ISZ_FIXD, M_FPREG, EX_RX, SZ_XTND, 0x003A),
    P2(0xF000, TEXT_FMOVE,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4000),
    P2(0xF000, TEXT_FINT,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4001),
    P2(0xF000, TEXT_FSINH,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4002),
    P2(0xF000, TEXT_FINTRZ,  ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4003),
    P2(0xF000, TEXT_FSQRT,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4004),
    P2(0xF000, TEXT_FLOGNP1, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4006),
    P2(0xF000, TEXT_FETOXM1, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4008),
    P2(0xF000, TEXT_FTANH,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4009),
    P2(0xF000, TEXT_FATAN,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x400A),
    P2(0xF000, TEXT_FASIN,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x400C),
    P2(0xF000, TEXT_FATANH,  ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x400D),
    P2(0xF000, TEXT_FSIN,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x400E),
    P2(0xF000, TEXT_FTAN,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x400F),
    P2(0xF000, TEXT_FETOX,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4010),
    P2(0xF000, TEXT_FTWOTOX, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4011),
    P2(0xF000, TEXT_FTENTOX, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4012),
    P2(0xF000, TEXT_FLOGN,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4014),
    P2(0xF000, TEXT_FLOG10,  ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4015),
    P2(0xF000, TEXT_FLOG2,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4016),
    P2(0xF000, TEXT_FABS,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4018),
    P2(0xF000, TEXT_FCOSH,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4019),
    P2(0xF000, TEXT_FNEG,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x401A),
    P2(0xF000, TEXT_FACOS,   ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x401C),
    P2(0xF000, TEXT_FCOS,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x401D),
    P2(0xF000, TEXT_FGETEXP, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x401E),
    P2(0xF000, TEXT_FGETMAN, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x401F),
    P2(0xF000, TEXT_FDIV,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4020),
    P2(0xF000, TEXT_FMOD,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4021),
    P2(0xF000, TEXT_FADD,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4022),
    P2(0xF000, TEXT_FMUL,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4023),
    P2(0xF000, TEXT_FSGLDIV, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4024),
    P2(0xF000, TEXT_FREM,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4025),
    P2(0xF000, TEXT_FSCALE,  ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4026),
    P2(0xF000, TEXT_FSGLMUL, ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4027),
    P2(0xF000, TEXT_FSUB,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4028),
    P2(0xF000, TEXT_FSINCOS, ISZ_FDAT, M_RDATA, M_FSICO, OP_10, EX_SC, SZ_FDAT, 0x4030),
    P2(0xF000, TEXT_FCMP,    ISZ_FDAT, M_RDATA, M_FPREG, OP_10, EX_RY, SZ_FDAT, 0x4038),
    P1(0xF000, TEXT_FTST,    ISZ_FDAT, M_RDATA, OP_10, SZ_FDAT, 0x403A),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_FPREG, M_KFACT, EX_RY, EX_SK, SZ_PBCD, 0x6C00),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_FPREG, M_KDREG, EX_RY, EX_DK, SZ_PBCD, 0x7C00),
    P2(0xF000, TEXT_FMOVE,   ISZ_FDAT, M_FPREG, M_WDATA, EX_RY, OP_10, SZ_FDAT, 0x6000),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_RADDR, M_FPIAR, OP_10, OP___, SZ_LONG, 0x8400),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_RADDR, M_FPSR,  OP_10, OP___, SZ_LONG, 0x8800),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_RADDR, M_FPCR,  OP_10, OP___, SZ_LONG, 0x9000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_AREG,  M_FPIAR, OP_10, OP___, SZ_LONG, 0x8400),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_DREG,  M_FPIAR, OP_10, OP___, SZ_LONG, 0x8400),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_DREG,  M_FPSR,  OP_10, OP___, SZ_LONG, 0x8800),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_DREG,  M_FPCR,  OP_10, OP___, SZ_LONG, 0x9000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_RADDR, M_FCMLT, OP_10, EX_RX, SZ_LONG, 0x8000),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_FPIAR, M_WADDR, OP___, OP_10, SZ_LONG, 0xA400),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_FPSR,  M_WADDR, OP___, OP_10, SZ_LONG, 0xA800),
    P2(0xF000, TEXT_FMOVE,   ISZ_FIXD, M_FPCR,  M_WADDR, OP___, OP_10, SZ_LONG, 0xB000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FPIAR, M_AREG,  OP___, OP_10, SZ_LONG, 0xA400),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FPIAR, M_DREG,  OP___, OP_10, SZ_LONG, 0xA400),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FPSR,  M_DREG,  OP___, OP_10, SZ_LONG, 0xA800),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FPCR,  M_DREG,  OP___, OP_10, SZ_LONG, 0xB000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FCMLT, M_WADDR, EX_RX, OP_10, SZ_LONG, 0xA000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FPMLT, M_DADDR, EX_SL, OP_10, SZ_XTND, 0xE000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_DREG,  M_DADDR, EX_DL, OP_10, SZ_XTND, 0xE800),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_FPMLT, M_DADDR, EX_SL, OP_10, SZ_XTND, 0xF000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_DREG,  M_DADDR, EX_DL, OP_10, SZ_XTND, 0xF800),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_IADDR, M_FPMLT, OP_10, EX_SL, SZ_XTND, 0xC000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_IADDR, M_DREG,  OP_10, EX_DL, SZ_XTND, 0xC800),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_IADDR, M_FPMLT, OP_10, EX_SL, SZ_XTND, 0xD000),
    P2(0xF000, TEXT_FMOVEM,  ISZ_FIXD, M_IADDR, M_DREG,  OP_10, EX_DL, SZ_XTND, 0xD800),
    P2(0xF000, TEXT_FINT,    ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0001),
    P2(0xF000, TEXT_FSINH,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0002),
    P2(0xF000, TEXT_FINTRZ,  ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0003),
    P2(0xF000, TEXT_FSQRT,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0004),
    P2(0xF000, TEXT_FLOGNP1, ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0006),
    P2(0xF000, TEXT_FETOXM1, ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0008),
    P2(0xF000, TEXT_FTANH,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0009),
    P2(0xF000, TEXT_FATAN,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x000A),
    P2(0xF000, TEXT_FASIN,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x000C),
    P2(0xF000, TEXT_FATANH,  ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x000D),
    P2(0xF000, TEXT_FSIN,    ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x000E),
    P2(0xF000, TEXT_FTAN,    ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x000F),
    P2(0xF000, TEXT_FETOX,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0010),
    P2(0xF000, TEXT_FTWOTOX, ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0011),
    P2(0xF000, TEXT_FTENTOX, ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0012),
    P2(0xF000, TEXT_FLOGN,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0014),
    P2(0xF000, TEXT_FLOG10,  ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0015),
    P2(0xF000, TEXT_FLOG2,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0016),
    P2(0xF000, TEXT_FABS,    ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0018),
    P2(0xF000, TEXT_FCOSH,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x0019),
    P2(0xF000, TEXT_FNEG,    ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x001A),
    P2(0xF000, TEXT_FACOS,   ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x001C),
    P2(0xF000, TEXT_FCOS,    ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x001D),
    P2(0xF000, TEXT_FGETEXP, ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x001E),
    P2(0xF000, TEXT_FGETMAN, ISZ_FIXD, M_FPREG, M_NONE,  EX_RX, OP___, SZ_XTND, 0x001F),
    P2(0xF000, TEXT_FMOVECR, ISZ_FIXD, M_IMROM, M_FPREG, EX_SK, EX_RY, SZ_XTND, 0x5C00),
    E1(0xF100, TEXT_FSAVE,    ISZ_NONE, M_DADDR, OP_10, SZ_NONE),
    E1(0xF140, TEXT_FRESTORE, ISZ_NONE, M_IADDR, OP_10, SZ_NONE),
};

constexpr uint8_t MC68881_ARITH_INDEX[] PROGMEM = {
     19,  // TEXT_FABS
     57,  // TEXT_FABS
    121,  // TEXT_FABS
     22,  // TEXT_FACOS
     60,  // TEXT_FACOS
    124,  // TEXT_FACOS
     28,  // TEXT_FADD
     66,  // TEXT_FADD
      9,  // TEXT_FASIN
     47,  // TEXT_FASIN
    111,  // TEXT_FASIN
      8,  // TEXT_FATAN
     46,  // TEXT_FATAN
    110,  // TEXT_FATAN
     10,  // TEXT_FATANH
     48,  // TEXT_FATANH
    112,  // TEXT_FATANH
     36,  // TEXT_FCMP
     74,  // TEXT_FCMP
     23,  // TEXT_FCOS
     61,  // TEXT_FCOS
    125,  // TEXT_FCOS
     20,  // TEXT_FCOSH
     58,  // TEXT_FCOSH
    122,  // TEXT_FCOSH
     26,  // TEXT_FDIV
     64,  // TEXT_FDIV
     13,  // TEXT_FETOX
     51,  // TEXT_FETOX
    115,  // TEXT_FETOX
      6,  // TEXT_FETOXM1
     44,  // TEXT_FETOXM1
    108,  // TEXT_FETOXM1
     24,  // TEXT_FGETEXP
     62,  // TEXT_FGETEXP
    126,  // TEXT_FGETEXP
     25,  // TEXT_FGETMAN
     63,  // TEXT_FGETMAN
    127,  // TEXT_FGETMAN
      1,  // TEXT_FINT
     39,  // TEXT_FINT
    103,  // TEXT_FINT
      3,  // TEXT_FINTRZ
     41,  // TEXT_FINTRZ
    105,  // TEXT_FINTRZ
     17,  // TEXT_FLOG10
     55,  // TEXT_FLOG10
    119,  // TEXT_FLOG10
     18,  // TEXT_FLOG2
     56,  // TEXT_FLOG2
    120,  // TEXT_FLOG2
     16,  // TEXT_FLOGN
     54,  // TEXT_FLOGN
    118,  // TEXT_FLOGN
      5,  // TEXT_FLOGNP1
     43,  // TEXT_FLOGNP1
    107,  // TEXT_FLOGNP1
     27,  // TEXT_FMOD
     65,  // TEXT_FMOD
      0,  // TEXT_FMOVE
     38,  // TEXT_FMOVE
     76,  // TEXT_FMOVE
     77,  // TEXT_FMOVE
     78,  // TEXT_FMOVE
     79,  // TEXT_FMOVE
     80,  // TEXT_FMOVE
     81,  // TEXT_FMOVE
     87,  // TEXT_FMOVE
     88,  // TEXT_FMOVE
     89,  // TEXT_FMOVE
    128,  // TEXT_FMOVECR
     82,  // TEXT_FMOVEM
     83,  // TEXT_FMOVEM
     84,  // TEXT_FMOVEM
     85,  // TEXT_FMOVEM
     86,  // TEXT_FMOVEM
     90,  // TEXT_FMOVEM
     91,  // TEXT_FMOVEM
     92,  // TEXT_FMOVEM
     93,  // TEXT_FMOVEM
     94,  // TEXT_FMOVEM
     95,  // TEXT_FMOVEM
     96,  // TEXT_FMOVEM
     97,  // TEXT_FMOVEM
     98,  // TEXT_FMOVEM
     99,  // TEXT_FMOVEM
    100,  // TEXT_FMOVEM
    101,  // TEXT_FMOVEM
    102,  // TEXT_FMOVEM
     29,  // TEXT_FMUL
     67,  // TEXT_FMUL
     21,  // TEXT_FNEG
     59,  // TEXT_FNEG
    123,  // TEXT_FNEG
     31,  // TEXT_FREM
     69,  // TEXT_FREM
    130,  // TEXT_FRESTORE
    129,  // TEXT_FSAVE
     32,  // TEXT_FSCALE
     70,  // TEXT_FSCALE
     30,  // TEXT_FSGLDIV
     68,  // TEXT_FSGLDIV
     33,  // TEXT_FSGLMUL
     71,  // TEXT_FSGLMUL
     11,  // TEXT_FSIN
     49,  // TEXT_FSIN
    113,  // TEXT_FSIN
     35,  // TEXT_FSINCOS
     73,  // TEXT_FSINCOS
      2,  // TEXT_FSINH
     40,  // TEXT_FSINH
    104,  // TEXT_FSINH
      4,  // TEXT_FSQRT
     42,  // TEXT_FSQRT
    106,  // TEXT_FSQRT
     34,  // TEXT_FSUB
     72,  // TEXT_FSUB
     12,  // TEXT_FTAN
     50,  // TEXT_FTAN
    114,  // TEXT_FTAN
      7,  // TEXT_FTANH
     45,  // TEXT_FTANH
    109,  // TEXT_FTANH
     15,  // TEXT_FTENTOX
     53,  // TEXT_FTENTOX
    117,  // TEXT_FTENTOX
     37,  // TEXT_FTST
     75,  // TEXT_FTST
     14,  // TEXT_FTWOTOX
     52,  // TEXT_FTWOTOX
    116,  // TEXT_FTWOTOX
};

constexpr Entry MC68881_BRANCH[] PROGMEM = {
    E1(0xF080, TEXT_FBF,      ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF081, TEXT_FBEQ,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF082, TEXT_FBOGT,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF083, TEXT_FBOGE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF084, TEXT_FBOLT,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF085, TEXT_FBOLE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF086, TEXT_FBOGL,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF087, TEXT_FBOR,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF088, TEXT_FBUN,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF089, TEXT_FBUEQ,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF08A, TEXT_FBUGT,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF08B, TEXT_FBUGE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF08C, TEXT_FBULT,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF08D, TEXT_FBULE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF08E, TEXT_FBNE,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF08F, TEXT_FBT,      ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF090, TEXT_FBSF,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF091, TEXT_FBSEQ,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF092, TEXT_FBGT,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF093, TEXT_FBGE,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF094, TEXT_FBLT,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF095, TEXT_FBLE,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF096, TEXT_FBGL,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF097, TEXT_FBGLE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF098, TEXT_FBNGLE,   ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF099, TEXT_FBNGL,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF09A, TEXT_FBNLE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF09B, TEXT_FBNLT,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF09C, TEXT_FBNGE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF09D, TEXT_FBNGT,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF09E, TEXT_FBSNE,    ISZ_NONE, M_REL32, OP___, SZ_LONG),
    E1(0xF09F, TEXT_FBST,     ISZ_NONE, M_REL32, OP___, SZ_LONG),
    P2(0xF048, TEXT_FDBF,     ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0000),
    P2(0xF048, TEXT_FDBEQ,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0001),
    P2(0xF048, TEXT_FDBOGT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0002),
    P2(0xF048, TEXT_FDBOGE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0003),
    P2(0xF048, TEXT_FDBOLT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0004),
    P2(0xF048, TEXT_FDBOLE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0005),
    P2(0xF048, TEXT_FDBOGL,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0006),
    P2(0xF048, TEXT_FDBOR,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0007),
    P2(0xF048, TEXT_FDBUN,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0008),
    P2(0xF048, TEXT_FDBUEQ,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0009),
    P2(0xF048, TEXT_FDBUGT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x000A),
    P2(0xF048, TEXT_FDBUGE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x000B),
    P2(0xF048, TEXT_FDBULT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x000C),
    P2(0xF048, TEXT_FDBULE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x000D),
    P2(0xF048, TEXT_FDBNE,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x000E),
    P2(0xF048, TEXT_FDBT,     ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x000F),
    P2(0xF048, TEXT_FDBSF,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0010),
    P2(0xF048, TEXT_FDBSEQ,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0011),
    P2(0xF048, TEXT_FDBGT,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0012),
    P2(0xF048, TEXT_FDBGE,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0013),
    P2(0xF048, TEXT_FDBLT,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0014),
    P2(0xF048, TEXT_FDBLE,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0015),
    P2(0xF048, TEXT_FDBGL,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0016),
    P2(0xF048, TEXT_FDBGLE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0017),
    P2(0xF048, TEXT_FDBNGLE,  ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0018),
    P2(0xF048, TEXT_FDBNGL,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x0019),
    P2(0xF048, TEXT_FDBNLE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x001A),
    P2(0xF048, TEXT_FDBNLT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x001B),
    P2(0xF048, TEXT_FDBNGE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x001C),
    P2(0xF048, TEXT_FDBNGT,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x001D),
    P2(0xF048, TEXT_FDBSNE,   ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x001E),
    P2(0xF048, TEXT_FDBST,    ISZ_NONE, M_DREG,  M_REL16, OP__0, OP___, SZ_WORD, 0x001F),
};

constexpr uint8_t MC68881_BRANCH_INDEX[] PROGMEM = {
      1,  // TEXT_FBEQ
      0,  // TEXT_FBF
     19,  // TEXT_FBGE
     22,  // TEXT_FBGL
     23,  // TEXT_FBGLE
     18,  // TEXT_FBGT
     21,  // TEXT_FBLE
     20,  // TEXT_FBLT
     14,  // TEXT_FBNE
     28,  // TEXT_FBNGE
     25,  // TEXT_FBNGL
     24,  // TEXT_FBNGLE
     29,  // TEXT_FBNGT
     26,  // TEXT_FBNLE
     27,  // TEXT_FBNLT
      3,  // TEXT_FBOGE
      6,  // TEXT_FBOGL
      2,  // TEXT_FBOGT
      5,  // TEXT_FBOLE
      4,  // TEXT_FBOLT
      7,  // TEXT_FBOR
     17,  // TEXT_FBSEQ
     16,  // TEXT_FBSF
     30,  // TEXT_FBSNE
     31,  // TEXT_FBST
     15,  // TEXT_FBT
      9,  // TEXT_FBUEQ
     11,  // TEXT_FBUGE
     10,  // TEXT_FBUGT
     13,  // TEXT_FBULE
     12,  // TEXT_FBULT
      8,  // TEXT_FBUN
     33,  // TEXT_FDBEQ
     32,  // TEXT_FDBF
     51,  // TEXT_FDBGE
     54,  // TEXT_FDBGL
     55,  // TEXT_FDBGLE
     50,  // TEXT_FDBGT
     53,  // TEXT_FDBLE
     52,  // TEXT_FDBLT
     46,  // TEXT_FDBNE
     60,  // TEXT_FDBNGE
     57,  // TEXT_FDBNGL
     56,  // TEXT_FDBNGLE
     61,  // TEXT_FDBNGT
     58,  // TEXT_FDBNLE
     59,  // TEXT_FDBNLT
     35,  // TEXT_FDBOGE
     38,  // TEXT_FDBOGL
     34,  // TEXT_FDBOGT
     37,  // TEXT_FDBOLE
     36,  // TEXT_FDBOLT
     39,  // TEXT_FDBOR
     49,  // TEXT_FDBSEQ
     48,  // TEXT_FDBSF
     62,  // TEXT_FDBSNE
     63,  // TEXT_FDBST
     47,  // TEXT_FDBT
     41,  // TEXT_FDBUEQ
     43,  // TEXT_FDBUGE
     42,  // TEXT_FDBUGT
     45,  // TEXT_FDBULE
     44,  // TEXT_FDBULT
     40,  // TEXT_FDBUN
};

constexpr Entry MC68881_TRAP[] = {
    P1(0xF040, TEXT_FSF,      ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0000),
    P1(0xF040, TEXT_FSEQ,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0001),
    P1(0xF040, TEXT_FSOGT,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0002),
    P1(0xF040, TEXT_FSOGE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0003),
    P1(0xF040, TEXT_FSOLT,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0004),
    P1(0xF040, TEXT_FSOLE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0005),
    P1(0xF040, TEXT_FSOGL,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0006),
    P1(0xF040, TEXT_FSOR,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0007),
    P1(0xF040, TEXT_FSUN,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0008),
    P1(0xF040, TEXT_FSUEQ,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0009),
    P1(0xF040, TEXT_FSUGT,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x000A),
    P1(0xF040, TEXT_FSUGE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x000B),
    P1(0xF040, TEXT_FSULT,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x000C),
    P1(0xF040, TEXT_FSULE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x000D),
    P1(0xF040, TEXT_FSNE,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x000E),
    P1(0xF040, TEXT_FST,      ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x000F),
    P1(0xF040, TEXT_FSSF,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0010),
    P1(0xF040, TEXT_FSSEQ,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0011),
    P1(0xF040, TEXT_FSGT,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0012),
    P1(0xF040, TEXT_FSGE,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0013),
    P1(0xF040, TEXT_FSLT,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0014),
    P1(0xF040, TEXT_FSLE,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0015),
    P1(0xF040, TEXT_FSGL,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0016),
    P1(0xF040, TEXT_FSGLE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0017),
    P1(0xF040, TEXT_FSNGLE,   ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0018),
    P1(0xF040, TEXT_FSNGL,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x0019),
    P1(0xF040, TEXT_FSNLE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x001A),
    P1(0xF040, TEXT_FSNLT,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x001B),
    P1(0xF040, TEXT_FSNGE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x001C),
    P1(0xF040, TEXT_FSNGT,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x001D),
    P1(0xF040, TEXT_FSSNE,    ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x001E),
    P1(0xF040, TEXT_FSST,     ISZ_NONE, M_WDATA, OP_10, SZ_BYTE, 0x001F),
    P1(0xF07A, TEXT_FTRAPF,    ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0000),
    P1(0xF07A, TEXT_FTRAPEQ,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0001),
    P1(0xF07A, TEXT_FTRAPOGT,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0002),
    P1(0xF07A, TEXT_FTRAPOGE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0003),
    P1(0xF07A, TEXT_FTRAPOLT,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0004),
    P1(0xF07A, TEXT_FTRAPOLE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0005),
    P1(0xF07A, TEXT_FTRAPOGL,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0006),
    P1(0xF07A, TEXT_FTRAPOR,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0007),
    P1(0xF07A, TEXT_FTRAPUN,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0008),
    P1(0xF07A, TEXT_FTRAPUEQ,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0009),
    P1(0xF07A, TEXT_FTRAPUGT,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x000A),
    P1(0xF07A, TEXT_FTRAPUGE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x000B),
    P1(0xF07A, TEXT_FTRAPULT,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x000C),
    P1(0xF07A, TEXT_FTRAPULE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x000D),
    P1(0xF07A, TEXT_FTRAPNE,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x000E),
    P1(0xF07A, TEXT_FTRAPT,    ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x000F),
    P1(0xF07A, TEXT_FTRAPSF,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0010),
    P1(0xF07A, TEXT_FTRAPSEQ,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0011),
    P1(0xF07A, TEXT_FTRAPGT,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0012),
    P1(0xF07A, TEXT_FTRAPGE,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0013),
    P1(0xF07A, TEXT_FTRAPLT,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0014),
    P1(0xF07A, TEXT_FTRAPLE,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0015),
    P1(0xF07A, TEXT_FTRAPGL,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0016),
    P1(0xF07A, TEXT_FTRAPGLE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0017),
    P1(0xF07A, TEXT_FTRAPNGLE, ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0018),
    P1(0xF07A, TEXT_FTRAPNGL,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x0019),
    P1(0xF07A, TEXT_FTRAPNLE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x001A),
    P1(0xF07A, TEXT_FTRAPNLT,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x001B),
    P1(0xF07A, TEXT_FTRAPNGE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x001C),
    P1(0xF07A, TEXT_FTRAPNGT,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x001D),
    P1(0xF07A, TEXT_FTRAPSNE,  ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x001E),
    P1(0xF07A, TEXT_FTRAPST,   ISZ_FIXD, M_IMDAT, OP___, SZ_WORD, 0x001F),
    P1(0xF07B, TEXT_FTRAPF,    ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0000),
    P1(0xF07B, TEXT_FTRAPEQ,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0001),
    P1(0xF07B, TEXT_FTRAPOGT,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0002),
    P1(0xF07B, TEXT_FTRAPOGE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0003),
    P1(0xF07B, TEXT_FTRAPOLT,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0004),
    P1(0xF07B, TEXT_FTRAPOLE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0005),
    P1(0xF07B, TEXT_FTRAPOGL,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0006),
    P1(0xF07B, TEXT_FTRAPOR,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0007),
    P1(0xF07B, TEXT_FTRAPUN,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0008),
    P1(0xF07B, TEXT_FTRAPUEQ,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0009),
    P1(0xF07B, TEXT_FTRAPUGT,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x000A),
    P1(0xF07B, TEXT_FTRAPUGE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x000B),
    P1(0xF07B, TEXT_FTRAPULT,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x000C),
    P1(0xF07B, TEXT_FTRAPULE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x000D),
    P1(0xF07B, TEXT_FTRAPNE,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x000E),
    P1(0xF07B, TEXT_FTRAPT,    ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x000F),
    P1(0xF07B, TEXT_FTRAPSF,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0010),
    P1(0xF07B, TEXT_FTRAPSEQ,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0011),
    P1(0xF07B, TEXT_FTRAPGT,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0012),
    P1(0xF07B, TEXT_FTRAPGE,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0013),
    P1(0xF07B, TEXT_FTRAPLT,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0014),
    P1(0xF07B, TEXT_FTRAPLE,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0015),
    P1(0xF07B, TEXT_FTRAPGL,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0016),
    P1(0xF07B, TEXT_FTRAPGLE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0017),
    P1(0xF07B, TEXT_FTRAPNGLE, ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0018),
    P1(0xF07B, TEXT_FTRAPNGL,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x0019),
    P1(0xF07B, TEXT_FTRAPNLE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x001A),
    P1(0xF07B, TEXT_FTRAPNLT,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x001B),
    P1(0xF07B, TEXT_FTRAPNGE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x001C),
    P1(0xF07B, TEXT_FTRAPNGT,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x001D),
    P1(0xF07B, TEXT_FTRAPSNE,  ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x001E),
    P1(0xF07B, TEXT_FTRAPST,   ISZ_FIXD, M_IMDAT, OP___, SZ_LONG, 0x001F),
    P0(0xF07C, TEXT_FTRAPF,    0x0000),
    P0(0xF07C, TEXT_FTRAPEQ,   0x0001),
    P0(0xF07C, TEXT_FTRAPOGT,  0x0002),
    P0(0xF07C, TEXT_FTRAPOGE,  0x0003),
    P0(0xF07C, TEXT_FTRAPOLT,  0x0004),
    P0(0xF07C, TEXT_FTRAPOLE,  0x0005),
    P0(0xF07C, TEXT_FTRAPOGL,  0x0006),
    P0(0xF07C, TEXT_FTRAPOR,   0x0007),
    P0(0xF07C, TEXT_FTRAPUN,   0x0008),
    P0(0xF07C, TEXT_FTRAPUEQ,  0x0009),
    P0(0xF07C, TEXT_FTRAPUGT,  0x000A),
    P0(0xF07C, TEXT_FTRAPUGE,  0x000B),
    P0(0xF07C, TEXT_FTRAPULT,  0x000C),
    P0(0xF07C, TEXT_FTRAPULE,  0x000D),
    P0(0xF07C, TEXT_FTRAPNE,   0x000E),
    P0(0xF07C, TEXT_FTRAPT,    0x000F),
    P0(0xF07C, TEXT_FTRAPSF,   0x0010),
    P0(0xF07C, TEXT_FTRAPSEQ,  0x0011),
    P0(0xF07C, TEXT_FTRAPGT,   0x0012),
    P0(0xF07C, TEXT_FTRAPGE,   0x0013),
    P0(0xF07C, TEXT_FTRAPLT,   0x0014),
    P0(0xF07C, TEXT_FTRAPLE,   0x0015),
    P0(0xF07C, TEXT_FTRAPGL,   0x0016),
    P0(0xF07C, TEXT_FTRAPGLE,  0x0017),
    P0(0xF07C, TEXT_FTRAPNGLE, 0x0018),
    P0(0xF07C, TEXT_FTRAPNGL,  0x0019),
    P0(0xF07C, TEXT_FTRAPNLE,  0x001A),
    P0(0xF07C, TEXT_FTRAPNLT,  0x001B),
    P0(0xF07C, TEXT_FTRAPNGE,  0x001C),
    P0(0xF07C, TEXT_FTRAPNGT,  0x001D),
    P0(0xF07C, TEXT_FTRAPSNE,  0x001E),
    P0(0xF07C, TEXT_FTRAPST,   0x001F),
};

constexpr uint8_t MC68881_TRAP_INDEX[] PROGMEM = {
      1,  // TEXT_FSEQ
      0,  // TEXT_FSF
     19,  // TEXT_FSGE
     22,  // TEXT_FSGL
     23,  // TEXT_FSGLE
     18,  // TEXT_FSGT
     21,  // TEXT_FSLE
     20,  // TEXT_FSLT
     14,  // TEXT_FSNE
     28,  // TEXT_FSNGE
     25,  // TEXT_FSNGL
     24,  // TEXT_FSNGLE
     29,  // TEXT_FSNGT
     26,  // TEXT_FSNLE
     27,  // TEXT_FSNLT
      3,  // TEXT_FSOGE
      6,  // TEXT_FSOGL
      2,  // TEXT_FSOGT
      5,  // TEXT_FSOLE
      4,  // TEXT_FSOLT
      7,  // TEXT_FSOR
     17,  // TEXT_FSSEQ
     16,  // TEXT_FSSF
     30,  // TEXT_FSSNE
     31,  // TEXT_FSST
     15,  // TEXT_FST
      9,  // TEXT_FSUEQ
     11,  // TEXT_FSUGE
     10,  // TEXT_FSUGT
     13,  // TEXT_FSULE
     12,  // TEXT_FSULT
      8,  // TEXT_FSUN
     33,  // TEXT_FTRAPEQ
     65,  // TEXT_FTRAPEQ
     97,  // TEXT_FTRAPEQ
     32,  // TEXT_FTRAPF
     64,  // TEXT_FTRAPF
     96,  // TEXT_FTRAPF
     51,  // TEXT_FTRAPGE
     83,  // TEXT_FTRAPGE
    115,  // TEXT_FTRAPGE
     54,  // TEXT_FTRAPGL
     86,  // TEXT_FTRAPGL
    118,  // TEXT_FTRAPGL
     55,  // TEXT_FTRAPGLE
     87,  // TEXT_FTRAPGLE
    119,  // TEXT_FTRAPGLE
     50,  // TEXT_FTRAPGT
     82,  // TEXT_FTRAPGT
    114,  // TEXT_FTRAPGT
     53,  // TEXT_FTRAPLE
     85,  // TEXT_FTRAPLE
    117,  // TEXT_FTRAPLE
     52,  // TEXT_FTRAPLT
     84,  // TEXT_FTRAPLT
    116,  // TEXT_FTRAPLT
     46,  // TEXT_FTRAPNE
     78,  // TEXT_FTRAPNE
    110,  // TEXT_FTRAPNE
     60,  // TEXT_FTRAPNGE
     92,  // TEXT_FTRAPNGE
    124,  // TEXT_FTRAPNGE
     57,  // TEXT_FTRAPNGL
     89,  // TEXT_FTRAPNGL
    121,  // TEXT_FTRAPNGL
     56,  // TEXT_FTRAPNGLE
     88,  // TEXT_FTRAPNGLE
    120,  // TEXT_FTRAPNGLE
     61,  // TEXT_FTRAPNGT
     93,  // TEXT_FTRAPNGT
    125,  // TEXT_FTRAPNGT
     58,  // TEXT_FTRAPNLE
     90,  // TEXT_FTRAPNLE
    122,  // TEXT_FTRAPNLE
     59,  // TEXT_FTRAPNLT
     91,  // TEXT_FTRAPNLT
    123,  // TEXT_FTRAPNLT
     35,  // TEXT_FTRAPOGE
     67,  // TEXT_FTRAPOGE
     99,  // TEXT_FTRAPOGE
     38,  // TEXT_FTRAPOGL
     70,  // TEXT_FTRAPOGL
    102,  // TEXT_FTRAPOGL
     34,  // TEXT_FTRAPOGT
     66,  // TEXT_FTRAPOGT
     98,  // TEXT_FTRAPOGT
     37,  // TEXT_FTRAPOLE
     69,  // TEXT_FTRAPOLE
    101,  // TEXT_FTRAPOLE
     36,  // TEXT_FTRAPOLT
     68,  // TEXT_FTRAPOLT
    100,  // TEXT_FTRAPOLT
     39,  // TEXT_FTRAPOR
     71,  // TEXT_FTRAPOR
    103,  // TEXT_FTRAPOR
     49,  // TEXT_FTRAPSEQ
     81,  // TEXT_FTRAPSEQ
    113,  // TEXT_FTRAPSEQ
     48,  // TEXT_FTRAPSF
     80,  // TEXT_FTRAPSF
    112,  // TEXT_FTRAPSF
     62,  // TEXT_FTRAPSNE
     94,  // TEXT_FTRAPSNE
    126,  // TEXT_FTRAPSNE
     63,  // TEXT_FTRAPST
     95,  // TEXT_FTRAPST
    127,  // TEXT_FTRAPST
     47,  // TEXT_FTRAPT
     79,  // TEXT_FTRAPT
    111,  // TEXT_FTRAPT
     41,  // TEXT_FTRAPUEQ
     73,  // TEXT_FTRAPUEQ
    105,  // TEXT_FTRAPUEQ
     43,  // TEXT_FTRAPUGE
     75,  // TEXT_FTRAPUGE
    107,  // TEXT_FTRAPUGE
     42,  // TEXT_FTRAPUGT
     74,  // TEXT_FTRAPUGT
    106,  // TEXT_FTRAPUGT
     45,  // TEXT_FTRAPULE
     77,  // TEXT_FTRAPULE
    109,  // TEXT_FTRAPULE
     44,  // TEXT_FTRAPULT
     76,  // TEXT_FTRAPULT
    108,  // TEXT_FTRAPULT
     40,  // TEXT_FTRAPUN
     72,  // TEXT_FTRAPUN
    104,  // TEXT_FTRAPUN
};

#endif
// clang-format on

using EntryPage = entry::TableBase<Entry>;

constexpr EntryPage MC68000_PAGES[] PROGMEM = {
        {ARRAY_RANGE(MC68000_TABLE), ARRAY_RANGE(MC68000_INDEX)},
};

constexpr EntryPage MC68010_PAGES[] PROGMEM = {
        {ARRAY_RANGE(MC68010_TABLE), ARRAY_RANGE(MC68010_INDEX)},
        {ARRAY_RANGE(MC68000_TABLE), ARRAY_RANGE(MC68000_INDEX)},
};

#if !defined(LIBASM_MC68000_NOFPU)
constexpr EntryPage MC68881_PAGES[] PROGMEM = {
        {ARRAY_RANGE(MC68881_ARITH), ARRAY_RANGE(MC68881_ARITH_INDEX)},
        {ARRAY_RANGE(MC68881_BRANCH), ARRAY_RANGE(MC68881_BRANCH_INDEX)},
        {ARRAY_RANGE(MC68881_TRAP), ARRAY_RANGE(MC68881_TRAP_INDEX)},
};
#endif

using Cpu = entry::CpuBase<CpuType, EntryPage>;

constexpr Cpu CPU_TABLE[] PROGMEM = {
        {MC68000, TEXT_CPU_68000, ARRAY_RANGE(MC68000_PAGES)},
        {MC68010, TEXT_CPU_68010, ARRAY_RANGE(MC68010_PAGES)},
        {MC68020, TEXT_CPU_68020, ARRAY_RANGE(MC68010_PAGES)},
};

const Cpu *cpu(CpuType cpuType) {
    return Cpu::search(cpuType, ARRAY_RANGE(CPU_TABLE));
}

#define EMPTY_RANGE(a) ARRAY_BEGIN(a), ARRAY_BEGIN(a)

#if !defined(LIBASM_MC68000_NOFPU)
using Fpu = entry::CpuBase<FpuType, EntryPage>;

constexpr Fpu FPU_TABLE[] PROGMEM = {
        {FPU_MC68881, TEXT_FPU_68881, ARRAY_RANGE(MC68881_PAGES)},
        {FPU_NONE, TEXT_none, EMPTY_RANGE(MC68881_PAGES)},
};

const Fpu *fpu(FpuType fpuType) {
    return Fpu::search(fpuType, ARRAY_RANGE(FPU_TABLE));
}
#endif

bool hasOperand(const CpuSpec &cpuSpec, AsmInsn &insn) {
    cpu(cpuSpec.cpu)->searchName(insn, Cpu::acceptAll<AsmInsn, Entry>);
#if !defined(LIBASM_MC68000_NOFPU)
    if (!insn.isOK())
        fpu(cpuSpec.fpu)->searchName(insn, Cpu::acceptAll<AsmInsn, Entry>);
#endif
    return insn.isOK() && insn.src() != M_NONE;
}

bool acceptMode(AddrMode opr, AddrMode table, OprSize size) {
    if (opr == table)
        return true;
    if (opr == M_DREG)
        return table == M_RADDR || table == M_RDATA || table == M_WADDR || table == M_WDATA ||
               table == M_MULT;
    if (opr == M_AREG)
        return table == M_RADDR || table == M_WADDR || table == M_MULT;
    if (opr == M_AIND || opr == M_DISP || opr == M_INDX || opr == M_AWORD || opr == M_ALONG)
        return table == M_RADDR || table == M_RDATA || table == M_WADDR || table == M_WDATA ||
               table == M_RMEM || table == M_WMEM || table == M_JADDR || table == M_IADDR ||
               table == M_DADDR;
    if (opr == M_PINC)
        return table == M_RADDR || table == M_RDATA || table == M_WADDR || table == M_WDATA ||
               table == M_RMEM || table == M_WMEM || table == M_IADDR;
    if (opr == M_PDEC)
        return table == M_RADDR || table == M_RDATA || table == M_WADDR || table == M_WDATA ||
               table == M_RMEM || table == M_WMEM || table == M_DADDR;
    if (opr == M_LABEL)
        return table == M_REL8 || table == M_REL16 || table == M_REL32;
    if (opr == M_PCDSP || opr == M_PCIDX)
        return table == M_RADDR || table == M_RDATA || table == M_RMEM || table == M_JADDR ||
               table == M_IADDR;
    if (opr == M_IMDAT)
        return table == M_RADDR || table == M_RDATA || table == M_IMBIT || table == M_IM3 ||
               table == M_IM8 || table == M_IMVEC || table == M_IMDSP || table == M_IMROM;
    if (opr == M_IMFLT)
        return table == M_RDATA && size == SZ_FDAT;
    if (opr == M_FPREG)
        return table == M_FPMLT;
    if (opr == M_FPCR || opr == M_FPSR || opr == M_FPIAR)
        return table == M_FCMLT;
    if (opr == M_USP)
        return table == M_CREG;
    return false;
}

bool acceptSize(const AsmInsn &insn, const Entry::Flags &flags) {
    const auto insnSize = insn.insnSize();
    const auto opr = flags.oprSize();
    if (insnSize == InsnSize(opr))
        return true;
    const auto src = flags.src();
    if (src == M_REL8 || src == M_REL16 || src == M_REL32 || flags.dst() == M_REL16)
        return insnSize == ISZ_NONE || insnSize == ISZ_BYTE || insnSize == ISZ_SNGL ||
               insnSize == ISZ_WORD || insnSize == ISZ_LONG || insnSize == ISZ_XTND;
    if (insnSize == ISZ_BYTE)
        return opr == SZ_DATA || opr == SZ_FDAT;
    if (insnSize == ISZ_WORD || insnSize == ISZ_LONG)
        return opr == SZ_DATA || opr == SZ_ADDR || opr == SZ_ADR8 || opr == SZ_FDAT;
    if (insnSize == ISZ_SNGL || insnSize == ISZ_DUBL || insnSize == ISZ_XTND ||
            insnSize == ISZ_PBCD)
        return opr == SZ_FDAT;
    if (insnSize == ISZ_NONE) {
        const auto table = flags.insnSize();
        return opr == SZ_DATA || opr == SZ_ADDR || opr == SZ_ADR8 || opr == SZ_WORD ||
               table == ISZ_NONE || table == ISZ_FIXD;
    }
    return false;
}

bool acceptModes(AsmInsn &insn, const Entry *entry) {
    const auto table = entry->readFlags();
    return acceptMode(insn.srcOp.mode, table.src(), table.oprSize()) &&
           acceptMode(insn.dstOp.mode, table.dst(), table.oprSize()) && acceptSize(insn, table);
}

Error searchName(const CpuSpec &cpuSpec, AsmInsn &insn) {
    cpu(cpuSpec.cpu)->searchName(insn, acceptModes);
#if !defined(LIBASM_MC68000_NOFPU)
    if (insn.getError() == UNKNOWN_INSTRUCTION) {
        fpu(cpuSpec.fpu)->searchName(insn, acceptModes);
        if (insn.getError() != UNKNOWN_INSTRUCTION)
            insn.embed(cpuSpec.fpuCid << 9);
    }
#endif
    return insn.getError();
}

bool invalidModeReg(Config::opcode_t opc, AddrMode addrMode, OprPos pos, OprSize size) {
    uint8_t mode, reg;
    if (pos == OP_10 || addrMode == M_KFACT || addrMode == M_KDREG) {
        mode = (opc >> 3) & 7;
        reg = (opc >> 0) & 7;
    } else if (pos == OP_23) {
        mode = (opc >> 6) & 7;
        reg = (opc >> 9) & 7;
    } else {
        return false;
    }
    if (mode < 7) {
        // mode
        // |  0 |  1 |   2  |   3   |   4   |    5   |     6     |
        // +----+----+------+-------+-------+--------+-----------+
        // | Dn |  1 | (An) | (An)+ | -(An) | (n,An) | (n,An,Xn) |
        if (addrMode == M_RDATA || addrMode == M_WDATA || addrMode == M_KFACT ||
                addrMode == M_KDREG)
            return mode == 1;
        // |  0 |  1 | (An) | (An)+ | -(An) | (*,An) | (*,An,Xn) |
        if (addrMode == M_RMEM || addrMode == M_WMEM)
            return mode < 2;
        // |  0 |  1 | (An) |   3   |   4   | (n,An) | (n,An,Xn) |
        if (addrMode == M_JADDR)
            return mode < 2 || mode == 3 || mode == 4;
        // |  0 |  1 | (An) | (An)+ |   4   | (n,An) | (n,An,Xn) |
        if (addrMode == M_IADDR)
            return mode < 2 || mode == 4;
        //       (An)/     /-(An)/(*,An)/(*,An,Xn)
        // |  0 |  1 | (An) |   3   | -(An) | (n,An) | (n,An,Xn) |
        if (addrMode == M_DADDR)
            return mode < 2 || mode == 3;
        // | Dn | An*| (An) | (An)+ | -(An) | (n,An) | (n,An,Xn) |
        // M_WADDR, M_RADDR
        if (mode == 1 && size == SZ_DATA) {  // no BYTE size for An
            const auto insnSize = (opc >> 6) & 3;
            return insnSize == 0 || insnSize == 3;
        }
        return false;
    }
    // mode == 7
    if (reg >= 5)
        return true;
    // reg
    // |   0   |   1   |    2   |     3     |  4 |
    // | (n).W | (n).L | (n,PC) | (n,PC,Xn) | #n |
    if (addrMode == M_RADDR || addrMode == M_RDATA)
        return false;
    // | (n).W | (n).L | (n,PC) | (n,PC,Xn) |  4 |
    if (addrMode == M_RMEM || addrMode == M_JADDR || addrMode == M_IADDR)
        return reg == 4;
    // | (n).W | (n).L |    2   |     3     |  4 |
    // M_WADDR, M_WDATA, M_WFIAR, M_WMEM, M_DADDR, M_KFACT, M_KDREG
    return reg >= 2;
}

bool invalidSize(Config::opcode_t opc, OprSize size) {
    return size == SZ_DATA && ((opc >> 6) & 3) == 3;
}

bool matchOpCode(DisInsn &insn, const Entry *entry, const EntryPage *) {
    auto opc = insn.opCode();
    const auto flags = entry->readFlags();
    opc &= ~flags.insnMask();
    if ((opc & 0xF000) == 0xF000)
        opc &= ~07000;  // clear co-processor ID
    if (opc != entry->readOpCode())
        return false;
    // Check illegal addressing mode
    opc = insn.opCode();
    if (invalidModeReg(opc, flags.src(), flags.srcPos(), flags.oprSize()))
        return false;
    if (invalidModeReg(opc, flags.dst(), flags.dstPos(), flags.oprSize()))
        return false;
    if (invalidSize(opc, flags.oprSize()))
        return false;
    if (flags.hasPostVal()) {
        insn.readPostfix();
        if (insn.length() < sizeof(Config::opcode_t) * 2)
            insn.setPostfix(insn.readUint16());
        auto post = insn.postfix();
        if (flags.oprSize() == SZ_FDAT) {
            const auto oprSize = (post >> 10) & 7;
            if (oprSize == 7)
                return false;  // illegal float format
            post &= ~(7 << 10);
        }
        post &= ~flags.postMask();
        return post == flags.postVal();
    }
    return true;
}

Error searchOpCode(const CpuSpec &cpuSpec, DisInsn &insn, StrBuffer &out) {
    cpu(cpuSpec.cpu)->searchOpCode(insn, out, matchOpCode);
#if !defined(LIBASM_MC68000_NOFPU)
    if (insn.getError() == UNKNOWN_INSTRUCTION) {
        if ((insn.opCode() & 0xFE00) == (0xF000 | (cpuSpec.fpuCid << 9)))
            fpu(cpuSpec.fpu)->searchOpCode(insn, out, matchOpCode);
    }
#endif
    if (insn.getError() == UNKNOWN_INSTRUCTION)
        insn.nameBuffer().reset();
    return insn.getError();
}

const /*PROGMEM*/ char *TableMc68000::listCpu_P() const {
    return TEXT_MC68000_LIST;
}

const /*PROGMEM*/ char *TableMc68000::cpuName_P(CpuType cpuType) const {
    return cpu(cpuType)->name_P();
}

Error TableMc68000::searchCpuName(StrScanner &name, CpuType &cpuType) const {
    name.iexpectText_P(TEXT_CPU_MC68000, 2);
    auto t = Cpu::search(name, ARRAY_RANGE(CPU_TABLE));
    if (t) {
        cpuType = t->readCpuType();
        return OK;
    }
    return UNSUPPORTED_CPU;
}

const /*PROGMEM*/ char *Config::fpu_P() const {
    return fpu(_cpuSpec.fpu)->name_P();
}

Error Config::setFpuType(FpuType fpuType) {
    if (fpuType == FPU_NONE) {
        _cpuSpec.fpu = FPU_NONE;
        return OK;
    }
#if !defined(LIBASM_MC68000_NOFPU)
    if (fpuType == FPU_ON || fpuType == FPU_MC68881) {
        _cpuSpec.fpu = FPU_MC68881;
        return OK;
    }
#endif
    return UNKNOWN_OPERAND;
}

Error Config::setFpuName(StrScanner &scan) {
    if (scan.expectFalse())
        return setFpuType(FPU_NONE);
#if !defined(LIBASM_MC68000_NOFPU)
    if (scan.expectTrue())
        return setFpuType(FPU_ON);
    if (scan.iequals_P(TEXT_FPU_68881) || scan.iequals_P(TEXT_FPU_MC68881))
        return setFpuType(FPU_MC68881);
#endif
    return UNKNOWN_OPERAND;
}

const TableMc68000 TABLE;

}  // namespace mc68000
}  // namespace libasm

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
