/*
 * Copyright 2020 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __CLI_LISTING_H__
#define __CLI_LISTING_H__

#include "config_base.h"
#include "str_buffer.h"
#include "value.h"
#include "value_formatter.h"

#include <cstdint>

namespace libasm {
namespace driver {

struct ListFormatter {
    virtual void setUpperHex(bool enable);
    /** Switch value, address, bytes formatter radix */
    void setListRadix(Radix radix);

    bool hasNextContent() const;
    const char *getContent();
    virtual bool hasNextLine() const = 0;
    virtual const char *getLine() = 0;

protected:
    ListFormatter();

    StrBuffer _out;

private:
    const ValueFormatter _rawFormatter;
    bool _upperHex;
    char _outBuffer[256];
    Radix _listRadix;

protected:
    char *outBuffer() { return _outBuffer; }
    void resetOut() { _out.reset(_outBuffer, sizeof(_outBuffer)); }
    int outLength() const { return _out.mark() - _outBuffer; }

    virtual uint32_t startAddress() const = 0;
    virtual int generatedSize() const = 0;
    virtual uint8_t getByte(int offset) const = 0;
    virtual const ConfigBase &config() const = 0;

    /**
     * Format |val| as right-justified |width| digits decimal number. Left-justified when |width| is
     * negative.
     */
    void formatDec(uint32_t val, int8_t width = 0);
    /** Format |val| as |width| bits zero-suppressed number */
    void formatValue(uint32_t val, uint8_t bits = 0, int8_t width = 0, bool zeroSuppress = false);
    /** Format |addr| as a target address */
    void formatAddress(uint32_t addr);
    constexpr int addressColumnWidth() const { return 10; }
    /** Format generated bytes as a target style bytes or words */
    int formatBytes(int base);
    constexpr int bytesInLine() const { return 6; }
    constexpr int bytesColumnWidth() const { return 19; }
    /** Format to the next tab position, which is |delta| letters width */
    void formatTab(int tabPosition, int delta = 4);

protected:
    void outSpaces(int n);
};

}  // namespace driver
}  // namespace libasm

#endif

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
