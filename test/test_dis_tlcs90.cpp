/*
 * Copyright 2020 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "dis_tlcs90.h"
#include "test_dis_helper.h"

using namespace libasm;
using namespace libasm::tlcs90;
using namespace libasm::test;

DisTlcs90 dis90;
Disassembler &disassembler(dis90);

static void set_up() {
    disassembler.reset();
}

static void tear_down() {
    symtab.reset();
}

// clang-format off
static void test_cpu() {
    EQUALS("cpu tlcs90", true, disassembler.setCpu("tlcs90"));
    EQUALS("get cpu", "TLCS90", disassembler.getCpu());
}

static void test_8bit_transfer() {
    // LD A,r
    TEST(LD, "A,B", 0x20);
    TEST(LD, "A,C", 0x21);
    TEST(LD, "A,D", 0x22);
    TEST(LD, "A,E", 0x23);
    TEST(LD, "A,H", 0x24);
    TEST(LD, "A,L", 0x25);
    TEST(LD, "A,A", 0x26);

    // LD r,A
    TEST(LD, "B,A", 0x28);
    TEST(LD, "C,A", 0x29);
    TEST(LD, "D,A", 0x2A);
    TEST(LD, "E,A", 0x2B);
    TEST(LD, "H,A", 0x2C);
    TEST(LD, "L,A", 0x2D);
    TEST(LD, "A,A", 0x2E);

    // LD r,g
    TEST(LD, "B,B", 0xF8, 0x30);
    TEST(LD, "B,C", 0xF9, 0x30);
    TEST(LD, "B,D", 0xFA, 0x30);
    TEST(LD, "B,E", 0xFB, 0x30);
    TEST(LD, "B,H", 0xFC, 0x30);
    TEST(LD, "B,L", 0xFD, 0x30);
    TEST(LD, "B,A", 0xFE, 0x30);
    TEST(LD, "C,B", 0xF8, 0x31);
    TEST(LD, "C,C", 0xF9, 0x31);
    TEST(LD, "C,D", 0xFA, 0x31);
    TEST(LD, "C,E", 0xFB, 0x31);
    TEST(LD, "C,H", 0xFC, 0x31);
    TEST(LD, "C,L", 0xFD, 0x31);
    TEST(LD, "C,A", 0xFE, 0x31);
    TEST(LD, "D,B", 0xF8, 0x32);
    TEST(LD, "D,C", 0xF9, 0x32);
    TEST(LD, "D,D", 0xFA, 0x32);
    TEST(LD, "D,E", 0xFB, 0x32);
    TEST(LD, "D,H", 0xFC, 0x32);
    TEST(LD, "D,L", 0xFD, 0x32);
    TEST(LD, "D,A", 0xFE, 0x32);
    TEST(LD, "E,B", 0xF8, 0x33);
    TEST(LD, "E,C", 0xF9, 0x33);
    TEST(LD, "E,D", 0xFA, 0x33);
    TEST(LD, "E,E", 0xFB, 0x33);
    TEST(LD, "E,H", 0xFC, 0x33);
    TEST(LD, "E,L", 0xFD, 0x33);
    TEST(LD, "E,A", 0xFE, 0x33);
    TEST(LD, "H,B", 0xF8, 0x34);
    TEST(LD, "H,C", 0xF9, 0x34);
    TEST(LD, "H,D", 0xFA, 0x34);
    TEST(LD, "H,E", 0xFB, 0x34);
    TEST(LD, "H,H", 0xFC, 0x34);
    TEST(LD, "H,L", 0xFD, 0x34);
    TEST(LD, "H,A", 0xFE, 0x34);
    TEST(LD, "L,B", 0xF8, 0x35);
    TEST(LD, "L,C", 0xF9, 0x35);
    TEST(LD, "L,D", 0xFA, 0x35);
    TEST(LD, "L,E", 0xFB, 0x35);
    TEST(LD, "L,H", 0xFC, 0x35);
    TEST(LD, "L,L", 0xFD, 0x35);
    TEST(LD, "L,A", 0xFE, 0x35);
    TEST(LD, "A,B", 0xF8, 0x36);
    TEST(LD, "A,C", 0xF9, 0x36);
    TEST(LD, "A,D", 0xFA, 0x36);
    TEST(LD, "A,E", 0xFB, 0x36);
    TEST(LD, "A,H", 0xFC, 0x36);
    TEST(LD, "A,L", 0xFD, 0x36);
    TEST(LD, "A,A", 0xFE, 0x36);

    // LD r,n
    TEST(LD, "B,18",   0x30, 0x12);
    TEST(LD, "C,34H",  0x31, 0x34);
    TEST(LD, "D,56H",  0x32, 0x56);
    TEST(LD, "E,78H",  0x33, 0x78);
    TEST(LD, "H,9AH",  0x34, 0x9A);
    TEST(LD, "L,0BCH", 0x35, 0xBC);
    TEST(LD, "A,0DEH", 0x36, 0xDE);

    // LD A,(n)
    TEST(LD, "A,(0FF12H)", 0x27, 0x12);

    // LD r,(gg)
    TEST(LD, "B,(BC)", 0xE0, 0x28);
    TEST(LD, "C,(BC)", 0xE0, 0x29);
    TEST(LD, "D,(BC)", 0xE0, 0x2A);
    TEST(LD, "E,(BC)", 0xE0, 0x2B);
    TEST(LD, "H,(BC)", 0xE0, 0x2C);
    TEST(LD, "L,(BC)", 0xE0, 0x2D);
    TEST(LD, "A,(BC)", 0xE0, 0x2E);
    TEST(LD, "B,(DE)", 0xE1, 0x28);
    TEST(LD, "C,(DE)", 0xE1, 0x29);
    TEST(LD, "D,(DE)", 0xE1, 0x2A);
    TEST(LD, "E,(DE)", 0xE1, 0x2B);
    TEST(LD, "H,(DE)", 0xE1, 0x2C);
    TEST(LD, "L,(DE)", 0xE1, 0x2D);
    TEST(LD, "A,(DE)", 0xE1, 0x2E);
    TEST(LD, "B,(HL)", 0xE2, 0x28);
    TEST(LD, "C,(HL)", 0xE2, 0x29);
    TEST(LD, "D,(HL)", 0xE2, 0x2A);
    TEST(LD, "E,(HL)", 0xE2, 0x2B);
    TEST(LD, "H,(HL)", 0xE2, 0x2C);
    TEST(LD, "L,(HL)", 0xE2, 0x2D);
    TEST(LD, "A,(HL)", 0xE2, 0x2E);
    TEST(LD, "B,(IX)", 0xE4, 0x28);
    TEST(LD, "C,(IX)", 0xE4, 0x29);
    TEST(LD, "D,(IX)", 0xE4, 0x2A);
    TEST(LD, "E,(IX)", 0xE4, 0x2B);
    TEST(LD, "H,(IX)", 0xE4, 0x2C);
    TEST(LD, "L,(IX)", 0xE4, 0x2D);
    TEST(LD, "A,(IX)", 0xE4, 0x2E);
    TEST(LD, "B,(IY)", 0xE5, 0x28);
    TEST(LD, "C,(IY)", 0xE5, 0x29);
    TEST(LD, "D,(IY)", 0xE5, 0x2A);
    TEST(LD, "E,(IY)", 0xE5, 0x2B);
    TEST(LD, "H,(IY)", 0xE5, 0x2C);
    TEST(LD, "L,(IY)", 0xE5, 0x2D);
    TEST(LD, "A,(IY)", 0xE5, 0x2E);
    TEST(LD, "B,(SP)", 0xE6, 0x28);
    TEST(LD, "C,(SP)", 0xE6, 0x29);
    TEST(LD, "D,(SP)", 0xE6, 0x2A);
    TEST(LD, "E,(SP)", 0xE6, 0x2B);
    TEST(LD, "H,(SP)", 0xE6, 0x2C);
    TEST(LD, "L,(SP)", 0xE6, 0x2D);
    TEST(LD, "A,(SP)", 0xE6, 0x2E);

    // LD r,(ix+d)
    TEST(LD, "B,(IX+18)",  0xF0, 0x12, 0x28);
    TEST(LD, "C,(IX+34H)", 0xF0, 0x34, 0x29);
    TEST(LD, "D,(IX+56H)", 0xF0, 0x56, 0x2A);
    TEST(LD, "E,(IX+78H)", 0xF0, 0x78, 0x2B);
    TEST(LD, "H,(IX-66H)", 0xF0, 0x9A, 0x2C);
    TEST(LD, "L,(IX-44H)", 0xF0, 0xBC, 0x2D);
    TEST(LD, "A,(IX-22H)", 0xF0, 0xDE, 0x2E);
    TEST(LD, "B,(IY+18)",  0xF1, 0x12, 0x28);
    TEST(LD, "C,(IY+34H)", 0xF1, 0x34, 0x29);
    TEST(LD, "D,(IY+56H)", 0xF1, 0x56, 0x2A);
    TEST(LD, "E,(IY+78H)", 0xF1, 0x78, 0x2B);
    TEST(LD, "H,(IY-66H)", 0xF1, 0x9A, 0x2C);
    TEST(LD, "L,(IY-44H)", 0xF1, 0xBC, 0x2D);
    TEST(LD, "A,(IY-22H)", 0xF1, 0xDE, 0x2E);
    TEST(LD, "B,(SP+18)",  0xF2, 0x12, 0x28);
    TEST(LD, "C,(SP+34H)", 0xF2, 0x34, 0x29);
    TEST(LD, "D,(SP+56H)", 0xF2, 0x56, 0x2A);
    TEST(LD, "E,(SP+78H)", 0xF2, 0x78, 0x2B);
    TEST(LD, "H,(SP-66H)", 0xF2, 0x9A, 0x2C);
    TEST(LD, "L,(SP-44H)", 0xF2, 0xBC, 0x2D);
    TEST(LD, "A,(SP-22H)", 0xF2, 0xDE, 0x2E);

    // LD r,(HL+A)
    TEST(LD, "B,(HL+A)", 0xF3, 0x28);
    TEST(LD, "C,(HL+A)", 0xF3, 0x29);
    TEST(LD, "D,(HL+A)", 0xF3, 0x2A);
    TEST(LD, "E,(HL+A)", 0xF3, 0x2B);
    TEST(LD, "H,(HL+A)", 0xF3, 0x2C);
    TEST(LD, "L,(HL+A)", 0xF3, 0x2D);
    TEST(LD, "A,(HL+A)", 0xF3, 0x2E);

    // LD r,(mn)
    TEST(LD, "B,(1234H)",  0xE3, 0x34, 0x12, 0x28);
    TEST(LD, "C,(5678H)",  0xE3, 0x78, 0x56, 0x29);
    TEST(LD, "D,(9ABCH)",  0xE3, 0xBC, 0x9A, 0x2A);
    TEST(LD, "E,(0DEF0H)", 0xE3, 0xF0, 0xDE, 0x2B);
    TEST(LD, "H,(0FEDCH)", 0xE3, 0xDC, 0xFE, 0x2C);
    TEST(LD, "L,(0BA98H)", 0xE3, 0x98, 0xBA, 0x2D);
    TEST(LD, "A,(7654H)",  0xE3, 0x54, 0x76, 0x2E);

    // LD r,(n)
    TEST(LD, "B,(0FF12H)", 0xE7, 0x12, 0x28);
    TEST(LD, "C,(0FF34H)", 0xE7, 0x34, 0x29);
    TEST(LD, "D,(0FF56H)", 0xE7, 0x56, 0x2A);
    TEST(LD, "E,(0FF78H)", 0xE7, 0x78, 0x2B);
    TEST(LD, "H,(0FF9AH)", 0xE7, 0x9A, 0x2C);
    TEST(LD, "L,(0FFBCH)", 0xE7, 0xBC, 0x2D);
    TEST(LD, "A,(0FFDEH)", 0xE7, 0xDE, 0x2E);

    // LD (n),A
    TEST(LD, "(0FF12H),A", 0x2F, 0x12);

    // LD (gg),r
    TEST(LD, "(BC),B", 0xE8, 0x20);
    TEST(LD, "(BC),C", 0xE8, 0x21);
    TEST(LD, "(BC),D", 0xE8, 0x22);
    TEST(LD, "(BC),E", 0xE8, 0x23);
    TEST(LD, "(BC),H", 0xE8, 0x24);
    TEST(LD, "(BC),L", 0xE8, 0x25);
    TEST(LD, "(BC),A", 0xE8, 0x26);
    TEST(LD, "(DE),B", 0xE9, 0x20);
    TEST(LD, "(DE),C", 0xE9, 0x21);
    TEST(LD, "(DE),D", 0xE9, 0x22);
    TEST(LD, "(DE),E", 0xE9, 0x23);
    TEST(LD, "(DE),H", 0xE9, 0x24);
    TEST(LD, "(DE),L", 0xE9, 0x25);
    TEST(LD, "(DE),A", 0xE9, 0x26);
    TEST(LD, "(HL),B", 0xEA, 0x20);
    TEST(LD, "(HL),C", 0xEA, 0x21);
    TEST(LD, "(HL),D", 0xEA, 0x22);
    TEST(LD, "(HL),E", 0xEA, 0x23);
    TEST(LD, "(HL),H", 0xEA, 0x24);
    TEST(LD, "(HL),L", 0xEA, 0x25);
    TEST(LD, "(HL),A", 0xEA, 0x26);
    TEST(LD, "(IX),B", 0xEC, 0x20);
    TEST(LD, "(IX),C", 0xEC, 0x21);
    TEST(LD, "(IX),D", 0xEC, 0x22);
    TEST(LD, "(IX),E", 0xEC, 0x23);
    TEST(LD, "(IX),H", 0xEC, 0x24);
    TEST(LD, "(IX),L", 0xEC, 0x25);
    TEST(LD, "(IX),A", 0xEC, 0x26);
    TEST(LD, "(IY),B", 0xED, 0x20);
    TEST(LD, "(IY),C", 0xED, 0x21);
    TEST(LD, "(IY),D", 0xED, 0x22);
    TEST(LD, "(IY),E", 0xED, 0x23);
    TEST(LD, "(IY),H", 0xED, 0x24);
    TEST(LD, "(IY),L", 0xED, 0x25);
    TEST(LD, "(IY),A", 0xED, 0x26);
    TEST(LD, "(SP),B", 0xEE, 0x20);
    TEST(LD, "(SP),C", 0xEE, 0x21);
    TEST(LD, "(SP),D", 0xEE, 0x22);
    TEST(LD, "(SP),E", 0xEE, 0x23);
    TEST(LD, "(SP),H", 0xEE, 0x24);
    TEST(LD, "(SP),L", 0xEE, 0x25);
    TEST(LD, "(SP),A", 0xEE, 0x26);

    // LD (ix+d),r
    TEST(LD, "(IX+18),B",  0xF4, 0x12, 0x20);
    TEST(LD, "(IX+34H),C", 0xF4, 0x34, 0x21);
    TEST(LD, "(IX+56H),D", 0xF4, 0x56, 0x22);
    TEST(LD, "(IX+78H),E", 0xF4, 0x78, 0x23);
    TEST(LD, "(IX-66H),H", 0xF4, 0x9A, 0x24);
    TEST(LD, "(IX-44H),L", 0xF4, 0xBC, 0x25);
    TEST(LD, "(IX-22H),A", 0xF4, 0xDE, 0x26);
    TEST(LD, "(IY+18),B",  0xF5, 0x12, 0x20);
    TEST(LD, "(IY+34H),C", 0xF5, 0x34, 0x21);
    TEST(LD, "(IY+56H),D", 0xF5, 0x56, 0x22);
    TEST(LD, "(IY+78H),E", 0xF5, 0x78, 0x23);
    TEST(LD, "(IY-66H),H", 0xF5, 0x9A, 0x24);
    TEST(LD, "(IY-44H),L", 0xF5, 0xBC, 0x25);
    TEST(LD, "(IY-22H),A", 0xF5, 0xDE, 0x26);
    TEST(LD, "(SP+18),B",  0xF6, 0x12, 0x20);
    TEST(LD, "(SP+34H),C", 0xF6, 0x34, 0x21);
    TEST(LD, "(SP+56H),D", 0xF6, 0x56, 0x22);
    TEST(LD, "(SP+78H),E", 0xF6, 0x78, 0x23);
    TEST(LD, "(SP-66H),H", 0xF6, 0x9A, 0x24);
    TEST(LD, "(SP-44H),L", 0xF6, 0xBC, 0x25);
    TEST(LD, "(SP-22H),A", 0xF6, 0xDE, 0x26);

    // LD (HL+A),r
    TEST(LD, "(HL+A),B", 0xF7, 0x20);
    TEST(LD, "(HL+A),C", 0xF7, 0x21);
    TEST(LD, "(HL+A),D", 0xF7, 0x22);
    TEST(LD, "(HL+A),E", 0xF7, 0x23);
    TEST(LD, "(HL+A),H", 0xF7, 0x24);
    TEST(LD, "(HL+A),L", 0xF7, 0x25);
    TEST(LD, "(HL+A),A", 0xF7, 0x26);

    // LD (mn),r
    TEST(LD, "(1234H),B",  0xEB, 0x34, 0x12, 0x20);
    TEST(LD, "(5678H),C",  0xEB, 0x78, 0x56, 0x21);
    TEST(LD, "(9ABCH),D",  0xEB, 0xBC, 0x9A, 0x22);
    TEST(LD, "(0DEF0H),E", 0xEB, 0xF0, 0xDE, 0x23);
    TEST(LD, "(0FEDCH),H", 0xEB, 0xDC, 0xFE, 0x24);
    TEST(LD, "(0BA98H),L", 0xEB, 0x98, 0xBA, 0x25);
    TEST(LD, "(7654H),A",  0xEB, 0x54, 0x76, 0x26);

    // LD (n),r
    TEST(LD, "(0FF12H),B", 0xEF, 0x12, 0x20);
    TEST(LD, "(0FF34H),C", 0xEF, 0x34, 0x21);
    TEST(LD, "(0FF56H),D", 0xEF, 0x56, 0x22);
    TEST(LD, "(0FF78H),E", 0xEF, 0x78, 0x23);
    TEST(LD, "(0FF9AH),H", 0xEF, 0x9A, 0x24);
    TEST(LD, "(0FFBCH),L", 0xEF, 0xBC, 0x25);
    TEST(LD, "(0FFDEH),A", 0xEF, 0xDE, 0x26);

    // LD (gg),n
    TEST(LD, "(BC),18",    0xE8, 0x37, 0x12);
    TEST(LD, "(DE),34H",   0xE9, 0x37, 0x34);
    TEST(LD, "(HL),56H",   0xEA, 0x37, 0x56);
    TEST(LD, "(IX),78H",   0xEC, 0x37, 0x78);
    TEST(LD, "(IY),9AH",   0xED, 0x37, 0x9A);
    TEST(LD, "(SP),0BCH",  0xEE, 0x37, 0xBC);

    // LD (ix+d),n
    TEST(LD, "(IX+18),34H",   0xF4, 0x12, 0x37, 0x34);
    TEST(LD, "(IY+56H),78H",  0xF5, 0x56, 0x37, 0x78);
    TEST(LD, "(SP-66H),0BCH", 0xF6, 0x9A, 0x37, 0xBC);

    // LD (HL+A),n
    TEST(LD, "(HL+A),0DEH", 0xF7, 0x37, 0xDE);

    // LD (vw),n
    TEST(LD, "(1234H),56H", 0xEB, 0x34, 0x12, 0x37, 0x56);

    // LD (w),n
    TEST(LD, "(0FF78H),9AH", 0x37, 0x78, 0x9A);
}

static void test_16bit_transfer() {
    // LD HL,rr
    TEST(LD, "HL,BC", 0x40);
    TEST(LD, "HL,DE", 0x41);
    TEST(LD, "HL,HL", 0x42);
    TEST(LD, "HL,IX", 0x44);
    TEST(LD, "HL,IY", 0x45);
    TEST(LD, "HL,SP", 0x46);

    // LD rr,HL
    TEST(LD, "BC,HL", 0x48);
    TEST(LD, "DE,HL", 0x49);
    TEST(LD, "HL,HL", 0x4A);
    TEST(LD, "IX,HL", 0x4C);
    TEST(LD, "IY,HL", 0x4D);
    TEST(LD, "SP,HL", 0x4E);

    // LD rr,gg
    TEST(LD, "BC,BC", 0xF8, 0x38);
    TEST(LD, "BC,DE", 0xF9, 0x38);
    TEST(LD, "BC,HL", 0xFA, 0x38);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x38);
    TEST(LD, "BC,IX", 0xFC, 0x38);
    TEST(LD, "BC,IY", 0xFD, 0x38);
    TEST(LD, "BC,SP", 0xFE, 0x38);
    TEST(LD, "DE,BC", 0xF8, 0x39);
    TEST(LD, "DE,DE", 0xF9, 0x39);
    TEST(LD, "DE,HL", 0xFA, 0x39);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x39);
    TEST(LD, "DE,IX", 0xFC, 0x39);
    TEST(LD, "DE,IY", 0xFD, 0x39);
    TEST(LD, "DE,SP", 0xFE, 0x39);
    TEST(LD, "HL,BC", 0xF8, 0x3A);
    TEST(LD, "HL,DE", 0xF9, 0x3A);
    TEST(LD, "HL,HL", 0xFA, 0x3A);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x3A);
    TEST(LD, "HL,IX", 0xFC, 0x3A);
    TEST(LD, "HL,IY", 0xFD, 0x3A);
    TEST(LD, "HL,SP", 0xFE, 0x3A);
    TEST(LD, "IX,BC", 0xF8, 0x3C);
    TEST(LD, "IX,DE", 0xF9, 0x3C);
    TEST(LD, "IX,HL", 0xFA, 0x3C);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x3C);
    TEST(LD, "IX,IX", 0xFC, 0x3C);
    TEST(LD, "IX,IY", 0xFD, 0x3C);
    TEST(LD, "IX,SP", 0xFE, 0x3C);
    TEST(LD, "IY,BC", 0xF8, 0x3D);
    TEST(LD, "IY,DE", 0xF9, 0x3D);
    TEST(LD, "IY,HL", 0xFA, 0x3D);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x3D);
    TEST(LD, "IY,IX", 0xFC, 0x3D);
    TEST(LD, "IY,IY", 0xFD, 0x3D);
    TEST(LD, "IY,SP", 0xFE, 0x3D);
    TEST(LD, "SP,BC", 0xF8, 0x3E);
    TEST(LD, "SP,DE", 0xF9, 0x3E);
    TEST(LD, "SP,HL", 0xFA, 0x3E);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x3E);
    TEST(LD, "SP,IX", 0xFC, 0x3E);
    TEST(LD, "SP,IY", 0xFD, 0x3E);
    TEST(LD, "SP,SP", 0xFE, 0x3E);

    // LD rr,mn
    TEST(LD, "BC,1234H",  0x38, 0x34, 0x12);
    TEST(LD, "DE,5678H",  0x39, 0x78, 0x56);
    TEST(LD, "HL,9ABCH",  0x3A, 0xBC, 0x9A);
    TEST(LD, "IX,0DEF0H", 0x3C, 0xF0, 0xDE);
    TEST(LD, "IY,0FEDCH", 0x3D, 0xDC, 0xFE);
    TEST(LD, "SP,0BA98H", 0x3E, 0x98, 0xBA);

    // LD HL,(n)
    TEST(LD, "HL,(0FF12H)", 0x47, 0x12);

    // LD rr,(gg)
    TEST(LD, "BC,(BC)", 0xE0, 0x48);
    TEST(LD, "DE,(BC)", 0xE0, 0x49);
    TEST(LD, "HL,(BC)", 0xE0, 0x4A);
    TEST(LD, "IX,(BC)", 0xE0, 0x4C);
    TEST(LD, "IY,(BC)", 0xE0, 0x4D);
    TEST(LD, "SP,(BC)", 0xE0, 0x4E);
    TEST(LD, "BC,(DE)", 0xE1, 0x48);
    TEST(LD, "DE,(DE)", 0xE1, 0x49);
    TEST(LD, "HL,(DE)", 0xE1, 0x4A);
    TEST(LD, "IX,(DE)", 0xE1, 0x4C);
    TEST(LD, "IY,(DE)", 0xE1, 0x4D);
    TEST(LD, "SP,(DE)", 0xE1, 0x4E);
    TEST(LD, "BC,(HL)", 0xE2, 0x48);
    TEST(LD, "DE,(HL)", 0xE2, 0x49);
    TEST(LD, "HL,(HL)", 0xE2, 0x4A);
    TEST(LD, "IX,(HL)", 0xE2, 0x4C);
    TEST(LD, "IY,(HL)", 0xE2, 0x4D);
    TEST(LD, "SP,(HL)", 0xE2, 0x4E);
    TEST(LD, "BC,(IX)", 0xE4, 0x48);
    TEST(LD, "DE,(IX)", 0xE4, 0x49);
    TEST(LD, "HL,(IX)", 0xE4, 0x4A);
    TEST(LD, "IX,(IX)", 0xE4, 0x4C);
    TEST(LD, "IY,(IX)", 0xE4, 0x4D);
    TEST(LD, "SP,(IX)", 0xE4, 0x4E);
    TEST(LD, "BC,(IY)", 0xE5, 0x48);
    TEST(LD, "DE,(IY)", 0xE5, 0x49);
    TEST(LD, "HL,(IY)", 0xE5, 0x4A);
    TEST(LD, "IX,(IY)", 0xE5, 0x4C);
    TEST(LD, "IY,(IY)", 0xE5, 0x4D);
    TEST(LD, "SP,(IY)", 0xE5, 0x4E);
    TEST(LD, "BC,(SP)", 0xE6, 0x48);
    TEST(LD, "DE,(SP)", 0xE6, 0x49);
    TEST(LD, "HL,(SP)", 0xE6, 0x4A);
    TEST(LD, "IX,(SP)", 0xE6, 0x4C);
    TEST(LD, "IY,(SP)", 0xE6, 0x4D);
    TEST(LD, "SP,(SP)", 0xE6, 0x4E);

    // LD rr,(ix+d)
    TEST(LD, "BC,(IX+18)",  0xF0, 0x12, 0x48);
    TEST(LD, "DE,(IX+34H)", 0xF0, 0x34, 0x49);
    TEST(LD, "HL,(IX+56H)", 0xF0, 0x56, 0x4A);
    TEST(LD, "IX,(IX-66H)", 0xF0, 0x9A, 0x4C);
    TEST(LD, "IY,(IX-44H)", 0xF0, 0xBC, 0x4D);
    TEST(LD, "SP,(IX-22H)", 0xF0, 0xDE, 0x4E);
    TEST(LD, "BC,(IY+18)",  0xF1, 0x12, 0x48);
    TEST(LD, "DE,(IY+34H)", 0xF1, 0x34, 0x49);
    TEST(LD, "HL,(IY+56H)", 0xF1, 0x56, 0x4A);
    TEST(LD, "IX,(IY-66H)", 0xF1, 0x9A, 0x4C);
    TEST(LD, "IY,(IY-44H)", 0xF1, 0xBC, 0x4D);
    TEST(LD, "SP,(IY-22H)", 0xF1, 0xDE, 0x4E);
    TEST(LD, "BC,(SP+18)",  0xF2, 0x12, 0x48);
    TEST(LD, "DE,(SP+34H)", 0xF2, 0x34, 0x49);
    TEST(LD, "HL,(SP+56H)", 0xF2, 0x56, 0x4A);
    TEST(LD, "IX,(SP-66H)", 0xF2, 0x9A, 0x4C);
    TEST(LD, "IY,(SP-44H)", 0xF2, 0xBC, 0x4D);
    TEST(LD, "SP,(SP+18)",  0xF2, 0x12, 0x4E);

    // LD rr,(HL+A)
    TEST(LD, "BC,(HL+A)", 0xF3, 0x48);
    TEST(LD, "DE,(HL+A)", 0xF3, 0x49);
    TEST(LD, "HL,(HL+A)", 0xF3, 0x4A);
    TEST(LD, "IX,(HL+A)", 0xF3, 0x4C);
    TEST(LD, "IY,(HL+A)", 0xF3, 0x4D);
    TEST(LD, "SP,(HL+A)", 0xF3, 0x4E);

    // LD rr,(mn)
    TEST(LD, "BC,(1234H)",  0xE3, 0x34, 0x12, 0x48);
    TEST(LD, "DE,(5678H)",  0xE3, 0x78, 0x56, 0x49);
    TEST(LD, "HL,(9ABCH)",  0xE3, 0xBC, 0x9A, 0x4A);
    TEST(LD, "IX,(0FEDCH)", 0xE3, 0xDC, 0xFE, 0x4C);
    TEST(LD, "IY,(0BA98H)", 0xE3, 0x98, 0xBA, 0x4D);
    TEST(LD, "SP,(7654H)",  0xE3, 0x54, 0x76, 0x4E);

    // LD rr,(n)
    TEST(LD, "BC,(0FF12H)", 0xE7, 0x12, 0x48);
    TEST(LD, "DE,(0FF34H)", 0xE7, 0x34, 0x49);
    TEST(LD, "HL,(0FF56H)", 0xE7, 0x56, 0x4A);
    TEST(LD, "IX,(0FF9AH)", 0xE7, 0x9A, 0x4C);
    TEST(LD, "IY,(0FFBCH)", 0xE7, 0xBC, 0x4D);
    TEST(LD, "SP,(0FFDEH)", 0xE7, 0xDE, 0x4E);

    // LD (n),HL
    TEST(LD, "(0FF12H),HL", 0x4F, 0x12);

    // LD (gg),rr
    TEST(LD, "(BC),BC", 0xE8, 0x40);
    TEST(LD, "(BC),DE", 0xE8, 0x41);
    TEST(LD, "(BC),HL", 0xE8, 0x42);
    TEST(LD, "(BC),IX", 0xE8, 0x44);
    TEST(LD, "(BC),IY", 0xE8, 0x45);
    TEST(LD, "(BC),SP", 0xE8, 0x46);
    TEST(LD, "(DE),BC", 0xE9, 0x40);
    TEST(LD, "(DE),DE", 0xE9, 0x41);
    TEST(LD, "(DE),HL", 0xE9, 0x42);
    TEST(LD, "(DE),IX", 0xE9, 0x44);
    TEST(LD, "(DE),IY", 0xE9, 0x45);
    TEST(LD, "(DE),SP", 0xE9, 0x46);
    TEST(LD, "(HL),BC", 0xEA, 0x40);
    TEST(LD, "(HL),DE", 0xEA, 0x41);
    TEST(LD, "(HL),HL", 0xEA, 0x42);
    TEST(LD, "(HL),IX", 0xEA, 0x44);
    TEST(LD, "(HL),IY", 0xEA, 0x45);
    TEST(LD, "(HL),SP", 0xEA, 0x46);
    TEST(LD, "(IX),BC", 0xEC, 0x40);
    TEST(LD, "(IX),DE", 0xEC, 0x41);
    TEST(LD, "(IX),HL", 0xEC, 0x42);
    TEST(LD, "(IX),IX", 0xEC, 0x44);
    TEST(LD, "(IX),IY", 0xEC, 0x45);
    TEST(LD, "(IX),SP", 0xEC, 0x46);
    TEST(LD, "(IY),BC", 0xED, 0x40);
    TEST(LD, "(IY),DE", 0xED, 0x41);
    TEST(LD, "(IY),HL", 0xED, 0x42);
    TEST(LD, "(IY),IX", 0xED, 0x44);
    TEST(LD, "(IY),IY", 0xED, 0x45);
    TEST(LD, "(IY),SP", 0xED, 0x46);
    TEST(LD, "(SP),BC", 0xEE, 0x40);
    TEST(LD, "(SP),DE", 0xEE, 0x41);
    TEST(LD, "(SP),HL", 0xEE, 0x42);
    TEST(LD, "(SP),IX", 0xEE, 0x44);
    TEST(LD, "(SP),IY", 0xEE, 0x45);
    TEST(LD, "(SP),SP", 0xEE, 0x46);

    // LD (ix+d),r
    TEST(LD, "(IX+18),BC",  0xF4, 0x12, 0x40);
    TEST(LD, "(IX+34H),DE", 0xF4, 0x34, 0x41);
    TEST(LD, "(IX+56H),HL", 0xF4, 0x56, 0x42);
    TEST(LD, "(IX-66H),IX", 0xF4, 0x9A, 0x44);
    TEST(LD, "(IX-44H),IY", 0xF4, 0xBC, 0x45);
    TEST(LD, "(IX-22H),SP", 0xF4, 0xDE, 0x46);
    TEST(LD, "(IY+18),BC",  0xF5, 0x12, 0x40);
    TEST(LD, "(IY+34H),DE", 0xF5, 0x34, 0x41);
    TEST(LD, "(IY+56H),HL", 0xF5, 0x56, 0x42);
    TEST(LD, "(IY-66H),IX", 0xF5, 0x9A, 0x44);
    TEST(LD, "(IY-44H),IY", 0xF5, 0xBC, 0x45);
    TEST(LD, "(IY-22H),SP", 0xF5, 0xDE, 0x46);
    TEST(LD, "(SP+18),BC",  0xF6, 0x12, 0x40);
    TEST(LD, "(SP+34H),DE", 0xF6, 0x34, 0x41);
    TEST(LD, "(SP+56H),HL", 0xF6, 0x56, 0x42);
    TEST(LD, "(SP-66H),IX", 0xF6, 0x9A, 0x44);
    TEST(LD, "(SP-44H),IY", 0xF6, 0xBC, 0x45);
    TEST(LD, "(SP-22H),SP", 0xF6, 0xDE, 0x46);

    // LD (HL+A),rr
    TEST(LD, "(HL+A),BC", 0xF7, 0x40);
    TEST(LD, "(HL+A),DE", 0xF7, 0x41);
    TEST(LD, "(HL+A),HL", 0xF7, 0x42);
    TEST(LD, "(HL+A),IX", 0xF7, 0x44);
    TEST(LD, "(HL+A),IY", 0xF7, 0x45);
    TEST(LD, "(HL+A),SP", 0xF7, 0x46);

    // LD (mn),rr
    TEST(LD, "(1234H),BC",  0xEB, 0x34, 0x12, 0x40);
    TEST(LD, "(5678H),DE",  0xEB, 0x78, 0x56, 0x41);
    TEST(LD, "(9ABCH),HL",  0xEB, 0xBC, 0x9A, 0x42);
    TEST(LD, "(0FEDCH),IX", 0xEB, 0xDC, 0xFE, 0x44);
    TEST(LD, "(0BA98H),IY", 0xEB, 0x98, 0xBA, 0x45);
    TEST(LD, "(7654H),SP",  0xEB, 0x54, 0x76, 0x46);

    // LD (n),rr
    TEST(LD, "(0FF12H),BC", 0xEF, 0x12, 0x40);
    TEST(LD, "(0FF34H),DE", 0xEF, 0x34, 0x41);
    TEST(LD, "(0FF56H),HL", 0xEF, 0x56, 0x42);
    TEST(LD, "(0FF9AH),IX", 0xEF, 0x9A, 0x44);
    TEST(LD, "(0FFBCH),IY", 0xEF, 0xBC, 0x45);
    TEST(LD, "(0FFDEH),SP", 0xEF, 0xDE, 0x46);

    // LDW (gg),mn
    TEST(LDW, "(BC),1234H",   0xE8, 0x3F, 0x34, 0x12);
    TEST(LDW, "(DE),5678H",   0xE9, 0x3F, 0x78, 0x56);
    TEST(LDW, "(HL),9ABCH",   0xEA, 0x3F, 0xBC, 0x9A);
    TEST(LDW, "(IX),0DEF0H",  0xEC, 0x3F, 0xF0, 0xDE);
    TEST(LDW, "(IY),0FEDCH",  0xED, 0x3F, 0xDC, 0xFE);
    TEST(LDW, "(SP),0BA98H",  0xEE, 0x3F, 0x98, 0xBA);

    // LDW (ix+d),mn
    TEST(LDW, "(IX+18),3456H",   0xF4, 0x12, 0x3F, 0x56, 0x34);
    TEST(LDW, "(IY+78H),9ABCH",  0xF5, 0x78, 0x3F, 0xBC, 0x9A);
    TEST(LDW, "(SP-22H),0F012H", 0xF6, 0xDE, 0x3F, 0x12, 0xF0);

    // LDW (HL+A),mn
    TEST(LDW, "(HL+A),1234H", 0xF7, 0x3F, 0x34, 0x12);

    // LDW (vw),mn
    TEST(LDW, "(1234H),5678H", 0xEB, 0x34, 0x12, 0x3F, 0x78, 0x56);

    // LDW (w),mn
    TEST(LDW, "(0FF78H),9ABCH", 0x3F, 0x78, 0xBC, 0x9A);

    // PUSH qq
    TEST(PUSH, "BC", 0x50);
    TEST(PUSH, "DE", 0x51);
    TEST(PUSH, "HL", 0x52);
    TEST(PUSH, "IX", 0x54);
    TEST(PUSH, "IY", 0x55);
    TEST(PUSH, "AF", 0x56);

    // POP qq
    TEST(POP, "BC", 0x58);
    TEST(POP, "DE", 0x59);
    TEST(POP, "HL", 0x5A);
    TEST(POP, "IX", 0x5C);
    TEST(POP, "IY", 0x5D);
    TEST(POP, "AF", 0x5E);

    // LDA rr,(ix+d)
    TEST(LDA, "BC,(IX+18)", 0xF4, 0x12, 0x38);
    TEST(LDA, "DE,(IX+18)", 0xF4, 0x12, 0x39);
    TEST(LDA, "HL,(IX+18)", 0xF4, 0x12, 0x3A);
    TEST(LDA, "IX,(IX+18)", 0xF4, 0x12, 0x3C);
    TEST(LDA, "IY,(IX+18)", 0xF4, 0x12, 0x3D);
    TEST(LDA, "SP,(IX+18)", 0xF4, 0x12, 0x3E);
    TEST(LDA, "BC,(IY-18)", 0xF5, 0xEE, 0x38);
    TEST(LDA, "DE,(IY-18)", 0xF5, 0xEE, 0x39);
    TEST(LDA, "HL,(IY-18)", 0xF5, 0xEE, 0x3A);
    TEST(LDA, "IX,(IY-18)", 0xF5, 0xEE, 0x3C);
    TEST(LDA, "IY,(IY-18)", 0xF5, 0xEE, 0x3D);
    TEST(LDA, "SP,(IY-18)", 0xF5, 0xEE, 0x3E);
    TEST(LDA, "BC,(SP+18)", 0xF6, 0x12, 0x38);
    TEST(LDA, "DE,(SP+18)", 0xF6, 0x12, 0x39);
    TEST(LDA, "HL,(SP+18)", 0xF6, 0x12, 0x3A);
    TEST(LDA, "IX,(SP+18)", 0xF6, 0x12, 0x3C);
    TEST(LDA, "IY,(SP+18)", 0xF6, 0x12, 0x3D);
    TEST(LDA, "SP,(SP+18)", 0xF6, 0x12, 0x3E);

    // LDA rr,HL+A
    TEST(LDA, "BC,(HL+A)", 0xF7, 0x38);
    TEST(LDA, "DE,(HL+A)", 0xF7, 0x39);
    TEST(LDA, "HL,(HL+A)", 0xF7, 0x3A);
    TEST(LDA, "IX,(HL+A)", 0xF7, 0x3C);
    TEST(LDA, "IY,(HL+A)", 0xF7, 0x3D);
    TEST(LDA, "SP,(HL+A)", 0xF7, 0x3E);

    // LDA rr,(gg)
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xE8, 0x38);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xE9, 0x39);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xEA, 0x3A);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xEC, 0x3C);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xED, 0x3D);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xED, 0x3E);

    // LDAR HL,nm
    ATEST(0x1000, LDAR, "HL,1003H", 0x17, 0x01, 0x00);
    ATEST(0x1000, LDAR, "HL,1000H", 0x17, 0xFE, 0xFF);
    ATEST(0x9000, LDAR, "HL,1002H", 0x17, 0x00, 0x80);
    ATEST(0x1000, LDAR, "HL,9001H", 0x17, 0xFF, 0x7F);
}

static void test_exchange() {
    TEST(EX, "DE,HL",  0x08);
    TEST(EX, "AF,AF'", 0x09);
    TEST(EXX, "",      0x0A);

    // EX (gg),rr
    TEST(EX, "(BC),BC", 0xE0, 0x50);
    TEST(EX, "(BC),DE", 0xE0, 0x51);
    TEST(EX, "(BC),HL", 0xE0, 0x52);
    TEST(EX, "(BC),IX", 0xE0, 0x54);
    TEST(EX, "(BC),IY", 0xE0, 0x55);
    TEST(EX, "(BC),SP", 0xE0, 0x56);
    TEST(EX, "(DE),BC", 0xE1, 0x50);
    TEST(EX, "(DE),DE", 0xE1, 0x51);
    TEST(EX, "(DE),HL", 0xE1, 0x52);
    TEST(EX, "(DE),IX", 0xE1, 0x54);
    TEST(EX, "(DE),IY", 0xE1, 0x55);
    TEST(EX, "(DE),SP", 0xE1, 0x56);
    TEST(EX, "(HL),BC", 0xE2, 0x50);
    TEST(EX, "(HL),DE", 0xE2, 0x51);
    TEST(EX, "(HL),HL", 0xE2, 0x52);
    TEST(EX, "(HL),IX", 0xE2, 0x54);
    TEST(EX, "(HL),IY", 0xE2, 0x55);
    TEST(EX, "(HL),SP", 0xE2, 0x56);
    TEST(EX, "(IX),BC", 0xE4, 0x50);
    TEST(EX, "(IX),DE", 0xE4, 0x51);
    TEST(EX, "(IX),HL", 0xE4, 0x52);
    TEST(EX, "(IX),IX", 0xE4, 0x54);
    TEST(EX, "(IX),IY", 0xE4, 0x55);
    TEST(EX, "(IX),SP", 0xE4, 0x56);
    TEST(EX, "(IY),BC", 0xE5, 0x50);
    TEST(EX, "(IY),DE", 0xE5, 0x51);
    TEST(EX, "(IY),HL", 0xE5, 0x52);
    TEST(EX, "(IY),IX", 0xE5, 0x54);
    TEST(EX, "(IY),IY", 0xE5, 0x55);
    TEST(EX, "(IY),SP", 0xE5, 0x56);
    TEST(EX, "(SP),BC", 0xE6, 0x50);
    TEST(EX, "(SP),DE", 0xE6, 0x51);
    TEST(EX, "(SP),HL", 0xE6, 0x52);
    TEST(EX, "(SP),IX", 0xE6, 0x54);
    TEST(EX, "(SP),IY", 0xE6, 0x55);
    TEST(EX, "(SP),SP", 0xE6, 0x56);

    // EX (ix+d),rr
    TEST(EX, "(IX+18),BC",  0xF0, 0x12, 0x50);
    TEST(EX, "(IX+34H),DE", 0xF0, 0x34, 0x51);
    TEST(EX, "(IX+56H),HL", 0xF0, 0x56, 0x52);
    TEST(EX, "(IX-66H),IX", 0xF0, 0x9A, 0x54);
    TEST(EX, "(IX-44H),IY", 0xF0, 0xBC, 0x55);
    TEST(EX, "(IX-22H),SP", 0xF0, 0xDE, 0x56);
    TEST(EX, "(IY+18),BC",  0xF1, 0x12, 0x50);
    TEST(EX, "(IY+34H),DE", 0xF1, 0x34, 0x51);
    TEST(EX, "(IY+56H),HL", 0xF1, 0x56, 0x52);
    TEST(EX, "(IY-66H),IX", 0xF1, 0x9A, 0x54);
    TEST(EX, "(IY-44H),IY", 0xF1, 0xBC, 0x55);
    TEST(EX, "(IY-22H),SP", 0xF1, 0xDE, 0x56);
    TEST(EX, "(SP+18),BC",  0xF2, 0x12, 0x50);
    TEST(EX, "(SP+34H),DE", 0xF2, 0x34, 0x51);
    TEST(EX, "(SP+56H),HL", 0xF2, 0x56, 0x52);
    TEST(EX, "(SP-66H),IX", 0xF2, 0x9A, 0x54);
    TEST(EX, "(SP-44H),IY", 0xF2, 0xBC, 0x55);
    TEST(EX, "(SP-22H),SP", 0xF2, 0xDE, 0x56);

    // EX (HL+A),rr
    TEST(EX, "(HL+A),BC", 0xF3, 0x50);
    TEST(EX, "(HL+A),DE", 0xF3, 0x51);
    TEST(EX, "(HL+A),HL", 0xF3, 0x52);
    TEST(EX, "(HL+A),IX", 0xF3, 0x54);
    TEST(EX, "(HL+A),IY", 0xF3, 0x55);
    TEST(EX, "(HL+A),SP", 0xF3, 0x56);

    // EX (mn),rr
    TEST(EX, "(1234H),BC",  0xE3, 0x34, 0x12, 0x50);
    TEST(EX, "(5678H),DE",  0xE3, 0x78, 0x56, 0x51);
    TEST(EX, "(9ABCH),HL",  0xE3, 0xBC, 0x9A, 0x52);
    TEST(EX, "(0DEF0H),IX", 0xE3, 0xF0, 0xDE, 0x54);
    TEST(EX, "(0FEDCH),IY", 0xE3, 0xDC, 0xFE, 0x55);
    TEST(EX, "(0BA98H),SP", 0xE3, 0x98, 0xBA, 0x56);

    // EX (n),rr
    TEST(EX, "(0FF12H),BC",  0xE7, 0x12, 0x50);
    TEST(EX, "(0FF34H),DE",  0xE7, 0x34, 0x51);
    TEST(EX, "(0FF56H),HL",  0xE7, 0x56, 0x52);
    TEST(EX, "(0FF78H),IX",  0xE7, 0x78, 0x54);
    TEST(EX, "(0FF9AH),IY",  0xE7, 0x9A, 0x55);
    TEST(EX, "(0FFBCH),SP",  0xE7, 0xBC, 0x56);
}

static void test_block() {
    TEST(LDI,  "", 0xFE, 0x58);
    TEST(LDIR, "", 0xFE, 0x59);
    TEST(LDD,  "", 0xFE, 0x5A);
    TEST(LDDR, "", 0xFE, 0x5B);
    TEST(CPI,  "", 0xFE, 0x5C);
    TEST(CPIR, "", 0xFE, 0x5D);
    TEST(CPD,  "", 0xFE, 0x5E);
    TEST(CPDR, "", 0xFE, 0x5F);
}

static void test_8bit_arithmetic() {
    TEST(DAA, "A", 0x0B);
    TEST(CPL, "A", 0x10);
    TEST(NEG, "A", 0x11);

    TEST(ADD, "A,B", 0xF8, 0x60);
    TEST(ADD, "A,C", 0xF9, 0x60);
    TEST(ADD, "A,D", 0xFA, 0x60);
    TEST(ADD, "A,E", 0xFB, 0x60);
    TEST(ADD, "A,H", 0xFC, 0x60);
    TEST(ADD, "A,L", 0xFD, 0x60);
    TEST(ADD, "A,A", 0xFE, 0x60);
    TEST(ADD, "A,(0FF12H)", 0x60, 0x12);
    TEST(ADD, "A,(BC)", 0xE0, 0x60);
    TEST(ADD, "A,(DE)", 0xE1, 0x60);
    TEST(ADD, "A,(HL)", 0xE2, 0x60);
    TEST(ADD, "A,(IX)", 0xE4, 0x60);
    TEST(ADD, "A,(IY)", 0xE5, 0x60);
    TEST(ADD, "A,(SP)", 0xE6, 0x60);
    TEST(ADD, "A,(1234H)",  0xE3, 0x34, 0x12, 0x60);
    TEST(ADD, "A,(IX+18)",  0xF0, 0x12, 0x60);
    TEST(ADD, "A,(IY-16)",  0xF1, 0xF0, 0x60);
    TEST(ADD, "A,(SP+34H)", 0xF2, 0x34, 0x60);
    TEST(ADD, "A,(HL+A)",   0xF3, 0x60);
    TEST(ADD, "A,18",   0x68, 0x12);
    TEST(ADD, "B,18",   0xF8, 0x68, 0x12);
    TEST(ADD, "C,34H",  0xF9, 0x68, 0x34);
    TEST(ADD, "D,56H",  0xFA, 0x68, 0x56);
    TEST(ADD, "E,78H",  0xFB, 0x68, 0x78);
    TEST(ADD, "H,9AH",  0xFC, 0x68, 0x9A);
    TEST(ADD, "L,0BCH", 0xFD, 0x68, 0xBC);
    TEST(ADD, "A,0DEH", 0xFE, 0x68, 0xDE);
    TEST(ADD, "(BC),18",    0xE8, 0x68, 0x12);
    TEST(ADD, "(DE),34H",   0xE9, 0x68, 0x34);
    TEST(ADD, "(HL),56H",   0xEA, 0x68, 0x56);
    TEST(ADD, "(IX),78H",   0xEC, 0x68, 0x78);
    TEST(ADD, "(IY),9AH",   0xED, 0x68, 0x9A);
    TEST(ADD, "(SP),0BCH",  0xEE, 0x68, 0xBC);
    TEST(ADD, "(IX+18),34H",  0xF4, 0x12, 0x68, 0x34);
    TEST(ADD, "(IY+56H),78H", 0xF5, 0x56, 0x68, 0x78);
    TEST(ADD, "(SP-16),0BCH", 0xF6, 0xF0, 0x68, 0xBC);
    TEST(ADD, "(HL+A),18",    0xF7, 0x68, 0x12);
    TEST(ADD, "(1234H),56H",  0xEB, 0x34, 0x12, 0x68, 0x56);
    TEST(ADD, "(0FF34H),56H", 0xEF, 0x34, 0x68, 0x56);

    TEST(ADC, "A,B", 0xF8, 0x61);
    TEST(ADC, "A,C", 0xF9, 0x61);
    TEST(ADC, "A,D", 0xFA, 0x61);
    TEST(ADC, "A,E", 0xFB, 0x61);
    TEST(ADC, "A,H", 0xFC, 0x61);
    TEST(ADC, "A,L", 0xFD, 0x61);
    TEST(ADC, "A,A", 0xFE, 0x61);
    TEST(ADC, "A,(0FF12H)", 0x61, 0x12);
    TEST(ADC, "A,(BC)", 0xE0, 0x61);
    TEST(ADC, "A,(DE)", 0xE1, 0x61);
    TEST(ADC, "A,(HL)", 0xE2, 0x61);
    TEST(ADC, "A,(IX)", 0xE4, 0x61);
    TEST(ADC, "A,(IY)", 0xE5, 0x61);
    TEST(ADC, "A,(SP)", 0xE6, 0x61);
    TEST(ADC, "A,(1234H)",  0xE3, 0x34, 0x12, 0x61);
    TEST(ADC, "A,(IX+18)",  0xF0, 0x12, 0x61);
    TEST(ADC, "A,(IY-16)",  0xF1, 0xF0, 0x61);
    TEST(ADC, "A,(SP+34H)", 0xF2, 0x34, 0x61);
    TEST(ADC, "A,(HL+A)",   0xF3, 0x61);
    TEST(ADC, "A,18",   0x69, 0x12);
    TEST(ADC, "B,18",   0xF8, 0x69, 0x12);
    TEST(ADC, "C,34H",  0xF9, 0x69, 0x34);
    TEST(ADC, "D,56H",  0xFA, 0x69, 0x56);
    TEST(ADC, "E,78H",  0xFB, 0x69, 0x78);
    TEST(ADC, "H,9AH",  0xFC, 0x69, 0x9A);
    TEST(ADC, "L,0BCH", 0xFD, 0x69, 0xBC);
    TEST(ADC, "A,0DEH", 0xFE, 0x69, 0xDE);
    TEST(ADC, "(BC),18",    0xE8, 0x69, 0x12);
    TEST(ADC, "(DE),34H",   0xE9, 0x69, 0x34);
    TEST(ADC, "(HL),56H",   0xEA, 0x69, 0x56);
    TEST(ADC, "(IX),78H",   0xEC, 0x69, 0x78);
    TEST(ADC, "(IY),9AH",   0xED, 0x69, 0x9A);
    TEST(ADC, "(SP),0BCH",  0xEE, 0x69, 0xBC);
    TEST(ADC, "(IX+18),34H",  0xF4, 0x12, 0x69, 0x34);
    TEST(ADC, "(IY+56H),78H", 0xF5, 0x56, 0x69, 0x78);
    TEST(ADC, "(SP-16),0BCH", 0xF6, 0xF0, 0x69, 0xBC);
    TEST(ADC, "(HL+A),18",    0xF7, 0x69, 0x12);
    TEST(ADC, "(1234H),56H",  0xEB, 0x34, 0x12, 0x69, 0x56);
    TEST(ADC, "(0FF34H),56H", 0xEF, 0x34, 0x69, 0x56);

    TEST(SUB, "A,B", 0xF8, 0x62);
    TEST(SUB, "A,C", 0xF9, 0x62);
    TEST(SUB, "A,D", 0xFA, 0x62);
    TEST(SUB, "A,E", 0xFB, 0x62);
    TEST(SUB, "A,H", 0xFC, 0x62);
    TEST(SUB, "A,L", 0xFD, 0x62);
    TEST(SUB, "A,A", 0xFE, 0x62);
    TEST(SUB, "A,(0FF12H)", 0x62, 0x12);
    TEST(SUB, "A,(BC)", 0xE0, 0x62);
    TEST(SUB, "A,(DE)", 0xE1, 0x62);
    TEST(SUB, "A,(HL)", 0xE2, 0x62);
    TEST(SUB, "A,(IX)", 0xE4, 0x62);
    TEST(SUB, "A,(IY)", 0xE5, 0x62);
    TEST(SUB, "A,(SP)", 0xE6, 0x62);
    TEST(SUB, "A,(1234H)",  0xE3, 0x34, 0x12, 0x62);
    TEST(SUB, "A,(IX+18)",  0xF0, 0x12, 0x62);
    TEST(SUB, "A,(IY-16)",  0xF1, 0xF0, 0x62);
    TEST(SUB, "A,(SP+34H)", 0xF2, 0x34, 0x62);
    TEST(SUB, "A,(HL+A)",   0xF3, 0x62);
    TEST(SUB, "A,18",   0x6A, 0x12);
    TEST(SUB, "B,18",   0xF8, 0x6A, 0x12);
    TEST(SUB, "C,34H",  0xF9, 0x6A, 0x34);
    TEST(SUB, "D,56H",  0xFA, 0x6A, 0x56);
    TEST(SUB, "E,78H",  0xFB, 0x6A, 0x78);
    TEST(SUB, "H,9AH",  0xFC, 0x6A, 0x9A);
    TEST(SUB, "L,0BCH", 0xFD, 0x6A, 0xBC);
    TEST(SUB, "A,0DEH", 0xFE, 0x6A, 0xDE);
    TEST(SUB, "(BC),18",    0xE8, 0x6A, 0x12);
    TEST(SUB, "(DE),34H",   0xE9, 0x6A, 0x34);
    TEST(SUB, "(HL),56H",   0xEA, 0x6A, 0x56);
    TEST(SUB, "(IX),78H",   0xEC, 0x6A, 0x78);
    TEST(SUB, "(IY),9AH",   0xED, 0x6A, 0x9A);
    TEST(SUB, "(SP),0BCH",  0xEE, 0x6A, 0xBC);
    TEST(SUB, "(IX+18),34H",  0xF4, 0x12, 0x6A, 0x34);
    TEST(SUB, "(IY+56H),78H", 0xF5, 0x56, 0x6A, 0x78);
    TEST(SUB, "(SP-16),0BCH", 0xF6, 0xF0, 0x6A, 0xBC);
    TEST(SUB, "(HL+A),18",    0xF7, 0x6A, 0x12);
    TEST(SUB, "(1234H),56H",  0xEB, 0x34, 0x12, 0x6A, 0x56);
    TEST(SUB, "(0FF34H),56H", 0xEF, 0x34, 0x6A, 0x56);

    TEST(SBC, "A,B", 0xF8, 0x63);
    TEST(SBC, "A,C", 0xF9, 0x63);
    TEST(SBC, "A,D", 0xFA, 0x63);
    TEST(SBC, "A,E", 0xFB, 0x63);
    TEST(SBC, "A,H", 0xFC, 0x63);
    TEST(SBC, "A,L", 0xFD, 0x63);
    TEST(SBC, "A,A", 0xFE, 0x63);
    TEST(SBC, "A,(0FF12H)", 0x63, 0x12);
    TEST(SBC, "A,(BC)", 0xE0, 0x63);
    TEST(SBC, "A,(DE)", 0xE1, 0x63);
    TEST(SBC, "A,(HL)", 0xE2, 0x63);
    TEST(SBC, "A,(IX)", 0xE4, 0x63);
    TEST(SBC, "A,(IY)", 0xE5, 0x63);
    TEST(SBC, "A,(SP)", 0xE6, 0x63);
    TEST(SBC, "A,(1234H)",  0xE3, 0x34, 0x12, 0x63);
    TEST(SBC, "A,(IX+18)",  0xF0, 0x12, 0x63);
    TEST(SBC, "A,(IY-16)",  0xF1, 0xF0, 0x63);
    TEST(SBC, "A,(SP+34H)", 0xF2, 0x34, 0x63);
    TEST(SBC, "A,(HL+A)",   0xF3, 0x63);
    TEST(SBC, "A,18",   0x6B, 0x12);
    TEST(SBC, "B,18",   0xF8, 0x6B, 0x12);
    TEST(SBC, "C,34H",  0xF9, 0x6B, 0x34);
    TEST(SBC, "D,56H",  0xFA, 0x6B, 0x56);
    TEST(SBC, "E,78H",  0xFB, 0x6B, 0x78);
    TEST(SBC, "H,9AH",  0xFC, 0x6B, 0x9A);
    TEST(SBC, "L,0BCH", 0xFD, 0x6B, 0xBC);
    TEST(SBC, "A,0DEH", 0xFE, 0x6B, 0xDE);
    TEST(SBC, "(BC),18",    0xE8, 0x6B, 0x12);
    TEST(SBC, "(DE),34H",   0xE9, 0x6B, 0x34);
    TEST(SBC, "(HL),56H",   0xEA, 0x6B, 0x56);
    TEST(SBC, "(IX),78H",   0xEC, 0x6B, 0x78);
    TEST(SBC, "(IY),9AH",   0xED, 0x6B, 0x9A);
    TEST(SBC, "(SP),0BCH",  0xEE, 0x6B, 0xBC);
    TEST(SBC, "(IX+18),34H",  0xF4, 0x12, 0x6B, 0x34);
    TEST(SBC, "(IY+56H),78H", 0xF5, 0x56, 0x6B, 0x78);
    TEST(SBC, "(SP-16),0BCH", 0xF6, 0xF0, 0x6B, 0xBC);
    TEST(SBC, "(HL+A),18",    0xF7, 0x6B, 0x12);
    TEST(SBC, "(1234H),56H",  0xEB, 0x34, 0x12, 0x6B, 0x56);
    TEST(SBC, "(0FF34H),56H", 0xEF, 0x34, 0x6B, 0x56);

    TEST(AND, "A,B", 0xF8, 0x64);
    TEST(AND, "A,C", 0xF9, 0x64);
    TEST(AND, "A,D", 0xFA, 0x64);
    TEST(AND, "A,E", 0xFB, 0x64);
    TEST(AND, "A,H", 0xFC, 0x64);
    TEST(AND, "A,L", 0xFD, 0x64);
    TEST(AND, "A,A", 0xFE, 0x64);
    TEST(AND, "A,(0FF12H)", 0x64, 0x12);
    TEST(AND, "A,(BC)", 0xE0, 0x64);
    TEST(AND, "A,(DE)", 0xE1, 0x64);
    TEST(AND, "A,(HL)", 0xE2, 0x64);
    TEST(AND, "A,(IX)", 0xE4, 0x64);
    TEST(AND, "A,(IY)", 0xE5, 0x64);
    TEST(AND, "A,(SP)", 0xE6, 0x64);
    TEST(AND, "A,(1234H)",  0xE3, 0x34, 0x12, 0x64);
    TEST(AND, "A,(IX+18)",  0xF0, 0x12, 0x64);
    TEST(AND, "A,(IY-16)",  0xF1, 0xF0, 0x64);
    TEST(AND, "A,(SP+34H)", 0xF2, 0x34, 0x64);
    TEST(AND, "A,(HL+A)",   0xF3, 0x64);
    TEST(AND, "A,18",   0x6C, 0x12);
    TEST(AND, "B,18",   0xF8, 0x6C, 0x12);
    TEST(AND, "C,34H",  0xF9, 0x6C, 0x34);
    TEST(AND, "D,56H",  0xFA, 0x6C, 0x56);
    TEST(AND, "E,78H",  0xFB, 0x6C, 0x78);
    TEST(AND, "H,9AH",  0xFC, 0x6C, 0x9A);
    TEST(AND, "L,0BCH", 0xFD, 0x6C, 0xBC);
    TEST(AND, "A,0DEH", 0xFE, 0x6C, 0xDE);
    TEST(AND, "(BC),18",    0xE8, 0x6C, 0x12);
    TEST(AND, "(DE),34H",   0xE9, 0x6C, 0x34);
    TEST(AND, "(HL),56H",   0xEA, 0x6C, 0x56);
    TEST(AND, "(IX),78H",   0xEC, 0x6C, 0x78);
    TEST(AND, "(IY),9AH",   0xED, 0x6C, 0x9A);
    TEST(AND, "(SP),0BCH",  0xEE, 0x6C, 0xBC);
    TEST(AND, "(IX+18),34H",  0xF4, 0x12, 0x6C, 0x34);
    TEST(AND, "(IY+56H),78H", 0xF5, 0x56, 0x6C, 0x78);
    TEST(AND, "(SP-16),0BCH", 0xF6, 0xF0, 0x6C, 0xBC);
    TEST(AND, "(HL+A),18",    0xF7, 0x6C, 0x12);
    TEST(AND, "(1234H),56H",  0xEB, 0x34, 0x12, 0x6C, 0x56);
    TEST(AND, "(0FF34H),56H", 0xEF, 0x34, 0x6C, 0x56);

    TEST(OR, "A,B", 0xF8, 0x66);
    TEST(OR, "A,C", 0xF9, 0x66);
    TEST(OR, "A,D", 0xFA, 0x66);
    TEST(OR, "A,E", 0xFB, 0x66);
    TEST(OR, "A,H", 0xFC, 0x66);
    TEST(OR, "A,L", 0xFD, 0x66);
    TEST(OR, "A,A", 0xFE, 0x66);
    TEST(OR, "A,(0FF12H)", 0x66, 0x12);
    TEST(OR, "A,(BC)", 0xE0, 0x66);
    TEST(OR, "A,(DE)", 0xE1, 0x66);
    TEST(OR, "A,(HL)", 0xE2, 0x66);
    TEST(OR, "A,(IX)", 0xE4, 0x66);
    TEST(OR, "A,(IY)", 0xE5, 0x66);
    TEST(OR, "A,(SP)", 0xE6, 0x66);
    TEST(OR, "A,(1234H)",  0xE3, 0x34, 0x12, 0x66);
    TEST(OR, "A,(IX+18)",  0xF0, 0x12, 0x66);
    TEST(OR, "A,(IY-16)",  0xF1, 0xF0, 0x66);
    TEST(OR, "A,(SP+34H)", 0xF2, 0x34, 0x66);
    TEST(OR, "A,(HL+A)",   0xF3, 0x66);
    TEST(OR, "A,18",   0x6E, 0x12);
    TEST(OR, "B,18",   0xF8, 0x6E, 0x12);
    TEST(OR, "C,34H",  0xF9, 0x6E, 0x34);
    TEST(OR, "D,56H",  0xFA, 0x6E, 0x56);
    TEST(OR, "E,78H",  0xFB, 0x6E, 0x78);
    TEST(OR, "H,9AH",  0xFC, 0x6E, 0x9A);
    TEST(OR, "L,0BCH", 0xFD, 0x6E, 0xBC);
    TEST(OR, "A,0DEH", 0xFE, 0x6E, 0xDE);
    TEST(OR, "(BC),18",    0xE8, 0x6E, 0x12);
    TEST(OR, "(DE),34H",   0xE9, 0x6E, 0x34);
    TEST(OR, "(HL),56H",   0xEA, 0x6E, 0x56);
    TEST(OR, "(IX),78H",   0xEC, 0x6E, 0x78);
    TEST(OR, "(IY),9AH",   0xED, 0x6E, 0x9A);
    TEST(OR, "(SP),0BCH",  0xEE, 0x6E, 0xBC);
    TEST(OR, "(IX+18),34H",  0xF4, 0x12, 0x6E, 0x34);
    TEST(OR, "(IY+56H),78H", 0xF5, 0x56, 0x6E, 0x78);
    TEST(OR, "(SP-16),0BCH", 0xF6, 0xF0, 0x6E, 0xBC);
    TEST(OR, "(HL+A),18",    0xF7, 0x6E, 0x12);
    TEST(OR, "(1234H),56H",  0xEB, 0x34, 0x12, 0x6E, 0x56);
    TEST(OR, "(0FF34H),56H", 0xEF, 0x34, 0x6E, 0x56);

    TEST(XOR, "A,B", 0xF8, 0x65);
    TEST(XOR, "A,C", 0xF9, 0x65);
    TEST(XOR, "A,D", 0xFA, 0x65);
    TEST(XOR, "A,E", 0xFB, 0x65);
    TEST(XOR, "A,H", 0xFC, 0x65);
    TEST(XOR, "A,L", 0xFD, 0x65);
    TEST(XOR, "A,A", 0xFE, 0x65);
    TEST(XOR, "A,(0FF12H)", 0x65, 0x12);
    TEST(XOR, "A,(BC)", 0xE0, 0x65);
    TEST(XOR, "A,(DE)", 0xE1, 0x65);
    TEST(XOR, "A,(HL)", 0xE2, 0x65);
    TEST(XOR, "A,(IX)", 0xE4, 0x65);
    TEST(XOR, "A,(IY)", 0xE5, 0x65);
    TEST(XOR, "A,(SP)", 0xE6, 0x65);
    TEST(XOR, "A,(1234H)",  0xE3, 0x34, 0x12, 0x65);
    TEST(XOR, "A,(IX+18)",  0xF0, 0x12, 0x65);
    TEST(XOR, "A,(IY-16)",  0xF1, 0xF0, 0x65);
    TEST(XOR, "A,(SP+34H)", 0xF2, 0x34, 0x65);
    TEST(XOR, "A,(HL+A)",   0xF3, 0x65);
    TEST(XOR, "A,18",   0x6D, 0x12);
    TEST(XOR, "B,18",   0xF8, 0x6D, 0x12);
    TEST(XOR, "C,34H",  0xF9, 0x6D, 0x34);
    TEST(XOR, "D,56H",  0xFA, 0x6D, 0x56);
    TEST(XOR, "E,78H",  0xFB, 0x6D, 0x78);
    TEST(XOR, "H,9AH",  0xFC, 0x6D, 0x9A);
    TEST(XOR, "L,0BCH", 0xFD, 0x6D, 0xBC);
    TEST(XOR, "A,0DEH", 0xFE, 0x6D, 0xDE);
    TEST(XOR, "(BC),18",    0xE8, 0x6D, 0x12);
    TEST(XOR, "(DE),34H",   0xE9, 0x6D, 0x34);
    TEST(XOR, "(HL),56H",   0xEA, 0x6D, 0x56);
    TEST(XOR, "(IX),78H",   0xEC, 0x6D, 0x78);
    TEST(XOR, "(IY),9AH",   0xED, 0x6D, 0x9A);
    TEST(XOR, "(SP),0BCH",  0xEE, 0x6D, 0xBC);
    TEST(XOR, "(IX+18),34H",  0xF4, 0x12, 0x6D, 0x34);
    TEST(XOR, "(IY+56H),78H", 0xF5, 0x56, 0x6D, 0x78);
    TEST(XOR, "(SP-16),0BCH", 0xF6, 0xF0, 0x6D, 0xBC);
    TEST(XOR, "(HL+A),18",    0xF7, 0x6D, 0x12);
    TEST(XOR, "(1234H),56H",  0xEB, 0x34, 0x12, 0x6D, 0x56);
    TEST(XOR, "(0FF34H),56H", 0xEF, 0x34, 0x6D, 0x56);

    TEST(CP, "A,B", 0xF8, 0x67);
    TEST(CP, "A,C", 0xF9, 0x67);
    TEST(CP, "A,D", 0xFA, 0x67);
    TEST(CP, "A,E", 0xFB, 0x67);
    TEST(CP, "A,H", 0xFC, 0x67);
    TEST(CP, "A,L", 0xFD, 0x67);
    TEST(CP, "A,A", 0xFE, 0x67);
    TEST(CP, "A,18",   0x6F, 0x12);
    TEST(CP, "A,(BC)", 0xE0, 0x67);
    TEST(CP, "A,(DE)", 0xE1, 0x67);
    TEST(CP, "A,(HL)", 0xE2, 0x67);
    TEST(CP, "A,(IX)", 0xE4, 0x67);
    TEST(CP, "A,(IY)", 0xE5, 0x67);
    TEST(CP, "A,(SP)", 0xE6, 0x67);
    TEST(CP, "A,(1234H)",  0xE3, 0x34, 0x12, 0x67);
    TEST(CP, "A,(IX+18)",  0xF0, 0x12, 0x67);
    TEST(CP, "A,(IY-16)",  0xF1, 0xF0, 0x67);
    TEST(CP, "A,(SP+34H)", 0xF2, 0x34, 0x67);
    TEST(CP, "A,(HL+A)",   0xF3, 0x67);
    TEST(CP, "A,(0FF12H)", 0x67, 0x12);
    TEST(CP, "B,18",   0xF8, 0x6F, 0x12);
    TEST(CP, "C,34H",  0xF9, 0x6F, 0x34);
    TEST(CP, "D,56H",  0xFA, 0x6F, 0x56);
    TEST(CP, "E,78H",  0xFB, 0x6F, 0x78);
    TEST(CP, "H,9AH",  0xFC, 0x6F, 0x9A);
    TEST(CP, "L,0BCH", 0xFD, 0x6F, 0xBC);
    TEST(CP, "A,0DEH", 0xFE, 0x6F, 0xDE);
    TEST(CP, "(BC),18",    0xE8, 0x6F, 0x12);
    TEST(CP, "(DE),34H",   0xE9, 0x6F, 0x34);
    TEST(CP, "(HL),56H",   0xEA, 0x6F, 0x56);
    TEST(CP, "(IX),78H",   0xEC, 0x6F, 0x78);
    TEST(CP, "(IY),9AH",   0xED, 0x6F, 0x9A);
    TEST(CP, "(SP),0BCH",  0xEE, 0x6F, 0xBC);
    TEST(CP, "(IX+18),34H",  0xF4, 0x12, 0x6F, 0x34);
    TEST(CP, "(IY+56H),78H", 0xF5, 0x56, 0x6F, 0x78);
    TEST(CP, "(SP-16),0BCH", 0xF6, 0xF0, 0x6F, 0xBC);
    TEST(CP, "(HL+A),18",    0xF7, 0x6F, 0x12);
    TEST(CP, "(1234H),56H",  0xEB, 0x34, 0x12, 0x6F, 0x56);
    TEST(CP, "(0FF34H),56H", 0xEF, 0x34, 0x6F, 0x56);

    TEST(INC, "B", 0x80);
    TEST(INC, "C", 0x81);
    TEST(INC, "D", 0x82);
    TEST(INC, "E", 0x83);
    TEST(INC, "H", 0x84);
    TEST(INC, "L", 0x85);
    TEST(INC, "A", 0x86);
    TEST(INC, "(0FF12H)", 0x87, 0x12);
    TEST(INC, "(BC)", 0xE0, 0x87);
    TEST(INC, "(DE)", 0xE1, 0x87);
    TEST(INC, "(HL)", 0xE2, 0x87);
    TEST(INC, "(IX)", 0xE4, 0x87);
    TEST(INC, "(IY)", 0xE5, 0x87);
    TEST(INC, "(SP)", 0xE6, 0x87);
    TEST(INC, "(1234H)",  0xE3, 0x34, 0x12, 0x87);
    TEST(INC, "(IX+18)",  0xF0, 0x12, 0x87);
    TEST(INC, "(IY+34H)", 0xF1, 0x34, 0x87);
    TEST(INC, "(SP-16)",  0xF2, 0xF0, 0x87);
    TEST(INC, "(HL+A)",   0xF3, 0x87);

    TEST(DEC, "B", 0x88);
    TEST(DEC, "C", 0x89);
    TEST(DEC, "D", 0x8A);
    TEST(DEC, "E", 0x8B);
    TEST(DEC, "H", 0x8C);
    TEST(DEC, "L", 0x8D);
    TEST(DEC, "A", 0x8E);
    TEST(DEC, "(0FF12H)", 0x8F, 0x12);
    TEST(DEC, "(BC)", 0xE0, 0x8F);
    TEST(DEC, "(DE)", 0xE1, 0x8F);
    TEST(DEC, "(HL)", 0xE2, 0x8F);
    TEST(DEC, "(IX)", 0xE4, 0x8F);
    TEST(DEC, "(IY)", 0xE5, 0x8F);
    TEST(DEC, "(SP)", 0xE6, 0x8F);
    TEST(DEC, "(1234H)",  0xE3, 0x34, 0x12, 0x8F);
    TEST(DEC, "(IX+18)",  0xF0, 0x12, 0x8F);
    TEST(DEC, "(IY+34H)", 0xF1, 0x34, 0x8F);
    TEST(DEC, "(SP-16)",  0xF2, 0xF0, 0x8F);
    TEST(DEC, "(HL+A)",   0xF3, 0x8F);

    TEST(INCX, "(0FF12H)", 0x07, 0x12);
    TEST(DECX, "(0FF12H)", 0x0F, 0x12);
}

static void test_16bit_arithmetic() {
    TEST(ADD, "HL,BC", 0xF8, 0x70);
    TEST(ADD, "HL,DE", 0xF9, 0x70);
    TEST(ADD, "HL,HL", 0xFA, 0x70);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x70);
    TEST(ADD, "HL,IX", 0xFC, 0x70);
    TEST(ADD, "HL,IY", 0xFD, 0x70);
    TEST(ADD, "HL,SP", 0xFE, 0x70);
    TEST(ADD, "HL,(0FF12H)", 0x70, 0x12);
    TEST(ADD, "HL,(BC)", 0xE0, 0x70);
    TEST(ADD, "HL,(DE)", 0xE1, 0x70);
    TEST(ADD, "HL,(HL)", 0xE2, 0x70);
    TEST(ADD, "HL,(IX)", 0xE4, 0x70);
    TEST(ADD, "HL,(IY)", 0xE5, 0x70);
    TEST(ADD, "HL,(SP)", 0xE6, 0x70);
    TEST(ADD, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x70);
    TEST(ADD, "HL,(IX+18)",  0xF0, 0x12, 0x70);
    TEST(ADD, "HL,(IY+34H)", 0xF1, 0x34, 0x70);
    TEST(ADD, "HL,(SP-16)",  0xF2, 0xF0, 0x70);
    TEST(ADD, "HL,(HL+A)",   0xF3, 0x70);
    TEST(ADD, "HL,1234H", 0x78, 0x34, 0x12);

    TEST(ADC, "HL,BC", 0xF8, 0x71);
    TEST(ADC, "HL,DE", 0xF9, 0x71);
    TEST(ADC, "HL,HL", 0xFA, 0x71);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x71);
    TEST(ADC, "HL,IX", 0xFC, 0x71);
    TEST(ADC, "HL,IY", 0xFD, 0x71);
    TEST(ADC, "HL,SP", 0xFE, 0x71);
    TEST(ADC, "HL,(0FF12H)", 0x71, 0x12);
    TEST(ADC, "HL,(BC)", 0xE0, 0x71);
    TEST(ADC, "HL,(DE)", 0xE1, 0x71);
    TEST(ADC, "HL,(HL)", 0xE2, 0x71);
    TEST(ADC, "HL,(IX)", 0xE4, 0x71);
    TEST(ADC, "HL,(IY)", 0xE5, 0x71);
    TEST(ADC, "HL,(SP)", 0xE6, 0x71);
    TEST(ADC, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x71);
    TEST(ADC, "HL,(IX+18)",  0xF0, 0x12, 0x71);
    TEST(ADC, "HL,(IY+34H)", 0xF1, 0x34, 0x71);
    TEST(ADC, "HL,(SP-16)",  0xF2, 0xF0, 0x71);
    TEST(ADC, "HL,(HL+A)",   0xF3, 0x71);
    TEST(ADC, "HL,1234H", 0x79, 0x34, 0x12);

    TEST(SUB, "HL,BC", 0xF8, 0x72);
    TEST(SUB, "HL,DE", 0xF9, 0x72);
    TEST(SUB, "HL,HL", 0xFA, 0x72);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x72);
    TEST(SUB, "HL,IX", 0xFC, 0x72);
    TEST(SUB, "HL,IY", 0xFD, 0x72);
    TEST(SUB, "HL,SP", 0xFE, 0x72);
    TEST(SUB, "HL,(0FF12H)", 0x72, 0x12);
    TEST(SUB, "HL,(BC)", 0xE0, 0x72);
    TEST(SUB, "HL,(DE)", 0xE1, 0x72);
    TEST(SUB, "HL,(HL)", 0xE2, 0x72);
    TEST(SUB, "HL,(IX)", 0xE4, 0x72);
    TEST(SUB, "HL,(IY)", 0xE5, 0x72);
    TEST(SUB, "HL,(SP)", 0xE6, 0x72);
    TEST(SUB, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x72);
    TEST(SUB, "HL,(IX+18)",  0xF0, 0x12, 0x72);
    TEST(SUB, "HL,(IY+34H)", 0xF1, 0x34, 0x72);
    TEST(SUB, "HL,(SP-16)",  0xF2, 0xF0, 0x72);
    TEST(SUB, "HL,(HL+A)",   0xF3, 0x72);
    TEST(SUB, "HL,1234H", 0x7A, 0x34, 0x12);

    TEST(SBC, "HL,BC", 0xF8, 0x73);
    TEST(SBC, "HL,DE", 0xF9, 0x73);
    TEST(SBC, "HL,HL", 0xFA, 0x73);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x73);
    TEST(SBC, "HL,IX", 0xFC, 0x73);
    TEST(SBC, "HL,IY", 0xFD, 0x73);
    TEST(SBC, "HL,SP", 0xFE, 0x73);
    TEST(SBC, "HL,(0FF12H)", 0x73, 0x12);
    TEST(SBC, "HL,(BC)", 0xE0, 0x73);
    TEST(SBC, "HL,(DE)", 0xE1, 0x73);
    TEST(SBC, "HL,(HL)", 0xE2, 0x73);
    TEST(SBC, "HL,(IX)", 0xE4, 0x73);
    TEST(SBC, "HL,(IY)", 0xE5, 0x73);
    TEST(SBC, "HL,(SP)", 0xE6, 0x73);
    TEST(SBC, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x73);
    TEST(SBC, "HL,(IX+18)",  0xF0, 0x12, 0x73);
    TEST(SBC, "HL,(IY+34H)", 0xF1, 0x34, 0x73);
    TEST(SBC, "HL,(SP-16)",  0xF2, 0xF0, 0x73);
    TEST(SBC, "HL,(HL+A)",   0xF3, 0x73);
    TEST(SBC, "HL,1234H", 0x7B, 0x34, 0x12);

    TEST(AND, "HL,BC", 0xF8, 0x74);
    TEST(AND, "HL,DE", 0xF9, 0x74);
    TEST(AND, "HL,HL", 0xFA, 0x74);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x74);
    TEST(AND, "HL,IX", 0xFC, 0x74);
    TEST(AND, "HL,IY", 0xFD, 0x74);
    TEST(AND, "HL,SP", 0xFE, 0x74);
    TEST(AND, "HL,(0FF12H)", 0x74, 0x12);
    TEST(AND, "HL,(BC)", 0xE0, 0x74);
    TEST(AND, "HL,(DE)", 0xE1, 0x74);
    TEST(AND, "HL,(HL)", 0xE2, 0x74);
    TEST(AND, "HL,(IX)", 0xE4, 0x74);
    TEST(AND, "HL,(IY)", 0xE5, 0x74);
    TEST(AND, "HL,(SP)", 0xE6, 0x74);
    TEST(AND, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x74);
    TEST(AND, "HL,(IX+18)",  0xF0, 0x12, 0x74);
    TEST(AND, "HL,(IY+34H)", 0xF1, 0x34, 0x74);
    TEST(AND, "HL,(SP-16)",  0xF2, 0xF0, 0x74);
    TEST(AND, "HL,(HL+A)",   0xF3, 0x74);
    TEST(AND, "HL,1234H", 0x7C, 0x34, 0x12);

    TEST(OR, "HL,BC", 0xF8, 0x76);
    TEST(OR, "HL,DE", 0xF9, 0x76);
    TEST(OR, "HL,HL", 0xFA, 0x76);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x76);
    TEST(OR, "HL,IX", 0xFC, 0x76);
    TEST(OR, "HL,IY", 0xFD, 0x76);
    TEST(OR, "HL,SP", 0xFE, 0x76);
    TEST(OR, "HL,(0FF12H)", 0x76, 0x12);
    TEST(OR, "HL,(BC)", 0xE0, 0x76);
    TEST(OR, "HL,(DE)", 0xE1, 0x76);
    TEST(OR, "HL,(HL)", 0xE2, 0x76);
    TEST(OR, "HL,(IX)", 0xE4, 0x76);
    TEST(OR, "HL,(IY)", 0xE5, 0x76);
    TEST(OR, "HL,(SP)", 0xE6, 0x76);
    TEST(OR, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x76);
    TEST(OR, "HL,(IX+18)",  0xF0, 0x12, 0x76);
    TEST(OR, "HL,(IY+34H)", 0xF1, 0x34, 0x76);
    TEST(OR, "HL,(SP-16)",  0xF2, 0xF0, 0x76);
    TEST(OR, "HL,(HL+A)",   0xF3, 0x76);
    TEST(OR, "HL,1234H", 0x7E, 0x34, 0x12);

    TEST(XOR, "HL,BC", 0xF8, 0x75);
    TEST(XOR, "HL,DE", 0xF9, 0x75);
    TEST(XOR, "HL,HL", 0xFA, 0x75);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x75);
    TEST(XOR, "HL,IX", 0xFC, 0x75);
    TEST(XOR, "HL,IY", 0xFD, 0x75);
    TEST(XOR, "HL,SP", 0xFE, 0x75);
    TEST(XOR, "HL,(0FF12H)", 0x75, 0x12);
    TEST(XOR, "HL,(BC)", 0xE0, 0x75);
    TEST(XOR, "HL,(DE)", 0xE1, 0x75);
    TEST(XOR, "HL,(HL)", 0xE2, 0x75);
    TEST(XOR, "HL,(IX)", 0xE4, 0x75);
    TEST(XOR, "HL,(IY)", 0xE5, 0x75);
    TEST(XOR, "HL,(SP)", 0xE6, 0x75);
    TEST(XOR, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x75);
    TEST(XOR, "HL,(IX+18)",  0xF0, 0x12, 0x75);
    TEST(XOR, "HL,(IY+34H)", 0xF1, 0x34, 0x75);
    TEST(XOR, "HL,(SP-16)",  0xF2, 0xF0, 0x75);
    TEST(XOR, "HL,(HL+A)",   0xF3, 0x75);
    TEST(XOR, "HL,1234H", 0x7D, 0x34, 0x12);

    TEST(CP, "HL,BC", 0xF8, 0x77);
    TEST(CP, "HL,DE", 0xF9, 0x77);
    TEST(CP, "HL,HL", 0xFA, 0x77);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x77);
    TEST(CP, "HL,IX", 0xFC, 0x77);
    TEST(CP, "HL,IY", 0xFD, 0x77);
    TEST(CP, "HL,SP", 0xFE, 0x77);
    TEST(CP, "HL,(0FF12H)", 0x77, 0x12);
    TEST(CP, "HL,(BC)", 0xE0, 0x77);
    TEST(CP, "HL,(DE)", 0xE1, 0x77);
    TEST(CP, "HL,(HL)", 0xE2, 0x77);
    TEST(CP, "HL,(IX)", 0xE4, 0x77);
    TEST(CP, "HL,(IY)", 0xE5, 0x77);
    TEST(CP, "HL,(SP)", 0xE6, 0x77);
    TEST(CP, "HL,(1234H)",  0xE3, 0x34, 0x12, 0x77);
    TEST(CP, "HL,(IX+18)",  0xF0, 0x12, 0x77);
    TEST(CP, "HL,(IY+34H)", 0xF1, 0x34, 0x77);
    TEST(CP, "HL,(SP-16)",  0xF2, 0xF0, 0x77);
    TEST(CP, "HL,(HL+A)",   0xF3, 0x77);
    TEST(CP, "HL,1234H", 0x7F, 0x34, 0x12);

    TEST(MUL, "HL,B", 0xF8, 0x12);
    TEST(MUL, "HL,C", 0xF9, 0x12);
    TEST(MUL, "HL,D", 0xFA, 0x12);
    TEST(MUL, "HL,E", 0xFB, 0x12);
    TEST(MUL, "HL,H", 0xFC, 0x12);
    TEST(MUL, "HL,L", 0xFD, 0x12);
    TEST(MUL, "HL,A", 0xFE, 0x12);
    TEST(MUL, "HL,34H",  0x12, 0x34);
    TEST(MUL, "HL,(BC)", 0xE0, 0x12);
    TEST(MUL, "HL,(DE)", 0xE1, 0x12);
    TEST(MUL, "HL,(HL)", 0xE2, 0x12);
    TEST(MUL, "HL,(IX)", 0xE4, 0x12);
    TEST(MUL, "HL,(IY)", 0xE5, 0x12);
    TEST(MUL, "HL,(SP)", 0xE6, 0x12);
    TEST(MUL, "HL,(3456H)",  0xE3, 0x56, 0x34, 0x12);
    TEST(MUL, "HL,(0FF34H)", 0xE7, 0x34, 0x12);
    TEST(MUL, "HL,(IX+34H)", 0xF0, 0x34, 0x12);
    TEST(MUL, "HL,(IY+56H)", 0xF1, 0x56, 0x12);
    TEST(MUL, "HL,(SP-16)",  0xF2, 0xF0, 0x12);
    TEST(MUL, "HL,(HL+A)",   0xF3, 0x12);

    TEST(DIV, "HL,B", 0xF8, 0x13);
    TEST(DIV, "HL,C", 0xF9, 0x13);
    TEST(DIV, "HL,D", 0xFA, 0x13);
    TEST(DIV, "HL,E", 0xFB, 0x13);
    TEST(DIV, "HL,H", 0xFC, 0x13);
    TEST(DIV, "HL,L", 0xFD, 0x13);
    TEST(DIV, "HL,A", 0xFE, 0x13);
    TEST(DIV, "HL,34H",  0x13, 0x34);
    TEST(DIV, "HL,(BC)", 0xE0, 0x13);
    TEST(DIV, "HL,(DE)", 0xE1, 0x13);
    TEST(DIV, "HL,(HL)", 0xE2, 0x13);
    TEST(DIV, "HL,(IX)", 0xE4, 0x13);
    TEST(DIV, "HL,(IY)", 0xE5, 0x13);
    TEST(DIV, "HL,(SP)", 0xE6, 0x13);
    TEST(DIV, "HL,(3456H)",  0xE3, 0x56, 0x34, 0x13);
    TEST(DIV, "HL,(0FF34H)", 0xE7, 0x34, 0x13);
    TEST(DIV, "HL,(IX+34H)", 0xF0, 0x34, 0x13);
    TEST(DIV, "HL,(IY+56H)", 0xF1, 0x56, 0x13);
    TEST(DIV, "HL,(SP-16)",  0xF2, 0xF0, 0x13);
    TEST(DIV, "HL,(HL+A)",   0xF3, 0x13);

    TEST(ADD, "IX,BC", 0xF8, 0x14);
    TEST(ADD, "IX,DE", 0xF9, 0x14);
    TEST(ADD, "IX,HL", 0xFA, 0x14);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x14);
    TEST(ADD, "IX,IX", 0xFC, 0x14);
    TEST(ADD, "IX,IY", 0xFD, 0x14);
    TEST(ADD, "IX,SP", 0xFE, 0x14);
    TEST(ADD, "IY,BC", 0xF8, 0x15);
    TEST(ADD, "IY,DE", 0xF9, 0x15);
    TEST(ADD, "IY,HL", 0xFA, 0x15);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x15);
    TEST(ADD, "IY,IX", 0xFC, 0x15);
    TEST(ADD, "IY,IY", 0xFD, 0x15);
    TEST(ADD, "IY,SP", 0xFE, 0x15);
    TEST(ADD, "SP,BC", 0xF8, 0x16);
    TEST(ADD, "SP,DE", 0xF9, 0x16);
    TEST(ADD, "SP,HL", 0xFA, 0x16);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xFB, 0x16);
    TEST(ADD, "SP,IX", 0xFC, 0x16);
    TEST(ADD, "SP,IY", 0xFD, 0x16);
    TEST(ADD, "SP,SP", 0xFE, 0x16);

    TEST(INC, "BC", 0x90);
    TEST(INC, "DE", 0x91);
    TEST(INC, "HL", 0x92);
    TEST(INC, "IX", 0x94);
    TEST(INC, "IY", 0x95);
    TEST(INC, "SP", 0x96);
    TEST(INCW, "(0FF12H)", 0x97, 0x12);
    TEST(INCW, "(BC)", 0xE0, 0x97);
    TEST(INCW, "(DE)", 0xE1, 0x97);
    TEST(INCW, "(HL)", 0xE2, 0x97);
    TEST(INCW, "(IX)", 0xE4, 0x97);
    TEST(INCW, "(IY)", 0xE5, 0x97);
    TEST(INCW, "(SP)", 0xE6, 0x97);
    TEST(INCW, "(1234H)",  0xE3, 0x34, 0x12, 0x97);
    TEST(INCW, "(IX+18)",  0xF0, 0x12, 0x97);
    TEST(INCW, "(IY+34H)", 0xF1, 0x34, 0x97);
    TEST(INCW, "(SP-16)",  0xF2, 0xF0, 0x97);
    TEST(INCW, "(HL+A)",   0xF3, 0x97);

    TEST(DEC, "BC", 0x98);
    TEST(DEC, "DE", 0x99);
    TEST(DEC, "HL", 0x9A);
    TEST(DEC, "IX", 0x9C);
    TEST(DEC, "IY", 0x9D);
    TEST(DEC, "SP", 0x9E);
    TEST(DECW, "(0FF12H)", 0x9F, 0x12);
    TEST(DECW, "(BC)", 0xE0, 0x9F);
    TEST(DECW, "(DE)", 0xE1, 0x9F);
    TEST(DECW, "(HL)", 0xE2, 0x9F);
    TEST(DECW, "(IX)", 0xE4, 0x9F);
    TEST(DECW, "(IY)", 0xE5, 0x9F);
    TEST(DECW, "(SP)", 0xE6, 0x9F);
    TEST(DECW, "(1234H)",  0xE3, 0x34, 0x12, 0x9F);
    TEST(DECW, "(IX+18)",  0xF0, 0x12, 0x9F);
    TEST(DECW, "(IY+34H)", 0xF1, 0x34, 0x9F);
    TEST(DECW, "(SP-16)",  0xF2, 0xF0, 0x9F);
    TEST(DECW, "(HL+A)",   0xF3, 0x9F);
}

static void test_cpu_control() {
    TEST(NOP,  "", 0x00);
    TEST(HALT, "", 0x01);
    TEST(DI,   "", 0x02);
    TEST(EI,   "", 0x03);
    TEST(RCF,  "", 0x0C);
    TEST(SCF,  "", 0x0D);
    TEST(CCF,  "", 0x0E);
    TEST(SWI,  "", 0xFF);
}

static void test_shift_rotate() {
    TEST(RLCA, "", 0xA0);
    TEST(RLC, "B", 0xF8, 0xA0);
    TEST(RLC, "C", 0xF9, 0xA0);
    TEST(RLC, "D", 0xFA, 0xA0);
    TEST(RLC, "E", 0xFB, 0xA0);
    TEST(RLC, "H", 0xFC, 0xA0);
    TEST(RLC, "L", 0xFD, 0xA0);
    TEST(RLC, "A", 0xFE, 0xA0);
    TEST(RLC, "(BC)", 0xE0, 0xA0);
    TEST(RLC, "(DE)", 0xE1, 0xA0);
    TEST(RLC, "(HL)", 0xE2, 0xA0);
    TEST(RLC, "(IX)", 0xE4, 0xA0);
    TEST(RLC, "(IY)", 0xE5, 0xA0);
    TEST(RLC, "(SP)", 0xE6, 0xA0);
    TEST(RLC, "(0FF12H)", 0xE7, 0x12, 0xA0);
    TEST(RLC, "(1234H)",  0xE3, 0x34, 0x12, 0xA0);
    TEST(RLC, "(IX+18)",  0xF0, 0x12, 0xA0);
    TEST(RLC, "(IY-16)",  0xF1, 0xF0, 0xA0);
    TEST(RLC, "(SP+34H)", 0xF2, 0x34, 0xA0);
    TEST(RLC, "(HL+A)",   0xF3, 0xA0);

    TEST(RRCA, "", 0xA1);
    TEST(RRC, "B", 0xF8, 0xA1);
    TEST(RRC, "C", 0xF9, 0xA1);
    TEST(RRC, "D", 0xFA, 0xA1);
    TEST(RRC, "E", 0xFB, 0xA1);
    TEST(RRC, "H", 0xFC, 0xA1);
    TEST(RRC, "L", 0xFD, 0xA1);
    TEST(RRC, "A", 0xFE, 0xA1);
    TEST(RRC, "(BC)", 0xE0, 0xA1);
    TEST(RRC, "(DE)", 0xE1, 0xA1);
    TEST(RRC, "(HL)", 0xE2, 0xA1);
    TEST(RRC, "(IX)", 0xE4, 0xA1);
    TEST(RRC, "(IY)", 0xE5, 0xA1);
    TEST(RRC, "(SP)", 0xE6, 0xA1);
    TEST(RRC, "(0FF12H)", 0xE7, 0x12, 0xA1);
    TEST(RRC, "(1234H)",  0xE3, 0x34, 0x12, 0xA1);
    TEST(RRC, "(IX+18)",  0xF0, 0x12, 0xA1);
    TEST(RRC, "(IY-16)",  0xF1, 0xF0, 0xA1);
    TEST(RRC, "(SP+34H)", 0xF2, 0x34, 0xA1);
    TEST(RRC, "(HL+A)",   0xF3, 0xA1);

    TEST(RLA, "", 0xA2);
    TEST(RL, "B", 0xF8, 0xA2);
    TEST(RL, "C", 0xF9, 0xA2);
    TEST(RL, "D", 0xFA, 0xA2);
    TEST(RL, "E", 0xFB, 0xA2);
    TEST(RL, "H", 0xFC, 0xA2);
    TEST(RL, "L", 0xFD, 0xA2);
    TEST(RL, "A", 0xFE, 0xA2);
    TEST(RL, "(BC)", 0xE0, 0xA2);
    TEST(RL, "(DE)", 0xE1, 0xA2);
    TEST(RL, "(HL)", 0xE2, 0xA2);
    TEST(RL, "(IX)", 0xE4, 0xA2);
    TEST(RL, "(IY)", 0xE5, 0xA2);
    TEST(RL, "(SP)", 0xE6, 0xA2);
    TEST(RL, "(0FF12H)", 0xE7, 0x12, 0xA2);
    TEST(RL, "(1234H)",  0xE3, 0x34, 0x12, 0xA2);
    TEST(RL, "(IX+18)",  0xF0, 0x12, 0xA2);
    TEST(RL, "(IY-16)",  0xF1, 0xF0, 0xA2);
    TEST(RL, "(SP+34H)", 0xF2, 0x34, 0xA2);
    TEST(RL, "(HL+A)",   0xF3, 0xA2);

    TEST(RRA, "", 0xA3);
    TEST(RR, "B", 0xF8, 0xA3);
    TEST(RR, "C", 0xF9, 0xA3);
    TEST(RR, "D", 0xFA, 0xA3);
    TEST(RR, "E", 0xFB, 0xA3);
    TEST(RR, "H", 0xFC, 0xA3);
    TEST(RR, "L", 0xFD, 0xA3);
    TEST(RR, "A", 0xFE, 0xA3);
    TEST(RR, "(BC)", 0xE0, 0xA3);
    TEST(RR, "(DE)", 0xE1, 0xA3);
    TEST(RR, "(HL)", 0xE2, 0xA3);
    TEST(RR, "(IX)", 0xE4, 0xA3);
    TEST(RR, "(IY)", 0xE5, 0xA3);
    TEST(RR, "(SP)", 0xE6, 0xA3);
    TEST(RR, "(0FF12H)", 0xE7, 0x12, 0xA3);
    TEST(RR, "(1234H)",  0xE3, 0x34, 0x12, 0xA3);
    TEST(RR, "(IX+18)",  0xF0, 0x12, 0xA3);
    TEST(RR, "(IY-16)",  0xF1, 0xF0, 0xA3);
    TEST(RR, "(SP+34H)", 0xF2, 0x34, 0xA3);
    TEST(RR, "(HL+A)",   0xF3, 0xA3);

    TEST(SLAA, "", 0xA4);
    TEST(SLA, "B", 0xF8, 0xA4);
    TEST(SLA, "C", 0xF9, 0xA4);
    TEST(SLA, "D", 0xFA, 0xA4);
    TEST(SLA, "E", 0xFB, 0xA4);
    TEST(SLA, "H", 0xFC, 0xA4);
    TEST(SLA, "L", 0xFD, 0xA4);
    TEST(SLA, "A", 0xFE, 0xA4);
    TEST(SLA, "(BC)", 0xE0, 0xA4);
    TEST(SLA, "(DE)", 0xE1, 0xA4);
    TEST(SLA, "(HL)", 0xE2, 0xA4);
    TEST(SLA, "(IX)", 0xE4, 0xA4);
    TEST(SLA, "(IY)", 0xE5, 0xA4);
    TEST(SLA, "(SP)", 0xE6, 0xA4);
    TEST(SLA, "(0FF12H)", 0xE7, 0x12, 0xA4);
    TEST(SLA, "(1234H)",  0xE3, 0x34, 0x12, 0xA4);
    TEST(SLA, "(IX+18)",  0xF0, 0x12, 0xA4);
    TEST(SLA, "(IY-16)",  0xF1, 0xF0, 0xA4);
    TEST(SLA, "(SP+34H)", 0xF2, 0x34, 0xA4);
    TEST(SLA, "(HL+A)",   0xF3, 0xA4);

    TEST(SRAA, "", 0xA5);
    TEST(SRA, "B", 0xF8, 0xA5);
    TEST(SRA, "C", 0xF9, 0xA5);
    TEST(SRA, "D", 0xFA, 0xA5);
    TEST(SRA, "E", 0xFB, 0xA5);
    TEST(SRA, "H", 0xFC, 0xA5);
    TEST(SRA, "L", 0xFD, 0xA5);
    TEST(SRA, "A", 0xFE, 0xA5);
    TEST(SRA, "(BC)", 0xE0, 0xA5);
    TEST(SRA, "(DE)", 0xE1, 0xA5);
    TEST(SRA, "(HL)", 0xE2, 0xA5);
    TEST(SRA, "(IX)", 0xE4, 0xA5);
    TEST(SRA, "(IY)", 0xE5, 0xA5);
    TEST(SRA, "(SP)", 0xE6, 0xA5);
    TEST(SRA, "(0FF12H)", 0xE7, 0x12, 0xA5);
    TEST(SRA, "(1234H)",  0xE3, 0x34, 0x12, 0xA5);
    TEST(SRA, "(IX+18)",  0xF0, 0x12, 0xA5);
    TEST(SRA, "(IY-16)",  0xF1, 0xF0, 0xA5);
    TEST(SRA, "(SP+34H)", 0xF2, 0x34, 0xA5);
    TEST(SRA, "(HL+A)",   0xF3, 0xA5);

    TEST(SLLA, "", 0xA6);
    TEST(SLL, "B", 0xF8, 0xA6);
    TEST(SLL, "C", 0xF9, 0xA6);
    TEST(SLL, "D", 0xFA, 0xA6);
    TEST(SLL, "E", 0xFB, 0xA6);
    TEST(SLL, "H", 0xFC, 0xA6);
    TEST(SLL, "L", 0xFD, 0xA6);
    TEST(SLL, "A", 0xFE, 0xA6);
    TEST(SLL, "(BC)", 0xE0, 0xA6);
    TEST(SLL, "(DE)", 0xE1, 0xA6);
    TEST(SLL, "(HL)", 0xE2, 0xA6);
    TEST(SLL, "(IX)", 0xE4, 0xA6);
    TEST(SLL, "(IY)", 0xE5, 0xA6);
    TEST(SLL, "(SP)", 0xE6, 0xA6);
    TEST(SLL, "(0FF12H)", 0xE7, 0x12, 0xA6);
    TEST(SLL, "(1234H)",  0xE3, 0x34, 0x12, 0xA6);
    TEST(SLL, "(IX+18)",  0xF0, 0x12, 0xA6);
    TEST(SLL, "(IY-16)",  0xF1, 0xF0, 0xA6);
    TEST(SLL, "(SP+34H)", 0xF2, 0x34, 0xA6);
    TEST(SLL, "(HL+A)",   0xF3, 0xA6);

    TEST(SRLA, "", 0xA7);
    TEST(SRL, "B", 0xF8, 0xA7);
    TEST(SRL, "C", 0xF9, 0xA7);
    TEST(SRL, "D", 0xFA, 0xA7);
    TEST(SRL, "E", 0xFB, 0xA7);
    TEST(SRL, "H", 0xFC, 0xA7);
    TEST(SRL, "L", 0xFD, 0xA7);
    TEST(SRL, "A", 0xFE, 0xA7);
    TEST(SRL, "(BC)", 0xE0, 0xA7);
    TEST(SRL, "(DE)", 0xE1, 0xA7);
    TEST(SRL, "(HL)", 0xE2, 0xA7);
    TEST(SRL, "(IX)", 0xE4, 0xA7);
    TEST(SRL, "(IY)", 0xE5, 0xA7);
    TEST(SRL, "(SP)", 0xE6, 0xA7);
    TEST(SRL, "(0FF12H)", 0xE7, 0x12, 0xA7);
    TEST(SRL, "(1234H)",  0xE3, 0x34, 0x12, 0xA7);
    TEST(SRL, "(IX+18)",  0xF0, 0x12, 0xA7);
    TEST(SRL, "(IY-16)",  0xF1, 0xF0, 0xA7);
    TEST(SRL, "(SP+34H)", 0xF2, 0x34, 0xA7);
    TEST(SRL, "(HL+A)",   0xF3, 0xA7);

    TEST(RLD, "(BC)", 0xE0, 0x10);
    TEST(RLD, "(DE)", 0xE1, 0x10);
    TEST(RLD, "(HL)", 0xE2, 0x10);
    TEST(RLD, "(IX)", 0xE4, 0x10);
    TEST(RLD, "(IY)", 0xE5, 0x10);
    TEST(RLD, "(SP)", 0xE6, 0x10);
    TEST(RLD, "(0FF12H)", 0xE7, 0x12, 0x10);
    TEST(RLD, "(1234H)",  0xE3, 0x34, 0x12, 0x10);
    TEST(RLD, "(IX+18)",  0xF0, 0x12, 0x10);
    TEST(RLD, "(IY-16)",  0xF1, 0xF0, 0x10);
    TEST(RLD, "(SP+34H)", 0xF2, 0x34, 0x10);
    TEST(RLD, "(HL+A)",   0xF3, 0x10);

    TEST(RRD, "(BC)", 0xE0, 0x11);
    TEST(RRD, "(DE)", 0xE1, 0x11);
    TEST(RRD, "(HL)", 0xE2, 0x11);
    TEST(RRD, "(IX)", 0xE4, 0x11);
    TEST(RRD, "(IY)", 0xE5, 0x11);
    TEST(RRD, "(SP)", 0xE6, 0x11);
    TEST(RRD, "(0FF12H)", 0xE7, 0x12, 0x11);
    TEST(RRD, "(1234H)",  0xE3, 0x34, 0x12, 0x11);
    TEST(RRD, "(IX+18)",  0xF0, 0x12, 0x11);
    TEST(RRD, "(IY-16)",  0xF1, 0xF0, 0x11);
    TEST(RRD, "(SP+34H)", 0xF2, 0x34, 0x11);
    TEST(RRD, "(HL+A)",   0xF3, 0x11);
}

static void test_bitops() {
    TEST(BIT, "0,B", 0xF8, 0xA8);
    TEST(BIT, "1,C", 0xF9, 0xA9);
    TEST(BIT, "2,D", 0xFA, 0xAA);
    TEST(BIT, "3,E", 0xFB, 0xAB);
    TEST(BIT, "4,H", 0xFC, 0xAC);
    TEST(BIT, "5,L", 0xFD, 0xAD);
    TEST(BIT, "6,A", 0xFE, 0xAE);
    TEST(BIT, "7,B", 0xF8, 0xAF);
    TEST(BIT, "0,(BC)", 0xE0, 0xA8);
    TEST(BIT, "1,(DE)", 0xE1, 0xA9);
    TEST(BIT, "2,(HL)", 0xE2, 0xAA);
    TEST(BIT, "3,(1234H)", 0xE3, 0x34, 0x12, 0xAB);
    TEST(BIT, "4,(IX)", 0xE4, 0xAC);
    TEST(BIT, "5,(IY)", 0xE5, 0xAD);
    TEST(BIT, "6,(SP)", 0xE6, 0xAE);
    TEST(BIT, "7,(0FF12H)", 0xAF, 0x12);
    TEST(BIT, "0,(IX+18)",  0xF0, 0x12, 0xA8);
    TEST(BIT, "1,(IY-16)",  0xF1, 0xF0, 0xA9);
    TEST(BIT, "2,(SP+34H)", 0xF2, 0x34, 0xAA);
    TEST(BIT, "3,(HL+A)",   0xF3, 0xAB);

    TEST(SET, "0,B", 0xF8, 0xB8);
    TEST(SET, "1,C", 0xF9, 0xB9);
    TEST(SET, "2,D", 0xFA, 0xBA);
    TEST(SET, "3,E", 0xFB, 0xBB);
    TEST(SET, "4,H", 0xFC, 0xBC);
    TEST(SET, "5,L", 0xFD, 0xBD);
    TEST(SET, "6,A", 0xFE, 0xBE);
    TEST(SET, "7,B", 0xF8, 0xBF);
    TEST(SET, "0,(BC)", 0xE0, 0xB8);
    TEST(SET, "1,(DE)", 0xE1, 0xB9);
    TEST(SET, "2,(HL)", 0xE2, 0xBA);
    TEST(SET, "3,(1234H)", 0xE3, 0x34, 0x12, 0xBB);
    TEST(SET, "4,(IX)", 0xE4, 0xBC);
    TEST(SET, "5,(IY)", 0xE5, 0xBD);
    TEST(SET, "6,(SP)", 0xE6, 0xBE);
    TEST(SET, "7,(0FF12H)", 0xBF, 0x12);
    TEST(SET, "0,(IX+18)",  0xF0, 0x12, 0xB8);
    TEST(SET, "1,(IY-16)",  0xF1, 0xF0, 0xB9);
    TEST(SET, "2,(SP+34H)", 0xF2, 0x34, 0xBA);
    TEST(SET, "3,(HL+A)",   0xF3, 0xBB);

    TEST(RES, "0,B", 0xF8, 0xB0);
    TEST(RES, "1,C", 0xF9, 0xB1);
    TEST(RES, "2,D", 0xFA, 0xB2);
    TEST(RES, "3,E", 0xFB, 0xB3);
    TEST(RES, "4,H", 0xFC, 0xB4);
    TEST(RES, "5,L", 0xFD, 0xB5);
    TEST(RES, "6,A", 0xFE, 0xB6);
    TEST(RES, "7,B", 0xF8, 0xB7);
    TEST(RES, "0,(BC)", 0xE0, 0xB0);
    TEST(RES, "1,(DE)", 0xE1, 0xB1);
    TEST(RES, "2,(HL)", 0xE2, 0xB2);
    TEST(RES, "3,(1234H)", 0xE3, 0x34, 0x12, 0xB3);
    TEST(RES, "4,(IX)", 0xE4, 0xB4);
    TEST(RES, "5,(IY)", 0xE5, 0xB5);
    TEST(RES, "6,(SP)", 0xE6, 0xB6);
    TEST(RES, "7,(0FF12H)", 0xB7, 0x12);
    TEST(RES, "0,(IX+18)",  0xF0, 0x12, 0xB0);
    TEST(RES, "1,(IY-16)",  0xF1, 0xF0, 0xB1);
    TEST(RES, "2,(SP+34H)", 0xF2, 0x34, 0xB2);
    TEST(RES, "3,(HL+A)",   0xF3, 0xB3);

    TEST(TSET, "0,B", 0xF8, 0x18);
    TEST(TSET, "1,C", 0xF9, 0x19);
    TEST(TSET, "2,D", 0xFA, 0x1A);
    TEST(TSET, "3,E", 0xFB, 0x1B);
    TEST(TSET, "4,H", 0xFC, 0x1C);
    TEST(TSET, "5,L", 0xFD, 0x1D);
    TEST(TSET, "6,A", 0xFE, 0x1E);
    TEST(TSET, "7,B", 0xF8, 0x1F);
    TEST(TSET, "0,(BC)", 0xE0, 0x18);
    TEST(TSET, "1,(DE)", 0xE1, 0x19);
    TEST(TSET, "2,(HL)", 0xE2, 0x1A);
    TEST(TSET, "3,(1234H)", 0xE3, 0x34, 0x12, 0x1B);
    TEST(TSET, "4,(IX)", 0xE4, 0x1C);
    TEST(TSET, "5,(IY)", 0xE5, 0x1D);
    TEST(TSET, "6,(SP)", 0xE6, 0x1E);
    TEST(TSET, "7,(0FF12H)", 0xE7, 0x12, 0x1F);
    TEST(TSET, "0,(IX+18)",  0xF0, 0x12, 0x18);
    TEST(TSET, "1,(IY-16)",  0xF1, 0xF0, 0x19);
    TEST(TSET, "2,(SP+34H)", 0xF2, 0x34, 0x1A);
    TEST(TSET, "3,(HL+A)",   0xF3, 0x1B);
}

static void test_jump_call() {
    ATEST(0x1000, JR,  "F,1002H",   0xC0, 0x00);
    ATEST(0x1000, JR,  "LT,1000H",  0xC1, 0xFE);
    ATEST(0x1000, JR,  "LE,0F82H",  0xC2, 0x80);
    ATEST(0x1000, JR,  "ULE,1081H", 0xC3, 0x7F);
    ATEST(0x1000, JR,  "OV,1002H",  0xC4, 0x00);
    ATEST(0x1000, JR,  "MI,1000H",  0xC5, 0xFE);
    ATEST(0x1000, JR,  "Z,0F82H",   0xC6, 0x80);
    ATEST(0x1000, JR,  "C,1081H",   0xC7, 0x7F);
    ATEST(0x1000, JR,  "1002H",     0xC8, 0x00);
    ATEST(0x1000, JR,  "GE,1000H",  0xC9, 0xFE);
    ATEST(0x1000, JR,  "GT,0F82H",  0xCA, 0x80);
    ATEST(0x1000, JR,  "UGT,1081H", 0xCB, 0x7F);
    ATEST(0x1000, JR,  "NOV,1002H", 0xCC, 0x00);
    ATEST(0x1000, JR,  "PL,1000H",  0xCD, 0xFE);
    ATEST(0x1000, JR,  "NZ,0F82H",  0xCE, 0x80);
    ATEST(0x1000, JR,  "NC,1081H",  0xCF, 0x7F);

    ATEST(0x1000, JRL, "1003H", 0x1B, 0x01, 0x00);
    ATEST(0x1000, JRL, "1000H", 0x1B, 0xFE, 0xFF);
    ATEST(0x9000, JRL, "1002H", 0x1B, 0x00, 0x80);
    ATEST(0x1000, JRL, "9001H", 0x1B, 0xFF, 0x7F);

    TEST(JP, "(1234H)", 0x1A, 0x34, 0x12);
    TEST(JP, "(1234H)", 0xEB, 0x34, 0x12, 0xC8);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xEF, 0x34, 0xC8);

    TEST(JP, "F,(BC)",      0xE8, 0xC0);
    TEST(JP, "LT,(DE)",     0xE9, 0xC1);
    TEST(JP, "LE,(HL)",     0xEA, 0xC2);
    TEST(JP, "ULE,(1234H)", 0xEB, 0x34, 0x12, 0xC3);
    TEST(JP, "OV,(IX)",     0xEC, 0xC4);
    TEST(JP, "MI,(IY)",     0xED, 0xC5);
    TEST(JP, "Z,(SP)",      0xEE, 0xC6);
    TEST(JP, "C,(IX+18)",   0xF4, 0x12, 0xC7);
    TEST(JP, "(IY+34H)",    0xF5, 0x34, 0xC8);
    TEST(JP, "GE,(SP-16)",  0xF6, 0xF0, 0xC9);
    TEST(JP, "GT,(HL+A)",   0xF7, 0xCA);
    TEST(JP, "UGT,(BC)",    0xE8, 0xCB);
    TEST(JP, "NOV,(DE)",    0xE9, 0xCC);
    TEST(JP, "PL,(HL)",     0xEA, 0xCD);
    TEST(JP, "NZ,(1234H)",  0xEB, 0x34, 0x12, 0xCE);
    TEST(JP, "NC,(IX)",     0xEC, 0xCF);

    ATEST(0x1000, CALR, "1003H", 0x1D, 0x01, 0x00);
    ATEST(0x1000, CALR, "1000H", 0x1D, 0xFE, 0xFF);
    ATEST(0x9000, CALR, "1002H", 0x1D, 0x00, 0x80);
    ATEST(0x1000, CALR, "9001H", 0x1D, 0xFF, 0x7F);

    TEST(CALL, "(1234H)", 0x1C, 0x34, 0x12);
    TEST(CALL, "(1234H)", 0xEB, 0x34, 0x12, 0xD8);
    ETEST(UNKNOWN_INSTRUCTION, _, "", 0xEF, 0x34, 0xD8);

    TEST(CALL, "F,(BC)",      0xE8, 0xD0);
    TEST(CALL, "LT,(DE)",     0xE9, 0xD1);
    TEST(CALL, "LE,(HL)",     0xEA, 0xD2);
    TEST(CALL, "ULE,(1234H)", 0xEB, 0x34, 0x12, 0xD3);
    TEST(CALL, "OV,(IX)",     0xEC, 0xD4);
    TEST(CALL, "MI,(IY)",     0xED, 0xD5);
    TEST(CALL, "Z,(SP)",      0xEE, 0xD6);
    TEST(CALL, "C,(IX+18)",   0xF4, 0x12, 0xD7);
    TEST(CALL, "(IY+34H)",    0xF5, 0x34, 0xD8);
    TEST(CALL, "GE,(SP-16)",  0xF6, 0xF0, 0xD9);
    TEST(CALL, "GT,(HL+A)",   0xF7, 0xDA);
    TEST(CALL, "UGT,(BC)",    0xE8, 0xDB);
    TEST(CALL, "NOV,(DE)",    0xE9, 0xDC);
    TEST(CALL, "PL,(HL)",     0xEA, 0xDD);
    TEST(CALL, "NZ,(1234H)",  0xEB, 0x34, 0x12, 0xDE);
    TEST(CALL, "NC,(IX)",     0xEC, 0xDF);

    ATEST(0x1000, DJNZ, "1002H", 0x18, 0x00);
    ATEST(0x1000, DJNZ, "1000H", 0x18, 0xFE);
    ATEST(0x1000, DJNZ, "0F82H", 0x18, 0x80);
    ATEST(0x1000, DJNZ, "1081H", 0x18, 0x7F);
    ATEST(0x1000, DJNZ, "BC,1002H", 0x19, 0x00);
    ATEST(0x1000, DJNZ, "BC,1000H", 0x19, 0xFE);
    ATEST(0x1000, DJNZ, "BC,0F82H", 0x19, 0x80);
    ATEST(0x1000, DJNZ, "BC,1081H", 0x19, 0x7F);

    TEST(RET, "F",   0xFE, 0xD0);
    TEST(RET, "LT",  0xFE, 0xD1);
    TEST(RET, "LE",  0xFE, 0xD2);
    TEST(RET, "ULE", 0xFE, 0xD3);
    TEST(RET, "OV",  0xFE, 0xD4);
    TEST(RET, "MI",  0xFE, 0xD5);
    TEST(RET, "Z",   0xFE, 0xD6);
    TEST(RET, "C",   0xFE, 0xD7);
    TEST(RET, "",    0xFE, 0xD8);
    TEST(RET, "GE",  0xFE, 0xD9);
    TEST(RET, "GT",  0xFE, 0xDA);
    TEST(RET, "UGT", 0xFE, 0xDB);
    TEST(RET, "NOV", 0xFE, 0xDC);
    TEST(RET, "PL",  0xFE, 0xDD);
    TEST(RET, "NZ",  0xFE, 0xDE);
    TEST(RET, "NC",  0xFE, 0xDF);

    TEST(RET,  "", 0x1E);
    TEST(RET,  "", 0xFE, 0xD8);
    TEST(RETI, "", 0x1F);
}

static int prefix_operand(uint8_t prefix) {
    if (prefix == 0xE3 || prefix == 0xEB)
        return 2;               // extended
    if (prefix == 0xE7 || prefix == 0xEF)
        return 1;               // direct
    if (prefix >= 0xF0 && prefix <= 0xF2)
        return 1;               // indexed src
    if (prefix >= 0xF4 && prefix <= 0xF6)
        return 1;               // indexed dst
    return 0;
}

static void test_illegal(uint8_t prefix, uint8_t opc) {
    if ((prefix >= 0xE0 && prefix <= 0xE7) ||
            (prefix >= 0xF0 && prefix <= 0xF3)) {
        // src
        if (opc >= 0x10 && opc <= 0x1F && opc != 0x17)
            return;
        if (opc >= 0x28 && opc <= 0x2E)
            return;  // LD
        if (opc >= 0x48 && opc <= 0x4E && opc != 0x4B)
            return;  // LD
        if (opc >= 0x50 && opc <= 0x56 && opc != 0x53)
            return;  // EX
        if (opc >= 0x60 && opc <= 0x6F)
            return;  // Arithmetic
        if (opc >= 0x70 && opc <= 0x77)
            return;  // Arithmetic
        if (opc == 0x87 || opc == 0x8F || opc == 0x97 || opc == 0x9F)
            return;  // INC, DEC
        if (opc >= 0xA0 && opc <= 0xBF)
            return;  // Rotate, Shift, Bitops
    }

    if ((prefix >= 0xE8 && prefix <= 0xEF) ||
            (prefix >= 0xF4 && prefix <= 0xF7)) {
        // dst
        if (opc >= 0x20 && opc <= 0x26)
            return;  // LD
        if (opc >= 0x37 && opc <= 0x46 && opc != 0x3B && opc != 0x43)
            return;  // LD
        if (opc >= 0x68 && opc <= 0x6F)
            return;  // Arithmetic
        if (opc >= 0xC0 && opc <= 0xDF)
            return;  // JP, CALL
    }

    if (prefix >= 0xF0 && prefix <= 0xFE) {
        // reg
        if (opc == 0x12 || opc == 0x13)
            return;  // MUL, DIV
        if (opc >= 0x14 && opc <= 0x16 && prefix != 0xFB)
            return;  // ADD
        if (opc >= 0x18 && opc <= 0x1F)
            return;  // TEST
        if (opc >= 0x30 && opc <= 0x36)
            return;  // LD
        if (opc >= 0x38 && opc <= 0x3A && prefix != 0xFB)
            return;  // LD
        if (opc >= 0x3C && opc <= 0x3E)
            return;  // LD
        if (opc >= 0x60 && opc <= 0x6F)
            return;  // Arithmetic
        if (opc >= 0x70 && opc <= 0x7F && prefix != 0xFB)
            return;  // Arithmetic
        if (opc >= 0xA0 && opc <= 0xBF)
            return;  // Rotate, Shift, Bitops
    }

    if (prefix == 0xFE) {
        if (opc >= 0x58 && opc <= 0x5F)
            return;  // LDxx, CPxx
        if (opc >= 0xD0 && opc <= 0xDF)
            return;  // RET cc
    }

    switch (prefix_operand(prefix)) {
    case 2:
        ILLEGAL(prefix, 0, 0, opc);
        break;
    case 1:
        ILLEGAL(prefix, 0, opc);
        break;
    default:
        ILLEGAL(prefix, opc);
        break;
    }
}

static void test_illegal() {
    ILLEGAL(0x04);
    ILLEGAL(0x05);
    ILLEGAL(0x06);
    ILLEGAL(0x3B);
    ILLEGAL(0x43);
    ILLEGAL(0x4B);
    ILLEGAL(0x53);
    ILLEGAL(0x57);
    ILLEGAL(0x5B);
    ILLEGAL(0x5F);
    ILLEGAL(0x93);
    ILLEGAL(0x9B);

    for (uint8_t opc = 0xD0; opc <= 0xDF; opc++)
        ILLEGAL(opc);

    for (int i = 0; i < 256; i++) {
        const uint8_t opc = uint8_t(i);
        for (uint8_t prefix = 0xE0; prefix <= 0xFE; prefix++)
            test_illegal(prefix, opc);
    }
}
// clang-format on

void run_tests() {
    RUN_TEST(test_cpu);
    RUN_TEST(test_8bit_transfer);
    RUN_TEST(test_16bit_transfer);
    RUN_TEST(test_exchange);
    RUN_TEST(test_block);
    RUN_TEST(test_8bit_arithmetic);
    RUN_TEST(test_16bit_arithmetic);
    RUN_TEST(test_cpu_control);
    RUN_TEST(test_shift_rotate);
    RUN_TEST(test_bitops);
    RUN_TEST(test_jump_call);
    RUN_TEST(test_illegal);
}

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
