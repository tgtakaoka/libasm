/*
 * Copyright 2020 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "test_expr_helper.h"

using namespace libasm;
using namespace libasm::test;

MotoValueParser parser;
MotoValueFormatter formatter;

static void set_up() {
}

static void tear_down() {
    symtab.reset();
}

static void test_hex_constant() {
    E8("$0",  0x00, OK);
    E8("$7f", 0x7f, OK);
    E8("$80", 0x80, OK);
    E8("$FF", 0xff, OK);
    E8("$100", 0,    OVERFLOW_RANGE);

    E16("$0",    0x0000, OK);
    E16("$7fff", 0x7fff, OK);
    E16("$8000", 0x8000, OK);
    E16("$ffff", 0xffff, OK);
    E16("$10000", 0,      OVERFLOW_RANGE);

    E32("$0",        0x00000000, OK);
    E32("$7FFFFFFF", 0x7fffffff, OK);
    E32("$80000000", 0x80000000, OK);
    E32("$FFFFffff", 0xffffffff, OK);
    E32("$100000000", 0,          OVERFLOW_RANGE);
}

static void test_oct_constant() {
    E8("@0",   0x00, OK);
    E8("@177", 0x7f, OK);
    E8("@200", 0x80, OK);
    E8("@377", 0xff, OK);
    E8("@400", 0,    OVERFLOW_RANGE);

    E16("@0",      0x0000, OK);
    E16("@077777", 0x7fff, OK);
    E16("@100000", 0x8000, OK);
    E16("@177777", 0xffff, OK);
    E16("@200000", 0,      OVERFLOW_RANGE);

    E32("@0",           0x00000000, OK);
    E32("@17777777777", 0x7fffffff, OK);
    E32("@20000000000", 0x80000000, OK);
    E32("@37777777777", 0xffffffff, OK);
    E32("@40000000000", 0,          OVERFLOW_RANGE);
}

static void test_bin_constant() {
    E8("%0",        0x00, OK);
    E8("%01111111", 0x7f, OK);
    E8("%10000000", 0x80, OK);
    E8("%11111111", 0xff, OK);
    E8("100000000", 0,    OVERFLOW_RANGE);

    E16("%0",                0x0000, OK);
    E16("%0111111111111111", 0x7fff, OK);
    E16("%1000000000000000", 0x8000, OK);
    E16("%1111111111111111", 0xffff, OK);
    E16("%10000000000000000", 0,      OVERFLOW_RANGE);

    E32("%0",                                0x00000000, OK);
    E32("%01111111111111111111111111111111", 0x7fffffff, OK);
    E32("%10000000000000000000000000000000", 0x80000000, OK);
    E32("%11111111111111111111111111111111", 0xffffffff, OK);
    E32("%100000000000000000000000000000000", 0,          OVERFLOW_RANGE);
}

static void test_current_address() {
    symtab.setCurrentOrigin(0x1000);
    E16("*",       0x1000, OK);
    E16("*+2",     0x1002, OK);
    E16("*-2",     0x0FFE, OK);
    E16("*+$F000", 0,      OVERFLOW_RANGE);
    E16("*-$1001", 0xFFFF, OK);
    E32("*+$F000", 0x00010000, OK);
    E32("*-$1001", 0xFFFFFFFF, OK);

    symtab.intern(0x1000, "table");
    symtab.setCurrentOrigin(0x1100);
    E16("*-table",     0x100, OK);
    E16("(*-table)/2", 0x80,  OK);
}

static void test_errors() {
    E32("$bcdefg", 0, ILLEGAL_CONSTANT);
    E32("@345678", 0, ILLEGAL_CONSTANT);
    E32("%101012", 0, ILLEGAL_CONSTANT);
    E32("456789a", 0, ILLEGAL_CONSTANT);
}

static void test_formatter_8bit() {
    F8(0,     10, true,  "0");
    F8(32,    10, true,  "32");
    F8(128,   10, true,  "128");
    F8(255,   10, true,  "255");
    F8(256,   10, true,  "0");
    F8(-32,   10, true,  "224");
    F8(-128,  10, true,  "128");
    F8(-255,  10, true,  "1");
    F8(-256,  10, true,  "0");

    F8(0,    -10, true,  "0");
    F8(32,   -10, true,  "32");
    F8(128,  -10, true,  "-128");
    F8(255,  -10, true,  "-1");
    F8(256,  -10, true,  "0");
    F8(-32,  -10, true,  "-32");
    F8(-128, -10, true,  "-128");
    F8(-255, -10, true,  "1");
    F8(-256, -10, true,  "0");

    F8(0,     10, false, "0");
    F8(32,    10, false, "32");
    F8(128,   10, false, "128");
    F8(255,   10, false, "255");
    F8(256,   10, false, "0");
    F8(-32,   10, false, "224");
    F8(-128,  10, false, "128");
    F8(-255,  10, false, "1");
    F8(-256,  10, false, "0");

    F8(0,    -10, false, "0");
    F8(32,   -10, false, "32");
    F8(128,  -10, false, "-128");
    F8(255,  -10, false, "-1");
    F8(256,  -10, false, "0");
    F8(-32,  -10, false, "-32");
    F8(-128, -10, false, "-128");
    F8(-255, -10, false, "1");
    F8(-256, -10, false, "0");

    F8(0,     2, true,  "0");
    F8(32,    2, true,  "32");
    F8(33,    2, true,  "%00100001");
    F8(128,   2, true,  "%10000000");
    F8(255,   2, true,  "%11111111");
    F8(256,   2, true,  "0");
    F8(-32,   2, true,  "%11100000");
    F8(-33,   2, true,  "%11011111");
    F8(-128,  2, true,  "%10000000");
    F8(-255,  2, true,  "1");
    F8(-256,  2, true,  "0");

    F8(0,    -2, true,  "0");
    F8(32,   -2, true,  "32");
    F8(33,   -2, true,  "%00100001");
    F8(128,  -2, true,  "-%10000000");
    F8(255,  -2, true,  "-1");
    F8(256,  -2, true,  "0");
    F8(-32,  -2, true,  "-32");
    F8(-33,  -2, true,  "-%00100001");
    F8(-128, -2, true,  "-%10000000");
    F8(-255, -2, true,  "1");
    F8(-256, -2, true,  "0");

    F8(0,     2, false, "%00000000");
    F8(32,    2, false, "%00100000");
    F8(128,   2, false, "%10000000");
    F8(255,   2, false, "%11111111");
    F8(256,   2, false, "%00000000");
    F8(-32,   2, false, "%11100000");
    F8(-128,  2, false, "%10000000");
    F8(-255,  2, false, "%00000001");
    F8(-256,  2, false, "%00000000");

    F8(0,    -2, false, "%00000000");
    F8(32,   -2, false, "%00100000");
    F8(128,  -2, false, "-%10000000");
    F8(255,  -2, false, "-%00000001");
    F8(256,  -2, false, "%00000000");
    F8(-32,  -2, false, "-%00100000");
    F8(-128, -2, false, "-%10000000");
    F8(-255, -2, false, "%00000001");
    F8(-256, -2, false, "%00000000");

    F8(0,     8, true,  "0");
    F8(32,    8, true,  "32");
    F8(33,    8, true,  "@041");
    F8(128,   8, true,  "@200");
    F8(255,   8, true,  "@377");
    F8(256,   8, true,  "0");
    F8(-32,   8, true,  "@340");
    F8(-33,   8, true,  "@337");
    F8(-128,  8, true,  "@200");
    F8(-255,  8, true,  "1");
    F8(-256,  8, true,  "0");

    F8(0,    -8, true,  "0");
    F8(32,   -8, true,  "32");
    F8(33,   -8, true,  "@041");
    F8(128,  -8, true,  "-@200");
    F8(255,  -8, true,  "-1");
    F8(256,  -8, true,  "0");
    F8(-32,  -8, true,  "-32");
    F8(-33,  -8, true,  "-@041");
    F8(-128, -8, true,  "-@200");
    F8(-255, -8, true,  "1");
    F8(-256, -8, true,  "0");

    F8(0,     8, false, "@000");
    F8(32,    8, false, "@040");
    F8(128,   8, false, "@200");
    F8(255,   8, false, "@377");
    F8(256,   8, false, "@000");
    F8(-32,   8, false, "@340");
    F8(-128,  8, false, "@200");
    F8(-255,  8, false, "@001");
    F8(-256,  8, false, "@000");

    F8(0,    -8, false, "@000");
    F8(32,   -8, false, "@040");
    F8(128,  -8, false, "-@200");
    F8(255,  -8, false, "-@001");
    F8(256,  -8, false, "@000");
    F8(-32,  -8, false, "-@040");
    F8(-128, -8, false, "-@200");
    F8(-255, -8, false, "@001");
    F8(-256, -8, false, "@000");

    F8(0,    16, true,  "0");
    F8(32,   16, true,  "32");
    F8(33,   16, true,  "$21");
    F8(128,  16, true,  "$80");
    F8(255,  16, true,  "$ff");
    F8(256,  16, true,  "0");
    F8(-32,  16, true,  "$e0");
    F8(-33,  16, true,  "$df");
    F8(-128, 16, true,  "$80");
    F8(-255, 16, true,  "1");
    F8(-256, 16, true,  "0");

    F8(0,   -16, true,  "0");
    F8(32,  -16, true,  "32");
    F8(33,  -16, true,  "$21");
    F8(128, -16, true,  "-$80");
    F8(255, -16, true,  "-1");
    F8(256, -16, true,  "0");
    F8(-32, -16, true,  "-32");
    F8(-33, -16, true,  "-$21");
    F8(-128,-16, true,  "-$80");
    F8(-255,-16, true,  "1");
    F8(-256,-16, true,  "0");

    F8(0,    16, false, "$00");
    F8(32,   16, false, "$20");
    F8(128,  16, false, "$80");
    F8(255,  16, false, "$ff");
    F8(256,  16, false, "$00");
    F8(-32,  16, false, "$e0");
    F8(-128, 16, false, "$80");
    F8(-255, 16, false, "$01");
    F8(-256, 16, false, "$00");

    F8(0,   -16, false, "$00");
    F8(32,  -16, false, "$20");
    F8(128, -16, false, "-$80");
    F8(255, -16, false, "-$01");
    F8(256, -16, false, "$00");
    F8(-32, -16, false, "-$20");
    F8(-128,-16, false, "-$80");
    F8(-255,-16, false, "$01");
    F8(-256,-16, false, "$00");
}

static void test_formatter_16bit() {
    F16(0,         10, true,  "0");
    F16(32,        10, true,  "32");
    F16(0x8000,    10, true,  "32768");
    F16(0xffff,    10, true,  "65535");
    F16(0x10000,   10, true,  "0");
    F16(-32,       10, true,  "65504");
    F16(-0x8000,   10, true,  "32768");
    F16(-0xffff,   10, true,  "1");
    F16(-0x10000,  10, true,  "0");

    F16(0,        -10, true,  "0");
    F16(32,       -10, true,  "32");
    F16(0x8000,   -10, true,  "-32768");
    F16(0xffff,   -10, true,  "-1");
    F16(0x10000,  -10, true,  "0");
    F16(-32,      -10, true,  "-32");
    F16(-0x8000,  -10, true,  "-32768");
    F16(-0xffff,  -10, true,  "1");
    F16(-0x10000, -10, true,  "0");

    F16(0,         10, false, "0");
    F16(32,        10, false, "32");
    F16(0x8000,    10, false, "32768");
    F16(0xffff,    10, false, "65535");
    F16(0x10000,   10, false, "0");
    F16(-32,       10, false, "65504");
    F16(-0x8000,   10, false, "32768");
    F16(-0xffff,   10, false, "1");
    F16(-0x10000,  10, false, "0");

    F16(0,        -10, false, "0");
    F16(32,       -10, false, "32");
    F16(0x8000,   -10, false, "-32768");
    F16(0xffff,   -10, false, "-1");
    F16(0x10000,  -10, false, "0");
    F16(-32,      -10, false, "-32");
    F16(-0x8000,  -10, false, "-32768");
    F16(-0xffff,  -10, false, "1");
    F16(-0x10000, -10, false, "0");

    F16(0,          2, true,  "0");
    F16(32,         2, true,  "32");
    F16(33,         2, true,  "%0000000000100001");
    F16(0x8000,     2, true,  "%1000000000000000");
    F16(0xffff,     2, true,  "%1111111111111111");
    F16(0x10000,    2, true,  "0");
    F16(-32,        2, true,  "%1111111111100000");
    F16(-33,        2, true,  "%1111111111011111");
    F16(-0x8000,    2, true,  "%1000000000000000");
    F16(-0xffff,    2, true,  "1");
    F16(-0x10000,   2, true,  "0");

    F16(0,         -2, true,  "0");
    F16(32,        -2, true,  "32");
    F16(33,        -2, true,  "%0000000000100001");
    F16(0x8000,    -2, true,  "-%1000000000000000");
    F16(0xffff,    -2, true,  "-1");
    F16(0x10000,   -2, true,  "0");
    F16(-32,       -2, true,  "-32");
    F16(-33,       -2, true,  "-%0000000000100001");
    F16(-0x8000,   -2, true,  "-%1000000000000000");
    F16(-0xffff,   -2, true,  "1");
    F16(-0x10000,  -2, true,  "0");

    F16(0,          2, false, "%0000000000000000");
    F16(32,         2, false, "%0000000000100000");
    F16(0x8000,     2, false, "%1000000000000000");
    F16(0xffff,     2, false, "%1111111111111111");
    F16(0x10000,    2, false, "%0000000000000000");
    F16(-32,        2, false, "%1111111111100000");
    F16(-0x8000,    2, false, "%1000000000000000");
    F16(-0xffff,    2, false, "%0000000000000001");
    F16(-0x10000,   2, false, "%0000000000000000");

    F16(0,         -2, false, "%0000000000000000");
    F16(32,        -2, false, "%0000000000100000");
    F16(0x8000,    -2, false, "-%1000000000000000");
    F16(0xffff,    -2, false, "-%0000000000000001");
    F16(0x10000,   -2, false, "%0000000000000000");
    F16(-32,       -2, false, "-%0000000000100000");
    F16(-0x8000,   -2, false, "-%1000000000000000");
    F16(-0xffff,   -2, false, "%0000000000000001");
    F16(-0x10000,  -2, false, "%0000000000000000");

    F16(0,          8, true,  "0");
    F16(32,         8, true,  "32");
    F16(33,         8, true,  "@000041");
    F16(0x8000,     8, true,  "@100000");
    F16(0xffff,     8, true,  "@177777");
    F16(0x10000,    8, true,  "0");
    F16(-32,        8, true,  "@177740");
    F16(-33,        8, true,  "@177737");
    F16(-0x8000,    8, true,  "@100000");
    F16(-0xffff,    8, true,  "1");
    F16(-0x10000,   8, true,  "0");

    F16(0,         -8, true,  "0");
    F16(32,        -8, true,  "32");
    F16(33,        -8, true,  "@000041");
    F16(0x8000,    -8, true,  "-@100000");
    F16(0xffff,    -8, true,  "-1");
    F16(0x10000,   -8, true,  "0");
    F16(-32,       -8, true,  "-32");
    F16(-33,       -8, true,  "-@000041");
    F16(-0x8000,   -8, true,  "-@100000");
    F16(-0xffff,   -8, true,  "1");
    F16(-0x10000,  -8, true,  "0");

    F16(0,          8, false, "@000000");
    F16(32,         8, false, "@000040");
    F16(0x8000,     8, false, "@100000");
    F16(0xffff,     8, false, "@177777");
    F16(0x10000,    8, false, "@000000");
    F16(-32,        8, false, "@177740");
    F16(-0x8000,    8, false, "@100000");
    F16(-0xffff,    8, false, "@000001");
    F16(-0x10000,   8, false, "@000000");

    F16(0,         -8, false, "@000000");
    F16(32,        -8, false, "@000040");
    F16(0x8000,    -8, false, "-@100000");
    F16(0xffff,    -8, false, "-@000001");
    F16(0x10000,   -8, false, "@000000");
    F16(-32,       -8, false, "-@000040");
    F16(-0x8000,   -8, false, "-@100000");
    F16(-0xffff,   -8, false, "@000001");
    F16(-0x10000,  -8, false, "@000000");

    F16(0,         16, true,  "0");
    F16(32,        16, true,  "32");
    F16(33,        16, true,  "$0021");
    F16(0x8000,    16, true,  "$8000");
    F16(0xffff,    16, true,  "$ffff");
    F16(0x10000,   16, true,  "0");
    F16(-32,       16, true,  "$ffe0");
    F16(-33,       16, true,  "$ffdf");
    F16(-0x8000,   16, true,  "$8000");
    F16(-0xffff,   16, true,  "1");
    F16(-0x10000,  16, true,  "0");

    F16(0,        -16, true,  "0");
    F16(32,       -16, true,  "32");
    F16(33,       -16, true,  "$0021");
    F16(0x8000,   -16, true,  "-$8000");
    F16(0xffff,   -16, true,  "-1");
    F16(0x10000,  -16, true,  "0");
    F16(-32,      -16, true,  "-32");
    F16(-33,      -16, true,  "-$0021");
    F16(-0x8000,  -16, true,  "-$8000");
    F16(-0xffff,  -16, true,  "1");
    F16(-0x10000, -16, true,  "0");

    F16(0,         16, false, "$0000");
    F16(32,        16, false, "$0020");
    F16(0x8000,    16, false, "$8000");
    F16(0xffff,    16, false, "$ffff");
    F16(0x10000,   16, false, "$0000");
    F16(-32,       16, false, "$ffe0");
    F16(-0x8000,   16, false, "$8000");
    F16(-0xffff,   16, false, "$0001");
    F16(-0x10000,  16, false, "$0000");

    F16(0,        -16, false, "$0000");
    F16(32,       -16, false, "$0020");
    F16(0x8000,   -16, false, "-$8000");
    F16(0xffff,   -16, false, "-$0001");
    F16(0x10000,  -16, false, "$0000");
    F16(-32,      -16, false, "-$0020");
    F16(-0x8000,  -16, false, "-$8000");
    F16(-0xffff,  -16, false, "$0001");
    F16(-0x10000, -16, false, "$0000");
}

static void test_formatter_24bit() {
    F24(0,           10, true,  "0");
    F24(32,          10, true,  "32");
    F24(0x800000,    10, true,  "8388608");
    F24(0xffffff,    10, true,  "16777215");
    F24(0x1000000,   10, true,  "0");
    F24(-32,         10, true,  "16777184");
    F24(-0x800000,   10, true,  "8388608");
    F24(-0xffffff,   10, true,  "1");
    F24(-0x1000000,  10, true,  "0");

    F24(0,          -10, true,  "0");
    F24(32,         -10, true,  "32");
    F24(0x800000,   -10, true,  "-8388608");
    F24(0xffffff,   -10, true,  "-1");
    F24(0x1000000,  -10, true,  "0");
    F24(-32,        -10, true,  "-32");
    F24(-0x800000,  -10, true,  "-8388608");
    F24(-0xffffff,  -10, true,  "1");
    F24(-0x1000000, -10, true,  "0");

    F24(0,           10, false, "0");
    F24(32,          10, false, "32");
    F24(0x800000,    10, false, "8388608");
    F24(0xffffff,    10, false, "16777215");
    F24(0x1000000,   10, false, "0");
    F24(-32,         10, false, "16777184");
    F24(-0x800000,   10, false, "8388608");
    F24(-0xffffff,   10, false, "1");
    F24(-0x1000000,  10, false, "0");

    F24(0,          -10, false, "0");
    F24(32,         -10, false, "32");
    F24(0x800000,   -10, false, "-8388608");
    F24(0xffffff,   -10, false, "-1");
    F24(0x1000000,  -10, false, "0");
    F24(-32,        -10, false, "-32");
    F24(-0x800000,  -10, false, "-8388608");
    F24(-0xffffff,  -10, false, "1");
    F24(-0x1000000, -10, false, "0");

    F24(0,            2, true,  "0");
    F24(32,           2, true,  "32");
    F24(33,           2, true,  "%000000000000000000100001");
    F24(0x800000,     2, true,  "%100000000000000000000000");
    F24(0xffffff,     2, true,  "%111111111111111111111111");
    F24(0x1000000,    2, true,  "0");
    F24(-32,          2, true,  "%111111111111111111100000");
    F24(-33,          2, true,  "%111111111111111111011111");
    F24(-0x800000,    2, true,  "%100000000000000000000000");
    F24(-0xffffff,    2, true,  "1");
    F24(-0x1000000,   2, true,  "0");

    F24(0,           -2, true,  "0");
    F24(32,          -2, true,  "32");
    F24(33,          -2, true,  "%000000000000000000100001");
    F24(0x800000,    -2, true,  "-%100000000000000000000000");
    F24(0xffffff,    -2, true,  "-1");
    F24(0x1000000,   -2, true,  "0");
    F24(-32,         -2, true,  "-32");
    F24(-33,         -2, true,  "-%000000000000000000100001");
    F24(-0x800000,   -2, true,  "-%100000000000000000000000");
    F24(-0xffffff,   -2, true,  "1");
    F24(-0x1000000,  -2, true,  "0");

    F24(0,            2, false, "%000000000000000000000000");
    F24(32,           2, false, "%000000000000000000100000");
    F24(0x800000,     2, false, "%100000000000000000000000");
    F24(0xffffff,     2, false, "%111111111111111111111111");
    F24(0x1000000,    2, false, "%000000000000000000000000");
    F24(-32,          2, false, "%111111111111111111100000");
    F24(-0x800000,    2, false, "%100000000000000000000000");
    F24(-0xffffff,    2, false, "%000000000000000000000001");
    F24(-0x1000000,   2, false, "%000000000000000000000000");

    F24(0,           -2, false, "%000000000000000000000000");
    F24(32,          -2, false, "%000000000000000000100000");
    F24(0x800000,    -2, false, "-%100000000000000000000000");
    F24(0xffffff,    -2, false, "-%000000000000000000000001");
    F24(0x1000000,   -2, false, "%000000000000000000000000");
    F24(-32,         -2, false, "-%000000000000000000100000");
    F24(-0x800000,   -2, false, "-%100000000000000000000000");
    F24(-0xffffff,   -2, false, "%000000000000000000000001");
    F24(-0x1000000,  -2, false, "%000000000000000000000000");

    F24(0,            8, true,  "0");
    F24(32,           8, true,  "32");
    F24(33,           8, true,  "@00000041");
    F24(0x800000,     8, true,  "@40000000");
    F24(0xffffff,     8, true,  "@77777777");
    F24(0x1000000,    8, true,  "0");
    F24(-32,          8, true,  "@77777740");
    F24(-33,          8, true,  "@77777737");
    F24(-0x800000,    8, true,  "@40000000");
    F24(-0xffffff,    8, true,  "1");
    F24(-0x1000000,   8, true,  "0");

    F24(0,           -8, true,  "0");
    F24(32,          -8, true,  "32");
    F24(33,          -8, true,  "@00000041");
    F24(0x800000,    -8, true,  "-@40000000");
    F24(0xffffff,    -8, true,  "-1");
    F24(0x1000000,   -8, true,  "0");
    F24(-32,         -8, true,  "-32");
    F24(-33,         -8, true,  "-@00000041");
    F24(-0x800000,   -8, true,  "-@40000000");
    F24(-0xffffff,   -8, true,  "1");
    F24(-0x1000000,  -8, true,  "0");

    F24(0,            8, false, "@00000000");
    F24(32,           8, false, "@00000040");
    F24(0x800000,     8, false, "@40000000");
    F24(0xffffff,     8, false, "@77777777");
    F24(0x1000000,    8, false, "@00000000");
    F24(-32,          8, false, "@77777740");
    F24(-0x800000,    8, false, "@40000000");
    F24(-0xffffff,    8, false, "@00000001");
    F24(-0x1000000,   8, false, "@00000000");

    F24(0,           -8, false, "@00000000");
    F24(32,          -8, false, "@00000040");
    F24(0x800000,    -8, false, "-@40000000");
    F24(0xffffff,    -8, false, "-@00000001");
    F24(0x1000000,   -8, false, "@00000000");
    F24(-32,         -8, false, "-@00000040");
    F24(-0x800000,   -8, false, "-@40000000");
    F24(-0xffffff,   -8, false, "@00000001");
    F24(-0x1000000,  -8, false, "@00000000");

    F24(0,           16, true,  "0");
    F24(32,          16, true,  "32");
    F24(33,          16, true,  "$000021");
    F24(0x800000,    16, true,  "$800000");
    F24(0xffffff,    16, true,  "$ffffff");
    F24(0x1000000,   16, true,  "0");
    F24(-32,         16, true,  "$ffffe0");
    F24(-33,         16, true,  "$ffffdf");
    F24(-0x800000,   16, true,  "$800000");
    F24(-0xffffff,   16, true,  "1");
    F24(-0x1000000,  16, true,  "0");

    F24(0,          -16, true,  "0");
    F24(32,         -16, true,  "32");
    F24(33,         -16, true,  "$000021");
    F24(0x800000,   -16, true,  "-$800000");
    F24(0xffffff,   -16, true,  "-1");
    F24(0x1000000,  -16, true,  "0");
    F24(-32,        -16, true,  "-32");
    F24(-33,        -16, true,  "-$000021");
    F24(-0x800000,  -16, true,  "-$800000");
    F24(-0xffffff,  -16, true,  "1");
    F24(-0x1000000, -16, true,  "0");

    F24(0,           16, false, "$000000");
    F24(32,          16, false, "$000020");
    F24(0x800000,    16, false, "$800000");
    F24(0xffffff,    16, false, "$ffffff");
    F24(0x1000000,   16, false, "$000000");
    F24(-32,         16, false, "$ffffe0");
    F24(-0x800000,   16, false, "$800000");
    F24(-0xffffff,   16, false, "$000001");
    F24(-0x1000000,  16, false, "$000000");

    F24(0,          -16, false, "$000000");
    F24(32,         -16, false, "$000020");
    F24(0x800000,   -16, false, "-$800000");
    F24(0xffffff,   -16, false, "-$000001");
    F24(0x1000000,  -16, false, "$000000");
    F24(-32,        -16, false, "-$000020");
    F24(-0x800000,  -16, false, "-$800000");
    F24(-0xffffff,  -16, false, "$000001");
    F24(-0x1000000, -16, false, "$000000");
}

static void test_formatter_32bit() {
    F32(0,            10, true, "0");
    F32(32,           10, true, "32");
    F32(0x80000000,   10, true, "2147483648");
    F32(0xffffffff,   10, true, "4294967295");
    F32(-32,          10, true, "4294967264");
    F32(-0x80000000,  10, true, "2147483648");
    F32(-0xffffffff,  10, true, "1");

    F32(0,           -10, true, "0");
    F32(32,          -10, true, "32");
    F32(0x80000000,  -10, true, "-2147483648");
    F32(0xffffffff,  -10, true, "-1");
    F32(-32,         -10, true, "-32");
    F32(-0x80000000, -10, true, "-2147483648");
    F32(-0xffffffff, -10, true, "1");

    F32(0,            10, false, "0");
    F32(32,           10, false, "32");
    F32(0x80000000,   10, false, "2147483648");
    F32(0xffffffff,   10, false, "4294967295");
    F32(-32,          10, false, "4294967264");
    F32(-0x80000000,  10, false, "2147483648");
    F32(-0xffffffff,  10, false, "1");

    F32(0,           -10, false, "0");
    F32(32,          -10, false, "32");
    F32(0x80000000,  -10, false, "-2147483648");
    F32(0xffffffff,  -10, false, "-1");
    F32(-32,         -10, false, "-32");
    F32(-0x80000000, -10, false, "-2147483648");
    F32(-0xffffffff, -10, false, "1");

    F32(0,            2, true,  "0");
    F32(32,           2, true,  "32");
    F32(33,           2, true,  "%00000000000000000000000000100001");
    F32(0x80000000,   2, true,  "%10000000000000000000000000000000");
    F32(0xffffffff,   2, true,  "%11111111111111111111111111111111");
    F32(-32,          2, true,  "%11111111111111111111111111100000");
    F32(-33,          2, true,  "%11111111111111111111111111011111");
    F32(-0x80000000,  2, true,  "%10000000000000000000000000000000");
    F32(-0xffffffff,  2, true,  "1");

    F32(0,           -2, true,  "0");
    F32(32,          -2, true,  "32");
    F32(33,          -2, true,  "%00000000000000000000000000100001");
    F32(0x80000000,  -2, true,  "-%10000000000000000000000000000000");
    F32(0xffffffff,  -2, true,  "-1");
    F32(-32,         -2, true,  "-32");
    F32(-33,         -2, true,  "-%00000000000000000000000000100001");
    F32(-0x80000000, -2, true,  "-%10000000000000000000000000000000");
    F32(-0xffffffff, -2, true,  "1");

    F32(0,            2, false, "%00000000000000000000000000000000");
    F32(32,           2, false, "%00000000000000000000000000100000");
    F32(0x80000000,   2, false, "%10000000000000000000000000000000");
    F32(0xffffffff,   2, false, "%11111111111111111111111111111111");
    F32(-32,          2, false, "%11111111111111111111111111100000");
    F32(-0x80000000,  2, false, "%10000000000000000000000000000000");
    F32(-0xffffffff,  2, false, "%00000000000000000000000000000001");

    F32(0,           -2, false, "%00000000000000000000000000000000");
    F32(32,          -2, false, "%00000000000000000000000000100000");
    F32(0x80000000,  -2, false, "-%10000000000000000000000000000000");
    F32(0xffffffff,  -2, false, "-%00000000000000000000000000000001");
    F32(-32,         -2, false, "-%00000000000000000000000000100000");
    F32(-0x80000000, -2, false, "-%10000000000000000000000000000000");
    F32(-0xffffffff, -2, false, "%00000000000000000000000000000001");

    F32(0,            8, true,  "0");
    F32(32,           8, true,  "32");
    F32(33,           8, true,  "@00000000041");
    F32(0x80000000,   8, true,  "@20000000000");
    F32(0xffffffff,   8, true,  "@37777777777");
    F32(-32,          8, true,  "@37777777740");
    F32(-33,          8, true,  "@37777777737");
    F32(-0x80000000,  8, true,  "@20000000000");
    F32(-0xffffffff,  8, true,  "1");

    F32(0,           -8, true,  "0");
    F32(32,          -8, true,  "32");
    F32(33,          -8, true,  "@00000000041");
    F32(0x80000000,  -8, true,  "-@20000000000");
    F32(0xffffffff,  -8, true,  "-1");
    F32(-32,         -8, true,  "-32");
    F32(-33,         -8, true,  "-@00000000041");
    F32(-0x80000000, -8, true,  "-@20000000000");
    F32(-0xffffffff, -8, true,  "1");

    F32(0,            8, false, "@00000000000");
    F32(32,           8, false, "@00000000040");
    F32(0x80000000,   8, false, "@20000000000");
    F32(0xffffffff,   8, false, "@37777777777");
    F32(-32,          8, false, "@37777777740");
    F32(-0x80000000,  8, false, "@20000000000");
    F32(-0xffffffff,  8, false, "@00000000001");

    F32(0,           -8, false, "@00000000000");
    F32(32,          -8, false, "@00000000040");
    F32(0x80000000,  -8, false, "-@20000000000");
    F32(0xffffffff,  -8, false, "-@00000000001");
    F32(-32,         -8, false, "-@00000000040");
    F32(-0x80000000, -8, false, "-@20000000000");
    F32(-0xffffffff, -8, false, "@00000000001");

    F32(0,           16, true,  "0");
    F32(32,          16, true,  "32");
    F32(33,          16, true,  "$00000021");
    F32(0x80000000,  16, true,  "$80000000");
    F32(0xffffffff,  16, true,  "$ffffffff");
    F32(-32,         16, true,  "$ffffffe0");
    F32(-33,         16, true,  "$ffffffdf");
    F32(-0x80000000, 16, true,  "$80000000");
    F32(-0xffffffff, 16, true,  "1");

    F32(0,           -16, true,  "0");
    F32(32,          -16, true,  "32");
    F32(33,          -16, true,  "$00000021");
    F32(0x80000000,  -16, true,  "-$80000000");
    F32(0xffffffff,  -16, true,  "-1");
    F32(-32,         -16, true,  "-32");
    F32(-33,         -16, true,  "-$00000021");
    F32(-0x80000000, -16, true,  "-$80000000");
    F32(-0xffffffff, -16, true,  "1");

    F32(0,           16, false,  "$00000000");
    F32(32,          16, false,  "$00000020");
    F32(0x80000000,  16, false,  "$80000000");
    F32(0xffffffff,  16, false,  "$ffffffff");
    F32(-32,         16, false,  "$ffffffe0");
    F32(-0x80000000, 16, false,  "$80000000");
    F32(-0xffffffff, 16, false,  "$00000001");

    F32(0,           -16, false, "$00000000");
    F32(32,          -16, false, "$00000020");
    F32(0x80000000,  -16, false, "-$80000000");
    F32(0xffffffff,  -16, false, "-$00000001");
    F32(-32,         -16, false, "-$00000020");
    F32(-0x80000000, -16, false, "-$80000000");
    F32(-0xffffffff, -16, false, "$00000001");
}

void run_tests() {
    RUN_TEST(test_hex_constant);
    RUN_TEST(test_oct_constant);
    RUN_TEST(test_bin_constant);
    RUN_TEST(test_current_address);
    RUN_TEST(test_errors);
    RUN_TEST(test_formatter_8bit);
    RUN_TEST(test_formatter_16bit);
    RUN_TEST(test_formatter_24bit);
    RUN_TEST(test_formatter_32bit);
}

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
