/*
 * Copyright 2025 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "dis_mc68hc12.h"
#include "test_dis_helper.h"
#include "test_symtab.h"

using namespace libasm;
using namespace libasm::mc68hc12;
using namespace libasm::test;

DisMc68HC12 dis6812;
Disassembler &disassembler(dis6812);

void set_up() {
    disassembler.reset();
}

void tear_down() {
    symtab.reset();
}

// clang-format off
void test_cpu() {
    EQUALS("cpu 68hc12", true, disassembler.setCpu("68hc12"));
    EQUALS_P("cpu 68hc12", "68HC12", disassembler.config().cpu_P());

    EQUALS("cpu MC68HC12", true, disassembler.setCpu("MC68HC12"));
    EQUALS_P("cpu MC68HC12", "68HC12", disassembler.config().cpu_P());
}

void test_load() {
    TEST("LDAA", "#$87",  0x86, 0x87);
    TEST("LDAA", "$97",   0x96, 0x97);
    TEST("LDAA", "8,+SP", 0xA6, 0xA7);
    TEST("LDAA", "$B7B8", 0xB6, 0xB7, 0xB8);

    TEST("LDAB", "#$C7",  0xC6, 0xC7);
    TEST("LDAB", "$D7",   0xD6, 0xD7);
    TEST("LDAB", "[D,X]", 0xE6, 0xE7);
    TEST("LDAB", "$F7F8", 0xF6, 0xF7, 0xF8);

    TEST("LDD", "#$CDCE", 0xCC, 0xCD, 0xCE);
    TEST("LDD", "$DD",    0xDC, 0xDD);
    TEST("LDD", "B,Y",    0xEC, 0xED);
    TEST("LDD", "$FDFE",  0xFC, 0xFD, 0xFE);

    TEST("LDS", "#$D0D1", 0xCF, 0xD0, 0xD1);
    TEST("LDS", "$E0",    0xDF, 0xE0);
    TEST("LDS", "$F1,SP", 0xEF, 0xF0, 0xF1);
    TEST("LDS", "$0001",  0xFF, 0x00, 0x01);

    TEST("LDX", "#$CFD0", 0xCE, 0xCF, 0xD0);
    TEST("LDX", "$DF",    0xDE, 0xDF);
    TEST("LDX", "[D,Y]",  0xEE, 0xEF);
    TEST("LDX", "$FF00",  0xFE, 0xFF, 0x00);

    TEST("LDY", "#$CECF", 0xCD, 0xCE, 0xCF);
    TEST("LDY", "$DE",    0xDD, 0xDE);
    TEST("LDY", "D,Y",    0xED, 0xEE);
    TEST("LDY", "$FEFF",  0xFD, 0xFE, 0xFF);

    TEST("LEAS", "-4,X", 0x1B, 0x1C);
    TEST("LEAX", "-5,X", 0x1A, 0x1B);
    TEST("LEAY", "-6,X", 0x19, 0x1A);
    ERRT("LEAY", "[$E4E5,X]",  OPERAND_NOT_ALLOWED, "[$E4E5,X]",  0x19, 0xE3, 0xE4, 0xE5);
    ERRT("LEAY", "[$ECED,Y]",  OPERAND_NOT_ALLOWED, "[$ECED,Y]",  0x19, 0xEB, 0xEC, 0xED);
    ERRT("LEAY", "[$F4F5,SP]", OPERAND_NOT_ALLOWED, "[$F4F5,SP]", 0x19, 0xF3, 0xF4, 0xF5);
    AERRT(0x1000, "LEAY", "[$2004,PC]",
          OPERAND_NOT_ALLOWED, "[$2004,PC]", 0x19, 0xFB, 0x10, 0x00);
    ERRT("LEAY", "[D,X]",  OPERAND_NOT_ALLOWED, "[D,X]",  0x19, 0xE7);
    ERRT("LEAY", "[D,Y]",  OPERAND_NOT_ALLOWED, "[D,Y]",  0x19, 0xEF);
    ERRT("LEAY", "[D,SP]", OPERAND_NOT_ALLOWED, "[D,SP]", 0x19, 0xF7);
    ERRT("LEAY", "[D,PC]", OPERAND_NOT_ALLOWED, "[D,PC]", 0x19, 0xFF);
}

void test_store() {
    TEST("STAA", "$5B",   0x5A, 0x5B);
    TEST("STAA", "5,-Y",  0x6A, 0x6B);
    TEST("STAA", "$7B7C", 0x7A, 0x7B, 0x7C);

    TEST("STAB", "$5C",   0x5B, 0x5C);
    TEST("STAB", "4,-Y",  0x6B, 0x6C);
    TEST("STAB", "$7C7D", 0x7B, 0x7C, 0x7D);

    TEST("STD", "$5D",   0x5C, 0x5D);
    TEST("STD", "3,-Y",  0x6C, 0x6D);
    TEST("STD", "$7D7E", 0x7C, 0x7D, 0x7E);

    TEST("STS", "$60",   0x5F, 0x60);
    TEST("STS", "1,Y+",  0x6F, 0x70);
    TEST("STS", "$8081", 0x7F, 0x80, 0x81);

    TEST("STX", "$5F",   0x5E, 0x5F);
    TEST("STX", "1,-Y",  0x6E, 0x6F);
    TEST("STX", "$7F80", 0x7E, 0x7F, 0x80);

    TEST("STY", "$5E",    0x5D, 0x5E);
    TEST("STY", "2,-Y",   0x6D, 0x6E);
    TEST("STY", "$7E7F",  0x7D, 0x7E, 0x7F);
}

void test_transfer() {
    TEST("TAB", "", 0x18, 0x0E);
    TEST("TBA", "", 0x18, 0x0F);

    TEST("TFR", "A, A",   0xB7, 0x00);
    TEST("TFR", "A, B",   0xB7, 0x01);
    TEST("TFR", "A, CCR", 0xB7, 0x02);
    TEST("SEX", "A, D",   0xB7, 0x04);
    TEST("SEX", "A, X",   0xB7, 0x05);
    TEST("SEX", "A, Y",   0xB7, 0x06);
    TEST("SEX", "A, SP",  0xB7, 0x07);
    // TAP

    TEST("TFR", "B, A",   0xB7, 0x10);
    TEST("TFR", "B, B",   0xB7, 0x11);
    TEST("TFR", "B, CCR", 0xB7, 0x12);
    TEST("SEX", "B, D",   0xB7, 0x14);
    TEST("SEX", "B, X",   0xB7, 0x15);
    TEST("SEX", "B, Y",   0xB7, 0x16);
    TEST("SEX", "B, SP",  0xB7, 0x17);

    TEST("TFR", "CCR, A",   0xB7, 0x20);
    TEST("TFR", "CCR, B",   0xB7, 0x21);
    TEST("TFR", "CCR, CCR", 0xB7, 0x22);
    TEST("SEX", "CCR, D",   0xB7, 0x24);
    TEST("SEX", "CCR, X",   0xB7, 0x25);
    TEST("SEX", "CCR, Y",   0xB7, 0x26);
    TEST("SEX", "CCR, SP",  0xB7, 0x27);
    // TPA

    TEST("TFR", "D, A",   0xB7, 0x40);
    TEST("TFR", "D, B",   0xB7, 0x41);
    TEST("TFR", "D, CCR", 0xB7, 0x42);
    TEST("TFR", "D, D",   0xB7, 0x44);
    TEST("TFR", "D, X",   0xB7, 0x45);
    TEST("TFR", "D, Y",   0xB7, 0x46);
    TEST("TFR", "D, SP",  0xB7, 0x47);

    TEST("TFR", "X, A",   0xB7, 0x50);
    TEST("TFR", "X, B",   0xB7, 0x51);
    TEST("TFR", "X, CCR", 0xB7, 0x52);
    TEST("TFR", "X, D",   0xB7, 0x54);
    TEST("TFR", "X, X",   0xB7, 0x55);
    TEST("TFR", "X, Y",   0xB7, 0x56);
    TEST("TFR", "X, SP",  0xB7, 0x57);
    // TXS

    TEST("TFR", "Y, A",   0xB7, 0x60);
    TEST("TFR", "Y, B",   0xB7, 0x61);
    TEST("TFR", "Y, CCR", 0xB7, 0x62);
    TEST("TFR", "Y, D",   0xB7, 0x64);
    TEST("TFR", "Y, X",   0xB7, 0x65);
    TEST("TFR", "Y, Y",   0xB7, 0x66);
    TEST("TFR", "Y, SP",  0xB7, 0x67);
    // TYS

    TEST("TFR", "SP, A",   0xB7, 0x70);
    TEST("TFR", "SP, B",   0xB7, 0x71);
    TEST("TFR", "SP, CCR", 0xB7, 0x72);
    TEST("TFR", "SP, D",   0xB7, 0x74);
    TEST("TFR", "SP, X",   0xB7, 0x75);
    TEST("TFR", "SP, Y",   0xB7, 0x76);
    TEST("TFR", "SP, SP",  0xB7, 0x77);
    // TSX
    // TSY
}

void test_exchange() {
    TEST("EXG", "A, A",   0xB7, 0x80);
    TEST("EXG", "A, B",   0xB7, 0x81);
    TEST("EXG", "A, CCR", 0xB7, 0x82);
    TEST("EXG", "A, D",   0xB7, 0x84);
    TEST("EXG", "A, X",   0xB7, 0x85);
    TEST("EXG", "A, Y",   0xB7, 0x86);
    TEST("EXG", "A, SP",  0xB7, 0x87);

    TEST("EXG", "B, A",   0xB7, 0x90);
    TEST("EXG", "B, B",   0xB7, 0x91);
    TEST("EXG", "B, CCR", 0xB7, 0x92);
    TEST("EXG", "B, D",   0xB7, 0x94);
    TEST("EXG", "B, X",   0xB7, 0x95);
    TEST("EXG", "B, Y",   0xB7, 0x96);
    TEST("EXG", "B, SP",  0xB7, 0x97);

    TEST("EXG", "CCR, A",   0xB7, 0xA0);
    TEST("EXG", "CCR, B",   0xB7, 0xA1);
    TEST("EXG", "CCR, CCR", 0xB7, 0xA2);
    TEST("EXG", "CCR, D",   0xB7, 0xA4);
    TEST("EXG", "CCR, X",   0xB7, 0xA5);
    TEST("EXG", "CCR, Y",   0xB7, 0xA6);
    TEST("EXG", "CCR, SP",  0xB7, 0xA7);

    TEST("EXG", "D, A",   0xB7, 0xC0);
    TEST("EXG", "D, B",   0xB7, 0xC1);
    TEST("EXG", "D, CCR", 0xB7, 0xC2);
    TEST("EXG", "D, D",   0xB7, 0xC4);
    TEST("EXG", "D, X",   0xB7, 0xC5);
    TEST("EXG", "D, Y",   0xB7, 0xC6);
    TEST("EXG", "D, SP",  0xB7, 0xC7);
    // XGDX
    // XGDY

    TEST("EXG", "X, A",   0xB7, 0xD0);
    TEST("EXG", "X, B",   0xB7, 0xD1);
    TEST("EXG", "X, CCR", 0xB7, 0xD2);
    TEST("EXG", "X, D",   0xB7, 0xD4);
    TEST("EXG", "X, X",   0xB7, 0xD5);
    TEST("EXG", "X, Y",   0xB7, 0xD6);
    TEST("EXG", "X, SP",  0xB7, 0xD7);

    TEST("EXG", "Y, A",   0xB7, 0xE0);
    TEST("EXG", "Y, B",   0xB7, 0xE1);
    TEST("EXG", "Y, CCR", 0xB7, 0xE2);
    TEST("EXG", "Y, D",   0xB7, 0xE4);
    TEST("EXG", "Y, X",   0xB7, 0xE5);
    TEST("EXG", "Y, Y",   0xB7, 0xE6);
    TEST("EXG", "Y, SP",  0xB7, 0xE7);

    TEST("EXG", "SP, A",   0xB7, 0xF0);
    TEST("EXG", "SP, B",   0xB7, 0xF1);
    TEST("EXG", "SP, CCR", 0xB7, 0xF2);
    TEST("EXG", "SP, D",   0xB7, 0xF4);
    TEST("EXG", "SP, X",   0xB7, 0xF5);
    TEST("EXG", "SP, Y",   0xB7, 0xF6);
    TEST("EXG", "SP, SP",  0xB7, 0xF7);
}

void test_move() {
    TEST("MOVW", "#$0203, 1,X",   0x18, 0x00, 0x01, 0x02, 0x03);
    TEST("MOVW", "$0304, 2,X",    0x18, 0x01, 0x02, 0x03, 0x04);
    TEST("MOVW", "3,X, 4,X",      0x18, 0x02, 0x03, 0x04);
    TEST("MOVW", "#$0405, $0607", 0x18, 0x03, 0x04, 0x05, 0x06, 0x07);
    TEST("MOVW", "$0506, $0708",  0x18, 0x04, 0x05, 0x06, 0x07, 0x08);
    TEST("MOVW", "6,X, $0708",    0x18, 0x05, 0x06, 0x07, 0x08);
    // Special PC-relative offset
    ATEST(0x1000, "MOVW", "#$1234, $1007,PC",   0x18, 0x00, 0xC0, 0x12, 0x34);
    ATEST(0x1000, "MOVW", "$1234, $1007,PC",    0x18, 0x01, 0xC0, 0x12, 0x34);
    ATEST(0x1000, "MOVW", "$1003,PC, $1005,PC", 0x18, 0x02, 0xC0, 0xC0);
    ATEST(0x1000, "MOVW", "$1003,PC, $1234",    0x18, 0x05, 0xC0, 0x12, 0x34);
    ERRT("MOVW", "#$E2E3, ,X",
         OPERAND_NOT_ALLOWED, ",X",            0x18, 0x00, 0xE1, 0xE2, 0xE3);
    ERRT("MOVW", "$EBEC, ,Y",
         OPERAND_NOT_ALLOWED, ",Y",            0x18, 0x01, 0xEA, 0xEB, 0xEC);
    ERRT("MOVW", "[D,Y], 4,X",
         OPERAND_NOT_ALLOWED, "[D,Y], 4,X",    0x18, 0x02, 0xEF, 0x04);
    ERRT("MOVW", "3,X, ,SP",
         OPERAND_NOT_ALLOWED, ",SP",           0x18, 0x02, 0x03, 0xF0);
    ERRT("MOVW", ",SP, 3,X",
         OPERAND_NOT_ALLOWED, ",SP, 3,X",      0x18, 0x02, 0xF0, 0x03);
    ERRT("MOVW", "[D,PC], $0708",
         OPERAND_NOT_ALLOWED, "[D,PC], $0708", 0x18, 0x05, 0xFF, 0x07, 0x08);

    TEST("MOVB", "#10, 9,X",     0x18, 0x08, 0x09, 0x0A);
    TEST("MOVB", "$0B0C, 10,X",  0x18, 0x09, 0x0A, 0x0B, 0x0C);
    TEST("MOVB", "11,X, 12,X",   0x18, 0x0A, 0x0B, 0x0C);
    TEST("MOVB", "#12, $0D0E",   0x18, 0x0B, 0x0C, 0x0D, 0x0E);
    TEST("MOVB", "$0D0E, $0F10", 0x18, 0x0C, 0x0D, 0x0E, 0x0F, 0x10);
    TEST("MOVB", "14,X, $0F10",  0x18, 0x0D, 0x0E, 0x0F, 0x10);
    // Special PC-relative offset
    ATEST(0x1000, "MOVB", "#$34, $1005,PC",     0x18, 0x08, 0xC0, 0x34);
    ATEST(0x1000, "MOVB", "$1234, $1007,PC",    0x18, 0x09, 0xC0, 0x12, 0x34);
    ATEST(0x1000, "MOVB", "$1003,PC, $1005,PC", 0x18, 0x0A, 0xC0, 0xC0);
    ATEST(0x1000, "MOVB", "$1003,PC, $1234",    0x18, 0x0D, 0xC0, 0x12, 0x34);
    ERRT("MOVB", "#9, ,X",
         OPERAND_NOT_ALLOWED, ",X",            0x18, 0x08, 0xE1, 0x09);
    ERRT("MOVB", "$EBEC, ,Y",
         OPERAND_NOT_ALLOWED, ",Y",            0x18, 0x09, 0xEA, 0xEB, 0xEC);
    ERRT("MOVB", "[D,Y], 4,X",
         OPERAND_NOT_ALLOWED, "[D,Y], 4,X",    0x18, 0x0A, 0xEF, 0x04);
    ERRT("MOVB", "4,X, [D,Y]",
         OPERAND_NOT_ALLOWED, "[D,Y]",         0x18, 0x0A, 0x04, 0xEF);
    ERRT("MOVB", "3,X, ,SP",
         OPERAND_NOT_ALLOWED, ",SP",           0x18, 0x0A, 0x03, 0xF0);
    ERRT("MOVB", ",SP, 3,X",
         OPERAND_NOT_ALLOWED, ",SP, 3,X",      0x18, 0x0A, 0xF0, 0x03);
    ERRT("MOVB", "[D,PC], $0708",
         OPERAND_NOT_ALLOWED, "[D,PC], $0708", 0x18, 0x0D, 0xFF, 0x07, 0x08);
}

void test_add_sub() {
    TEST("ABA", "", 0x18, 0x06);
    // ABX
    // ABY

    TEST("ADCA", "#$8A",  0x89, 0x8A);
    TEST("ADCA", "$9A",   0x99, 0x9A);
    TEST("ADCA", "6,-SP", 0xA9, 0xAA);
    TEST("ADCA", "$BABB", 0xB9, 0xBA, 0xBB);

    TEST("ADCB", "#$CA",    0xC9, 0xCA);
    TEST("ADCB", "$DA",     0xD9, 0xDA);
    TEST("ADCB", "$EBEC,Y", 0xE9, 0xEA, 0xEB, 0xEC);
    TEST("ADCB", "$FAFB",   0xF9, 0xFA, 0xFB);

    TEST("ADDA", "#$8C",  0x8B, 0x8C);
    TEST("ADDA", "$9C",   0x9B, 0x9C);
    TEST("ADDA", "4,-SP", 0xAB, 0xAC);
    TEST("ADDA", "$BCBD", 0xBB, 0xBC, 0xBD);

    TEST("ADDB", "#$CC",  0xCB, 0xCC);
    TEST("ADDB", "$DC",   0xDB, 0xDC);
    TEST("ADDB", "A,Y",   0xEB, 0xEC);
    TEST("ADDB", "$FCFD", 0xFB, 0xFC, 0xFD);

    TEST("ADDD", "#$C4C5", 0xC3, 0xC4, 0xC5);
    TEST("ADDD", "$D4",    0xD3, 0xD4);
    TEST("ADDD", "A,X",    0xE3, 0xE4);
    TEST("ADDD", "$F4F5",  0xF3, 0xF4, 0xF5);

    TEST("SBA", "", 0x18, 0x16);

    TEST("SBCA", "#$83",  0x82, 0x83);
    TEST("SBCA", "$93",   0x92, 0x93);
    TEST("SBCA", "4,+SP", 0xA2, 0xA3);
    TEST("SBCA", "$B3B4", 0xB2, 0xB3, 0xB4);

    TEST("SBCB", "#$C3",      0xC2, 0xC3);
    TEST("SBCB", "$D3",       0xD2, 0xD3);
    TEST("SBCB", "[$E4E5,X]", 0xE2, 0xE3, 0xE4, 0xE5);
    TEST("SBCB", "$F3F4",     0xF2, 0xF3, 0xF4);

    TEST("SUBA", "#$81",  0x80, 0x81);
    TEST("SUBA", "$91",   0x90, 0x91);
    TEST("SUBA", "2,+SP", 0xA0, 0xA1);
    TEST("SUBA", "$B1B2", 0xB0, 0xB1, 0xB2);

    TEST("SUBB", "#$C1",  0xC0, 0xC1);
    TEST("SUBB", "$D1",   0xD0, 0xD1);
    TEST("SUBB", "-30,X", 0xE0, 0xE1, 0xE2);
    TEST("SUBB", "$F1F2", 0xF0, 0xF1, 0xF2);

    TEST("SUBD", "#$8485", 0x83, 0x84, 0x85);
    TEST("SUBD", "$94",    0x93, 0x94);
    TEST("SUBD", "5,+SP",  0xA3, 0xA4);
    TEST("SUBD", "$B4B5",  0xB3, 0xB4, 0xB5);

    TEST("DAA", "", 0x18, 0x07);
}

void test_dec_inc() {
    TEST("DEC", "5,+Y",  0x63, 0x64);
    TEST("DEC", "$7475", 0x73, 0x74, 0x75);
    TEST("DECA", "", 0x43);
    TEST("DECB", "", 0x53);
    TEST("DEX",  "", 0x09);
    TEST("DEY",  "", 0x03);
    // DES

    TEST("INC", "4,+Y",  0x62, 0x63);
    TEST("INC", "$7374", 0x72, 0x73, 0x74);
    TEST("INCA", "", 0x42);
    TEST("INCB", "", 0x52);
    TEST("INX",  "", 0x08);
    TEST("INY",  "", 0x02);
    // INS
}

void test_cmp_tst() {
    TEST("CBA", "", 0x18, 0x17);

    TEST("CMPA", "#$82",  0x81, 0x82);
    TEST("CMPA", "$92",   0x91, 0x92);
    TEST("CMPA", "3,+SP", 0xA1, 0xA2);
    TEST("CMPA", "$B2B3", 0xB1, 0xB2, 0xB3);

    TEST("CMPB", "#$C2",    0xC1, 0xC2);
    TEST("CMPB", "$D2",     0xD1, 0xD2);
    TEST("CMPB", "$E3E4,X", 0xE1, 0xE2, 0xE3, 0xE4);
    TEST("CMPB", "$F2F3",   0xF1, 0xF2, 0xF3);

    TEST("CPD", "#$8D8E", 0x8C, 0x8D, 0x8E);
    TEST("CPD", "$9D",    0x9C, 0x9D);
    TEST("CPD", "3,-SP",  0xAC, 0xAD);
    TEST("CPD", "$BDBE",  0xBC, 0xBD, 0xBE);

    TEST("CPS", "#$9091", 0x8F, 0x90, 0x91);
    TEST("CPS", "$A0",    0x9F, 0xA0);
    TEST("CPS", "1,SP+",  0xAF, 0xB0);
    TEST("CPS", "$C0C1",  0xBF, 0xC0, 0xC1);

    TEST("CPX", "#$8F90", 0x8E, 0x8F, 0x90);
    TEST("CPX", "$9F",    0x9E, 0x9F);
    TEST("CPX", "1,-SP",  0xAE, 0xAF);
    TEST("CPX", "$BFC0",  0xBE, 0xBF, 0xC0);

    TEST("CPY", "#$8E8F", 0x8D, 0x8E, 0x8F);
    TEST("CPY", "$9E",    0x9D, 0x9E);
    TEST("CPY", "2,-SP",  0xAD, 0xAE);
    TEST("CPY", "$BEBF",  0xBD, 0xBE, 0xBF);

    TEST("TST", "$E9,Y", 0xE7, 0xE8, 0xE9);
    TEST("TST", "$F8F9", 0xF7, 0xF8, 0xF9);
    TEST("TSTA", "", 0x97);
    TEST("TSTB", "", 0xD7);
}

void test_bool_logic() {
    TEST("ANDA", "#$85",  0x84, 0x85);
    TEST("ANDA", "$95",   0x94, 0x95);
    TEST("ANDA", "6,+SP", 0xA4, 0xA5);
    TEST("ANDA", "$B5B6", 0xB4, 0xB5, 0xB6);

    TEST("ANDB", "#$C5",  0xC4, 0xC5);
    TEST("ANDB", "$D5",   0xD4, 0xD5);
    TEST("ANDB", "B,X",   0xE4, 0xE5);
    TEST("ANDB", "$F5F6", 0xF4, 0xF5, 0xF6);

    TEST("ANDCC", "#17", 0x10, 0x11);
    // CLC
    // CLI
    // CLV

    TEST("EORA", "#$89",  0x88, 0x89);
    TEST("EORA", "$99",   0x98, 0x99);
    TEST("EORA", "7,-SP", 0xA8, 0xA9);
    TEST("EORA", "$B9BA", 0xB8, 0xB9, 0xBA);

    TEST("EORB", "#$C9",  0xC8, 0xC9);
    TEST("EORB", "$D9",   0xD8, 0xD9);
    TEST("EORB", "-22,Y", 0xE8, 0xE9, 0xEA);
    TEST("EORB", "$F9FA", 0xF8, 0xF9, 0xFA);

    TEST("ORAA", "#$8B",  0x8A, 0x8B);
    TEST("ORAA", "$9B",   0x9A, 0x9B);
    TEST("ORAA", "5,-SP", 0xAA, 0xAB);
    TEST("ORAA", "$BBBC", 0xBA, 0xBB, 0xBC);

    TEST("ORAB", "#$CB",      0xCA, 0xCB);
    TEST("ORAB", "$DB",       0xDA, 0xDB);
    TEST("ORAB", "[$ECED,Y]", 0xEA, 0xEB, 0xEC, 0xED);
    TEST("ORAB", "$FBFC",     0xFA, 0xFB, 0xFC);

    TEST("ORCC", "#21", 0x14, 0x15);
    // SEC
    // SEI
    // SEV
}

void test_clr_com_neg() {
    TEST("CLR", "6,-Y",  0x69, 0x6A);
    TEST("CLR", "$7A7B", 0x79, 0x7A, 0x7B);
    TEST("CLRA", "", 0x87);
    TEST("CLRB", "", 0xC7);

    TEST("COM", "3,+Y",  0x61, 0x62);
    TEST("COM", "$7273", 0x71, 0x72, 0x73);
    TEST("COMA", "", 0x41);
    TEST("COMB", "", 0x51);

    TEST("NEG", "2,+Y",  0x60, 0x61);
    TEST("NEG", "$7172", 0x70, 0x71, 0x72);
    TEST("NEGA", "", 0x40);
    TEST("NEGB", "", 0x50);
}

void test_mul_div() {
    TEST("EMUL",  "", 0x13);
    TEST("EMULS", "", 0x18, 0x13);
    TEST("MUL",   "", 0x12);

    TEST("EDIV",  "", 0x11);
    TEST("EDIVS", "", 0x18, 0x14);
    TEST("FDIV",  "", 0x18, 0x11);
    TEST("IDIV",  "", 0x18, 0x10);
    TEST("IDIVS", "", 0x18, 0x15);
}

void test_bit_manip() {
    TEST("BCLR", "14,X, #15",      0x0D, 0x0E, 0x0F);
    TEST("BCLR", "$E1,X, #$E2",    0x0D, 0xE0, 0xE1, 0xE2);
    TEST("BCLR", "$F3F4,SP, #$F5", 0x0D, 0xF2, 0xF3, 0xF4, 0xF5);
    TEST("BCLR", "$1E1F, #32",     0x1D, 0x1E, 0x1F, 0x20);
    TEST("BCLR", "$4E, #$4F",      0x4D, 0x4E, 0x4F);
    ATEST(0x1000, "BCLR", "$1003,PC, #$C1", 0x0D, 0xC0, 0xC1);
    ATEST(0x1000, "BCLR", "$1012,PC, #$D0", 0x0D, 0xCF, 0xD0);
    ATEST(0x1010, "BCLR", "$1003,PC, #$D1", 0x0D, 0xD0, 0xD1);
    ATEST(0x1000, "BCLR", "$1103,PC, #$F9", 0x0D, 0xF8, 0xFF, 0xF9);
    ATEST(0x1100, "BCLR", "$1004,PC, #$FA", 0x0D, 0xF9, 0x00, 0xFA);
    ATEST(0x1010, "BCLR", "$1003,PC, #$D1", 0x0D, 0xD0, 0xD1);
    ERRT("BCLR", "[$E4E5,X], #$E6",
         OPERAND_NOT_ALLOWED, "[$E4E5,X], #$E6",  0x0D, 0xE3, 0xE4, 0xE5, 0xE6);
    ERRT("BCLR", "[$ECED,Y], #$EE",
         OPERAND_NOT_ALLOWED, "[$ECED,Y], #$EE",  0x0D, 0xEB, 0xEC, 0xED, 0xEE);
    ERRT("BCLR", "[$F4F5,SP], #$F6",
         OPERAND_NOT_ALLOWED, "[$F4F5,SP], #$F6", 0x0D, 0xF3, 0xF4, 0xF5, 0xF6);
    AERRT(0x1000, "BCLR", "[$0F05,PC], #$FE",
         OPERAND_NOT_ALLOWED, "[$0F05,PC], #$FE", 0x0D, 0xFB, 0xFF, 0x00, 0xFE);
    ERRT("BCLR", "[D,X], #$E8",
         OPERAND_NOT_ALLOWED, "[D,X], #$E8",  0x0D, 0xE7, 0xE8);
    ERRT("BCLR", "[D,Y], #$F0",
         OPERAND_NOT_ALLOWED, "[D,Y], #$F0",  0x0D, 0xEF, 0xF0);
    ERRT("BCLR", "[D,SP], #$F8",
         OPERAND_NOT_ALLOWED, "[D,SP], #$F8", 0x0D, 0xF7, 0xF8);
    ERRT("BCLR", "[D,PC], #$E0",
         OPERAND_NOT_ALLOWED, "[D,PC], #$E0", 0x0D, 0xFF, 0xE0);

    TEST("BITA", "#$86",  0x85, 0x86);
    TEST("BITA", "$96",   0x95, 0x96);
    TEST("BITA", "7,+SP", 0xA5, 0xA6);
    TEST("BITA", "$B6B7", 0xB5, 0xB6, 0xB7);

    TEST("BITB", "#$C6",  0xC5, 0xC6);
    TEST("BITB", "$D6",   0xD5, 0xD6);
    TEST("BITB", "D,X",   0xE5, 0xE6);
    TEST("BITB", "$F6F7", 0xF5, 0xF6, 0xF7);

    TEST("BSET", "13,X, #14",       0x0C, 0x0D, 0x0E);
    TEST("BSET", "-22,Y, #$EB",     0x0C, 0xE9, 0xEA, 0xEB);
    TEST("BSET", "$F3F4,SP, #$F5",  0x0C, 0xF2, 0xF3, 0xF4, 0xF5);
    TEST("BSET", "$1D1E, #31",      0x1C, 0x1D, 0x1E, 0x1F);
    TEST("BSET", "$4D, #$4E",       0x4C, 0x4D, 0x4E);
    ATEST(0x1000, "BSET", "$9004,PC, #$FD", 0x0C, 0xFA, 0x7F, 0xFF, 0xFD);
    ATEST(0x9000, "BSET", "$1005,PC, #$FD", 0x0C, 0xFA, 0x80, 0x00, 0xFD);
    ATEST(0x1000, "BSET",  "$1005,PC, #$C3", 0x0C, 0xC2, 0xC3);
    ATEST(0x1000, "BSET", "<$1005,PC, #$F9", 0x0C, 0xF8, 0x01, 0xF9);
    ATEST(0x1000, "BSET", ">$1005,PC, #$FB", 0x0C, 0xFA, 0x00, 0x00, 0xFB);
}

void test_shift_rotate() {
    TEST("ASL", "7,-Y",  0x68, 0x69);
    TEST("ASL", "$797A", 0x78, 0x79, 0x7A);
    TEST("ASLA", "", 0x48);
    TEST("ASLB", "", 0x58);
    TEST("ASLD", "", 0x59);
    // LSL
    // LSLA
    // LSLB
    // LSLD

    TEST("ASR", "8,-Y",  0x67, 0x68);
    TEST("ASR", "$7879", 0x77, 0x78, 0x79);
    TEST("ASRA", "", 0x47);
    TEST("ASRB", "", 0x57);

    TEST("LSR", "6,+Y",  0x64, 0x65);
    TEST("LSR", "$7576", 0x74, 0x75, 0x76);
    TEST("LSRA", "", 0x44);
    TEST("LSRB", "", 0x54);
    TEST("LSRD", "", 0x49);

    TEST("ROL", "7,+Y",  0x65, 0x66);
    TEST("ROL", "$7677", 0x75, 0x76, 0x77);
    TEST("ROLA", "", 0x45);
    TEST("ROLB", "", 0x55);

    TEST("ROR", "8,+Y",  0x66, 0x67);
    TEST("ROR", "$7778", 0x76, 0x77, 0x78);
    TEST("RORA", "", 0x46);
    TEST("RORB", "", 0x56);
}

void test_fuzzy() {
    TEST("MEM",  "", 0x01);
    TEST("REV",  "", 0x18, 0x3A);
    TEST("REVW", "", 0x18, 0x3B);
    TEST("WAV",  "", 0x18, 0x3C);
}

void test_min_max() {
    TEST("EMIND", "-4,X", 0x18, 0x1B, 0x1C);
    TEST("EMINM", "1,+X", 0x18, 0x1F, 0x20);
    TEST("MINA", "-6,X",  0x18, 0x19, 0x1A);
    TEST("MINM", "-2,X",  0x18, 0x1D, 0x1E);

    TEST("EMAXD", "-5,X", 0x18, 0x1A, 0x1B);
    TEST("EMAXM", "-1,X", 0x18, 0x1E, 0x1F);
    TEST("MAXA", "-7,X",  0x18, 0x18, 0x19);
    TEST("MAXM", "-3,X",  0x18, 0x1C, 0x1D);
}

void test_mul_accum() {
    TEST("EMACS", "$1314", 0x18, 0x12, 0x13, 0x14);
}

void test_table() {
    TEST("ETBL", "0,Y",      0x18, 0x3F, 0x40);
    TEST("ETBL", "$0010,PC", 0x18, 0x3F, 0xCD);
    TEST("ETBL", "D,X",      0x18, 0x3F, 0xE6);
    ERRT("ETBL", ",X",    OPERAND_NOT_ALLOWED, ",X",    0x18, 0x3F, 0xE0);
    ERRT("ETBL", ",Y",    OPERAND_NOT_ALLOWED, ",Y",    0x18, 0x3F, 0xE9);
    ERRT("ETBL", ",SP",   OPERAND_NOT_ALLOWED, ",SP",   0x18, 0x3F, 0xF2);
    ERRT("ETBL", ",PC",   OPERAND_NOT_ALLOWED, ",PC",   0x18, 0x3F, 0xFA);
    ERRT("ETBL", "[D,X]", OPERAND_NOT_ALLOWED, "[D,X]", 0x18, 0x3F, 0xE7);

    TEST("TBL", "2,X-",     0x18, 0x3D, 0x3E);
    TEST("TBL", "$0010,PC", 0x18, 0x3D, 0xCD);
    TEST("TBL", "D,X",      0x18, 0x3D, 0xE6);
    ERRT("TBL", ",X",    OPERAND_NOT_ALLOWED, ",X",    0x18, 0x3D, 0xE0);
    ERRT("TBL", ",Y",    OPERAND_NOT_ALLOWED, ",Y",    0x18, 0x3D, 0xE9);
    ERRT("TBL", ",SP",   OPERAND_NOT_ALLOWED, ",SP",   0x18, 0x3D, 0xF2);
    ERRT("TBL", ",PC",   OPERAND_NOT_ALLOWED, ",PC",   0x18, 0x3D, 0xFA);
    ERRT("TBL", "[D,X]", OPERAND_NOT_ALLOWED, "[D,X]", 0x18, 0x3D, 0xE7);
}

void test_branch() {
    ATEST(0x1000, "BRA", "$1002", 0x20, 0x00);
    ATEST(0x1000, "BRN", "$1081", 0x21, 0x7F);
    AERRT(0x0010, "BRA", "$FF92",
          OVERFLOW_RANGE, "$FF92", 0x20, 0x80);
    AERRT(0xFFF0, "BRA", "$0071",
          OVERFLOW_RANGE, "$0071", 0x20, 0x7F);
    ANMEM(0x1000, "BRA", "$1001",
          "$1001",                0x20);
    ATEST(0x1000, "BHI", "$1004", 0x22, 0x02);
    ATEST(0x1000, "BLS", "$1002", 0x23, 0x00);
    ATEST(0x1000, "BCC", "$1002", 0x24, 0x00);
    ATEST(0x1000, "BCS", "$1002", 0x25, 0x00);
    ATEST(0x1000, "BNE", "$1002", 0x26, 0x00);
    ATEST(0x1000, "BEQ", "$1002", 0x27, 0x00);
    ATEST(0x1000, "BVC", "$1002", 0x28, 0x00);
    ATEST(0x1000, "BVS", "$1002", 0x29, 0x00);
    ATEST(0x1000, "BPL", "$1002", 0x2A, 0x00);
    ATEST(0x1000, "BMI", "$1002", 0x2B, 0x00);
    ATEST(0x1000, "BGE", "$1002", 0x2C, 0x00);
    ATEST(0x1000, "BLT", "$1002", 0x2D, 0x00);
    ATEST(0x1000, "BGT", "$1002", 0x2E, 0x00);
    ATEST(0x1000, "BLE", "$1002", 0x2F, 0x00);
    // BHS
    // BLO

    ATEST(0x1000, "LBRA", "$1004", 0x18, 0x20, 0x00, 0x00);
    ATEST(0x1000, "LBRA", "$9003", 0x18, 0x20, 0x7F, 0xFF);
    ATEST(0x9000, "LBRA", "$1004", 0x18, 0x20, 0x80, 0x00);
    AERRT(0x9000, "LBRA", "$1003",
          OVERFLOW_RANGE, "$1003", 0x18, 0x20, 0x7F, 0xFF);
    ATEST(0x1000, "LBRN", "$1000", 0x18, 0x21, 0xFF, 0xFC);
    ATEST(0x1000, "LBHI", "$1008", 0x18, 0x22, 0x00, 0x04);
    ATEST(0x1000, "LBLS", "$9003", 0x18, 0x23, 0x7F, 0xFF);
    AERRT(0x1000, "LBLS", "$9004",
          OVERFLOW_RANGE, "$9004", 0x18, 0x23, 0x80, 0x00);
    ATEST(0x1000, "LBCC", "$1004", 0x18, 0x24, 0x00, 0x00);
    ATEST(0x1000, "LBCS", "$1004", 0x18, 0x25, 0x00, 0x00);
    ATEST(0x1000, "LBNE", "$1004", 0x18, 0x26, 0x00, 0x00);
    ATEST(0x1000, "LBEQ", "$1004", 0x18, 0x27, 0x00, 0x00);
    ATEST(0x1000, "LBVC", "$1004", 0x18, 0x28, 0x00, 0x00);
    ATEST(0x1000, "LBVS", "$1004", 0x18, 0x29, 0x00, 0x00);
    ATEST(0x1000, "LBPL", "$1004", 0x18, 0x2A, 0x00, 0x00);
    ATEST(0x1000, "LBMI", "$1004", 0x18, 0x2B, 0x00, 0x00);
    ATEST(0x1000, "LBGE", "$1004", 0x18, 0x2C, 0x00, 0x00);
    ATEST(0x1000, "LBLT", "$1004", 0x18, 0x2D, 0x00, 0x00);
    ATEST(0x1000, "LBGT", "$1004", 0x18, 0x2E, 0x00, 0x00);
    ATEST(0x1000, "LBLE", "$1004", 0x18, 0x2F, 0x00, 0x00);
    AERRT(0x1000, "LBLE", "$9004",
          OVERFLOW_RANGE, "$9004", 0x18, 0x2F, 0x80, 0x00);
    AERRT(0x9000, "LBLE", "$1003",
          OVERFLOW_RANGE, "$1003", 0x18 , 0x2F, 0x7F, 0xFF);
    ANMEM(0x1000, "LBLE", "$1003",
          "$1003",                 0x18, 0x2F, 0x00);
    ANMEM(0x1000, "LBLE", "$1002",
          "$1002",                 0x18, 0x2F);
    // LBHS
    // LBLO
}

void test_bit_branch() {
    ATEST(0x1000, "BRCLR", "-16,X, #17, $1016",  0x0F, 0x10, 0x11, 0x12);
    ATEST(0x1000, "BRCLR", "$2021, #$22, $1028", 0x1F, 0x20, 0x21, 0x22, 0x23);
    ATEST(0x1000, "BRCLR", "$50, #$51, $1056",   0x4F, 0x50, 0x51, 0x52);
    ATEST(0x1000, "BRCLR", "$1004,PC, #$C1, $1004", 0x0F, 0xC0, 0xC1, 0x00);
    ATEST(0x1000, "BRCLR", "$1013,PC, #$D0, $1083", 0x0F, 0xCF, 0xD0, 0x7F);
    ATEST(0x1010, "BRCLR", "$1004,PC, #$D1, $0F94", 0x0F, 0xD0, 0xD1, 0x80);
    ATEST(0x1000, "BRCLR", "$1104,PC, #$F9, $1005", 0x0F, 0xF8, 0xFF, 0xF9, 0x00);
    ATEST(0x1100, "BRCLR", "$1005,PC, #$FA, $1105", 0x0F, 0xF9, 0x00, 0xFA, 0x00);

    ATEST(0x1000, "BRSET", "15,X, #16, $1015",   0x0E, 0x0F, 0x10, 0x11);
    ATEST(0x1000, "BRSET", "$1F20, #$21, $1027", 0x1E, 0x1F, 0x20, 0x21, 0x22);
    ATEST(0x1000, "BRSET", "$4F, #$50, $1055",   0x4E, 0x4F, 0x50, 0x51);
    ATEST(0x1000, "BRSET",  "$9005,PC, #$FB, $1006", 0x0E, 0xFA, 0x7F, 0xFF, 0xFB, 0x00);
    ATEST(0x9000, "BRSET",  "$1006,PC, #$FB, $9006", 0x0E, 0xFA, 0x80, 0x00, 0xFB, 0x00);
    ATEST(0x1000, "BRSET",  "$1006,PC, #$C1, $1006", 0x0E, 0xC2, 0xC1, 0x02);
    ATEST(0x1000, "BRSET", "<$1006,PC, #$D0, $1006", 0x0E, 0xF8, 0x01, 0xD0, 0x01);
    ATEST(0x1000, "BRSET", ">$1006,PC, #$FB, $1006", 0x0E, 0xFA, 0x00, 0x00, 0xFB, 0x00);
}

void test_loop() {
    ATEST(0x1000, "DBEQ", "A, $1004",  0x04, 0x00, 0x01);
    ATEST(0x1000, "DBEQ", "B, $1005",  0x04, 0x01, 0x02);
    ATEST(0x1000, "DBEQ", "D, $1008",  0x04, 0x04, 0x05);
    ATEST(0x1000, "DBEQ", "X, $1009",  0x04, 0x05, 0x06);
    ATEST(0x1000, "DBEQ", "Y, $100A",  0x04, 0x06, 0x07);
    ATEST(0x1000, "DBEQ", "SP, $100B", 0x04, 0x07, 0x08);
    ATEST(0x1000, "DBEQ", "A, $0F14",  0x04, 0x10, 0x11);
    ATEST(0x1000, "DBEQ", "B, $0F15",  0x04, 0x11, 0x12);
    ATEST(0x1000, "DBEQ", "D, $0F18",  0x04, 0x14, 0x15);
    ATEST(0x1000, "DBEQ", "X, $0F19",  0x04, 0x15, 0x16);
    ATEST(0x1000, "DBEQ", "Y, $0F1A",  0x04, 0x16, 0x17);
    ATEST(0x1000, "DBEQ", "SP, $0F1B", 0x04, 0x17, 0x18);
    ATEST(0x1000, "DBNE", "A, $1024",  0x04, 0x20, 0x21);
    ATEST(0x1000, "DBNE", "B, $1025",  0x04, 0x21, 0x22);
    ATEST(0x1000, "DBNE", "D, $1028",  0x04, 0x24, 0x25);
    ATEST(0x1000, "DBNE", "X, $1029",  0x04, 0x25, 0x26);
    ATEST(0x1000, "DBNE", "Y, $102A",  0x04, 0x26, 0x27);
    ATEST(0x1000, "DBNE", "SP, $102B", 0x04, 0x27, 0x28);
    ATEST(0x1000, "DBNE", "A, $0F34",  0x04, 0x30, 0x31);
    ATEST(0x1000, "DBNE", "B, $0F35",  0x04, 0x31, 0x32);
    ATEST(0x1000, "DBNE", "D, $0F38",  0x04, 0x34, 0x35);
    ATEST(0x1000, "DBNE", "X, $0F39",  0x04, 0x35, 0x36);
    ATEST(0x1000, "DBNE", "Y, $0F3A",  0x04, 0x36, 0x37);
    ATEST(0x1000, "DBNE", "SP, $0F3B", 0x04, 0x37, 0x38);
    ATEST(0x1000, "TBEQ", "A, $1044",  0x04, 0x40, 0x41);
    ATEST(0x1000, "TBEQ", "B, $1045",  0x04, 0x41, 0x42);
    ATEST(0x1000, "TBEQ", "D, $1048",  0x04, 0x44, 0x45);
    ATEST(0x1000, "TBEQ", "X, $1049",  0x04, 0x45, 0x46);
    ATEST(0x1000, "TBEQ", "Y, $104A",  0x04, 0x46, 0x47);
    ATEST(0x1000, "TBEQ", "SP, $104B", 0x04, 0x47, 0x48);
    ATEST(0x1000, "TBEQ", "A, $0F54",  0x04, 0x50, 0x51);
    ATEST(0x1000, "TBEQ", "B, $0F55",  0x04, 0x51, 0x52);
    ATEST(0x1000, "TBEQ", "D, $0F58",  0x04, 0x54, 0x55);
    ATEST(0x1000, "TBEQ", "X, $0F59",  0x04, 0x55, 0x56);
    ATEST(0x1000, "TBEQ", "Y, $0F5A",  0x04, 0x56, 0x57);
    ATEST(0x1000, "TBEQ", "SP, $0F5B", 0x04, 0x57, 0x58);
    ATEST(0x1000, "TBNE", "A, $1064",  0x04, 0x60, 0x61);
    ATEST(0x1000, "TBNE", "B, $1065",  0x04, 0x61, 0x62);
    ATEST(0x1000, "TBNE", "D, $1068",  0x04, 0x64, 0x65);
    ATEST(0x1000, "TBNE", "X, $1069",  0x04, 0x65, 0x66);
    ATEST(0x1000, "TBNE", "Y, $106A",  0x04, 0x66, 0x67);
    ATEST(0x1000, "TBNE", "SP, $106B", 0x04, 0x67, 0x68);
    ATEST(0x1000, "TBNE", "A, $0F74",  0x04, 0x70, 0x71);
    ATEST(0x1000, "TBNE", "B, $0F75",  0x04, 0x71, 0x72);
    ATEST(0x1000, "TBNE", "D, $0F78",  0x04, 0x74, 0x75);
    ATEST(0x1000, "TBNE", "X, $0F79",  0x04, 0x75, 0x76);
    ATEST(0x1000, "TBNE", "Y, $0F7A",  0x04, 0x76, 0x77);
    ATEST(0x1000, "TBNE", "SP, $0F7B", 0x04, 0x77, 0x78);
    ATEST(0x1000, "IBEQ", "A, $1084",  0x04, 0x80, 0x81);
    ATEST(0x1000, "IBEQ", "B, $1085",  0x04, 0x81, 0x82);
    ATEST(0x1000, "IBEQ", "D, $1088",  0x04, 0x84, 0x85);
    ATEST(0x1000, "IBEQ", "X, $1089",  0x04, 0x85, 0x86);
    ATEST(0x1000, "IBEQ", "Y, $108A",  0x04, 0x86, 0x87);
    ATEST(0x1000, "IBEQ", "SP, $108B", 0x04, 0x87, 0x88);
    ATEST(0x1000, "IBEQ", "A, $0F94",  0x04, 0x90, 0x91);
    ATEST(0x1000, "IBEQ", "B, $0F95",  0x04, 0x91, 0x92);
    ATEST(0x1000, "IBEQ", "D, $0F98",  0x04, 0x94, 0x95);
    ATEST(0x1000, "IBEQ", "X, $0F99",  0x04, 0x95, 0x96);
    ATEST(0x1000, "IBEQ", "Y, $0F9A",  0x04, 0x96, 0x97);
    ATEST(0x1000, "IBEQ", "SP, $0F9B", 0x04, 0x97, 0x98);
    ATEST(0x1000, "IBNE", "A, $10A4",  0x04, 0xA0, 0xA1);
    ATEST(0x1000, "IBNE", "B, $10A5",  0x04, 0xA1, 0xA2);
    ATEST(0x1000, "IBNE", "D, $10A8",  0x04, 0xA4, 0xA5);
    ATEST(0x1000, "IBNE", "X, $10A9",  0x04, 0xA5, 0xA6);
    ATEST(0x1000, "IBNE", "Y, $10AA",  0x04, 0xA6, 0xA7);
    ATEST(0x1000, "IBNE", "SP, $10AB", 0x04, 0xA7, 0xA8);
    ATEST(0x1000, "IBNE", "A, $0FB4",  0x04, 0xB0, 0xB1);
    ATEST(0x1000, "IBNE", "B, $0FB5",  0x04, 0xB1, 0xB2);
    ATEST(0x1000, "IBNE", "D, $0FB8",  0x04, 0xB4, 0xB5);
    ATEST(0x1000, "IBNE", "X, $0FB9",  0x04, 0xB5, 0xB6);
    ATEST(0x1000, "IBNE", "Y, $0FBA",  0x04, 0xB6, 0xB7);
    ATEST(0x1000, "IBNE", "SP, $0FBB", 0x04, 0xB7, 0xB8);
}

void test_jump() {
    ATEST(0x1000, "BSR", "$100A", 0x07, 0x08);

    TEST("CALL", "$4B4C, $4D",      0x4A, 0x4B, 0x4C, 0x4D);
    TEST("CALL", "12,Y, $4D",       0x4B, 0x4C, 0x4D);
    TEST("CALL", "$EBEC,Y, $ED",    0x4B, 0xEA, 0xEB, 0xEC, 0xED);
    TEST("CALL", "[$ECED,Y]",       0x4B, 0xEB, 0xEC, 0xED);
    TEST("CALL", "[D,X]",           0x4B, 0xE7);
    ATEST(0x1000, "CALL",  "$1003,PC, $4D", 0x4B, 0xC0, 0x4D);
    ATEST(0x1000, "CALL", "<$1004,PC, $4D", 0x4B, 0xF8, 0x00, 0x4D);
    ATEST(0x1000, "CALL", ">$1005,PC, $4D", 0x4B, 0xFA, 0x00, 0x00, 0x4D);
    ATEST(0x1000, "CALL", "[$1004,PC]",     0x4B, 0xFB, 0x00, 0x00);

    TEST("JMP", "6,X",   0x05, 0x06);
    TEST("JMP", "$0708", 0x06, 0x07, 0x08);

    TEST("JSR", "-10,X", 0x15, 0x16);
    TEST("JSR", "$1718", 0x16, 0x17, 0x18);
    TEST("JSR", "$18",   0x17, 0x18);

    TEST("RTC", "", 0x0A);
    TEST("RTS", "", 0x3D);
}

void test_interrupt() {
    TEST("RTI", "", 0x0B);
    TEST("SWI", "", 0x3F);

    TEST("TRAP", "$30", 0x18, 0x30);
    TEST("TRAP", "$37", 0x18, 0x37);
    TEST("TRAP", "$38", 0x18, 0x38);
    TEST("TRAP", "$39", 0x18, 0x39);
    TEST("TRAP", "$40", 0x18, 0x40);
    TEST("TRAP", "$7F", 0x18, 0x7F);
    TEST("TRAP", "$80", 0x18, 0x80);
    TEST("TRAP", "$FF", 0x18, 0xFF);
}
// clang-format on

void run_tests(const char *cpu) {
    disassembler.setCpu(cpu);
    RUN_TEST(test_load);
    RUN_TEST(test_store);
    RUN_TEST(test_transfer);
    RUN_TEST(test_exchange);
    RUN_TEST(test_move);
    RUN_TEST(test_add_sub);
    RUN_TEST(test_dec_inc);
    RUN_TEST(test_cmp_tst);
    RUN_TEST(test_bool_logic);
    RUN_TEST(test_clr_com_neg);
    RUN_TEST(test_mul_div);
    RUN_TEST(test_bit_manip);
    RUN_TEST(test_shift_rotate);
    RUN_TEST(test_fuzzy);
    RUN_TEST(test_min_max);
    RUN_TEST(test_mul_accum);
    RUN_TEST(test_table);
    RUN_TEST(test_branch);
    RUN_TEST(test_bit_branch);
    RUN_TEST(test_loop);
    RUN_TEST(test_jump);
    RUN_TEST(test_interrupt);
}

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
