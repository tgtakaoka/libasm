/*
 * Copyright 2022 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "asm_i8096.h"
#include "test_asm_helper.h"

using namespace libasm;
using namespace libasm::i8096;
using namespace libasm::test;

#define ONAL(src, at, ...) ERRT(src, OPERAND_NOT_ALIGNED, at, __VA_ARGS__)

AsmI8096 asm8096;
Assembler &assembler(asm8096);

bool is80196() {
    return strcasecmp_P("80196", asm8096.cpu_P()) == 0;
}

void set_up() {
    assembler.reset();
}

void tear_down() {
    symtab.reset();
}

// clang-format off
void test_cpu() {
    EQUALS("cpu 8096", true,   assembler.setCpu("8096"));
    EQUALS_P("cpu 8096", "8096", assembler.config().cpu_P());

    EQUALS("cpu i8096", true,   assembler.setCpu("i8096"));
    EQUALS_P("cpu i8096", "8096", assembler.config().cpu_P());

    EQUALS("cpu 80196", true,   assembler.setCpu("80196"));
    EQUALS_P("cpu 80196", "80196", assembler.config().cpu_P());

    EQUALS("cpu i80196", true,   assembler.setCpu("i80196"));
    EQUALS_P("cpu i80196", "80196", assembler.config().cpu_P());
}

void test_2_operands() {
    TEST("ADD 52, 32",           0x64, 0x20, 0x34);
    ONAL("ADD 52, 33", "33",     0x64, 0x21, 0x34);
    ONAL("ADD 53, 32", "53, 32", 0x64, 0x20, 0x35);
    TEST("ADD 86, 52[0]",          0x64, 0x34, 0x56);
    ONAL("ADD 86, 53[0]", "53[0]", 0x64, 0x35, 0x56);
    TEST("ADD 86, #3412H", 0x65, 0x12, 0x34, 0x56);
    TEST("ADD 86, #3413H", 0x65, 0x13, 0x34, 0x56);
    TEST("ADD 52, [32]",         0x66, 0x20, 0x34);
    TEST("ADD 52, [32]+",        0x66, 0x21, 0x34);
    TEST("ADD 52, 0[32]",        0x66, 0x20, 0x34);
    ONAL("ADD 52, [33]", "[33]", 0x66, 0x21, 0x34);
    TEST("ADD 86, 52[32]",                  0x67, 0x20, 0x34, 0x56);
    ERRT("ADD 86, 52[32]+", OPERAND_NOT_ALLOWED, "52[32]+");
    TEST("ADD 120, 5634H[32]",              0x67, 0x21, 0x34, 0x56, 0x78);
    ONAL("ADD 120, 5634H[33]", "5634H[33]", 0x67, 0x21, 0x34, 0x56, 0x78);
    TEST("ADD 120, 5634H[0]",               0x67, 0x01, 0x34, 0x56, 0x78);
    ONAL("ADD 120, 5635H[0]",   "5635H[0]", 0x67, 0x01, 0x35, 0x56, 0x78);
    TEST("ADD 120, 5634H",                  0x67, 0x01, 0x34, 0x56, 0x78);
    ONAL("ADD 120, 5635H",         "5635H", 0x67, 0x01, 0x35, 0x56, 0x78);

    ERRT("ADD 52, [22]",      ILLEGAL_REGISTER, "[22]", 0x66, 0x16, 0x34);
    ERRT("ADD 52, [2]+",      ILLEGAL_REGISTER, "[2]+", 0x66, 0x03, 0x34);
    ERRT("ADD 52, 32[22]",    ILLEGAL_REGISTER, "[22]", 0x67, 0x16, 0x20, 0x34);
    ERRT("ADD 52, 5678H[22]", ILLEGAL_REGISTER, "[22]", 0x67, 0x17, 0x78, 0x56, 0x34);

    TEST("ADDB 35, 32",  0x74, 0x20, 0x23);
    TEST("ADDB 35, 33",  0x74, 0x21, 0x23);
    TEST("ADDB 35, #32", 0x75, 0x20, 0x23);
    TEST("ADDB 35, [32]",           0x76, 0x20, 0x23);
    TEST("ADDB 35, [32]+",          0x76, 0x21, 0x23);
    ONAL("ADDB 35, [33]+", "[33]+", 0x76, 0x21, 0x23);
    ONAL("ADDB 35, [33]", "[33]",   0x76, 0x21, 0x23);
    TEST("ADDB 52, 35[32]",           0x77, 0x20, 0x23, 0x34);
    ONAL("ADDB 52, 35[33]", "35[33]", 0x77, 0x20, 0x23, 0x34);
    TEST("ADDB 69, 3423H[32]",              0x77, 0x21, 0x23, 0x34, 0x45);
    ONAL("ADDB 69, 3423H[33]", "3423H[33]", 0x77, 0x21, 0x23, 0x34, 0x45);
    TEST("ADDB 69, 5634H",                  0x77, 0x01, 0x34, 0x56, 0x45);
    TEST("ADDB 69, 5635H",                  0x77, 0x01, 0x35, 0x56, 0x45);

    TEST("ADDC 52, 32",         0xA4, 0x20, 0x34);
    TEST("ADDC 86, #3412H",     0xA5, 0x12, 0x34, 0x56);
    TEST("ADDC 52, [32]",       0xA6, 0x20, 0x34);
    TEST("ADDC 52, [32]+",      0xA6, 0x21, 0x34);
    TEST("ADDC 86, 52[32]",     0xA7, 0x20, 0x34, 0x56);
    TEST("ADDC 120, 5634H[32]", 0xA7, 0x21, 0x34, 0x56, 0x78);

    TEST("ADDCB 35, 32",        0xB4, 0x20, 0x23);
    TEST("ADDCB 35, #32",       0xB5, 0x20, 0x23);
    TEST("ADDCB 35, [32]",      0xB6, 0x20, 0x23);
    TEST("ADDCB 35, [32]+",     0xB6, 0x21, 0x23);
    TEST("ADDCB 52, 35[32]",    0xB7, 0x20, 0x23, 0x34);
    TEST("ADDCB 69, 3423H[32]", 0xB7, 0x21, 0x23, 0x34, 0x45);

    TEST("SUB 52, 32",         0x68, 0x20, 0x34);
    TEST("SUB 86, #3412H",     0x69, 0x12, 0x34, 0x56);
    TEST("SUB 52, [32]",       0x6A, 0x20, 0x34);
    TEST("SUB 52, [32]+",      0x6A, 0x21, 0x34);
    TEST("SUB 86, 52[32]",     0x6B, 0x20, 0x34, 0x56);
    TEST("SUB 120, 5634H[32]", 0x6B, 0x21, 0x34, 0x56, 0x78);

    TEST("SUBB 35, 32",        0x78, 0x20, 0x23);
    TEST("SUBB 35, #32",       0x79, 0x20, 0x23);
    TEST("SUBB 35, [32]",      0x7A, 0x20, 0x23);
    TEST("SUBB 35, [32]+",     0x7A, 0x21, 0x23);
    TEST("SUBB 52, 35[32]",    0x7B, 0x20, 0x23, 0x34);
    TEST("SUBB 69, 3423H[32]", 0x7B, 0x21, 0x23, 0x34, 0x45);

    TEST("SUBC 52, 32",         0xA8, 0x20, 0x34);
    TEST("SUBC 86, #3412H",     0xA9, 0x12, 0x34, 0x56);
    TEST("SUBC 52, [32]",       0xAA, 0x20, 0x34);
    TEST("SUBC 52, [32]+",      0xAA, 0x21, 0x34);
    TEST("SUBC 86, 52[32]",     0xAB, 0x20, 0x34, 0x56);
    TEST("SUBC 120, 5634H[32]", 0xAB, 0x21, 0x34, 0x56, 0x78);

    TEST("SUBCB 35, 32",        0xB8, 0x20, 0x23);
    TEST("SUBCB 35, #32",       0xB9, 0x20, 0x23);
    TEST("SUBCB 35, [32]",      0xBA, 0x20, 0x23);
    TEST("SUBCB 35, [32]+",     0xBA, 0x21, 0x23);
    TEST("SUBCB 52, 35[32]",    0xBB, 0x20, 0x23, 0x34);
    TEST("SUBCB 69, 3423H[32]", 0xBB, 0x21, 0x23, 0x34, 0x45);

    TEST("CMP 52, 32",         0x88, 0x20, 0x34);
    TEST("CMP 86, #3412H",     0x89, 0x12, 0x34, 0x56);
    TEST("CMP 52, [32]",       0x8A, 0x20, 0x34);
    TEST("CMP 52, [32]+",      0x8A, 0x21, 0x34);
    TEST("CMP 86, 52[32]",     0x8B, 0x20, 0x34, 0x56);
    TEST("CMP 120, 5634H[32]", 0x8B, 0x21, 0x34, 0x56, 0x78);

    TEST("CMPB 35, 32",        0x98, 0x20, 0x23);
    TEST("CMPB 35, #32",       0x99, 0x20, 0x23);
    TEST("CMPB 35, [32]",      0x9A, 0x20, 0x23);
    TEST("CMPB 35, [32]+",     0x9A, 0x21, 0x23);
    TEST("CMPB 52, 35[32]",    0x9B, 0x20, 0x23, 0x34);
    TEST("CMPB 69, 3423H[32]", 0x9B, 0x21, 0x23, 0x34, 0x45);

    if (is80196()) {
        TEST("CMPL 52, 32",            0xC5, 0x20, 0x34);
        ONAL("CMPL 53, 32",  "53, 32", 0xC5, 0x20, 0x35);
        ONAL("CMPL 52, 33",  "33",     0xC5, 0x21, 0x34);
    }

    TEST("MUL 52, 16",         0xFE, 0x6C, 0x10, 0x34);
    TEST("MUL 84, #3412H",     0xFE, 0x6D, 0x12, 0x34, 0x54);
    TEST("MUL 52, [32]",       0xFE, 0x6E, 0x20, 0x34);
    TEST("MUL 52, [32]+",      0xFE, 0x6E, 0x21, 0x34);
    TEST("MUL 84, 52[32]",     0xFE, 0x6F, 0x20, 0x34, 0x54);
    TEST("MUL 120, 5634H[32]", 0xFE, 0x6F, 0x21, 0x34, 0x56, 0x78);

    TEST("MULB 36, 32",        0xFE, 0x7C, 0x20, 0x24);
    TEST("MULB 36, #32",       0xFE, 0x7D, 0x20, 0x24);
    TEST("MULB 36, [32]",      0xFE, 0x7E, 0x20, 0x24);
    TEST("MULB 36, [32]+",     0xFE, 0x7E, 0x21, 0x24);
    TEST("MULB 52, 35[32]",    0xFE, 0x7F, 0x20, 0x23, 0x34);
    TEST("MULB 70, 3423H[32]", 0xFE, 0x7F, 0x21, 0x23, 0x34, 0x46);

    TEST("MULU 52, 32",           0x6C, 0x20, 0x34);
    ONAL("MULU 52, 33", "33",     0x6C, 0x21, 0x34);
    ONAL("MULU 53, 32", "53, 32", 0x6C, 0x20, 0x35);
    ONAL("MULU 54, 32", "54, 32", 0x6C, 0x20, 0x36);
    ONAL("MULU 55, 32", "55, 32", 0x6C, 0x20, 0x37);
    TEST("MULU 84, #3412H", 0x6D, 0x12, 0x34, 0x54);
    TEST("MULU 84, #3413H", 0x6D, 0x13, 0x34, 0x54);
    TEST("MULU 52, [32]",         0x6E, 0x20, 0x34);
    TEST("MULU 52, [32]+",        0x6E, 0x21, 0x34);
    ONAL("MULU 52, [33]", "[33]", 0x6E, 0x21, 0x34);
    TEST("MULU 84, 52[32]",           0x6F, 0x20, 0x34, 0x54);
    ONAL("MULU 84, 52[33]", "52[33]", 0x6F, 0x20, 0x34, 0x54);
    TEST("MULU 120, 5633H[32]",              0x6F, 0x21, 0x33, 0x56, 0x78);
    ONAL("MULU 120, 5633H[33]", "5633H[33]", 0x6F, 0x21, 0x33, 0x56, 0x78);
    TEST("MULU 120, 5632H",                  0x6F, 0x01, 0x32, 0x56, 0x78);
    ONAL("MULU 120, 5633H", "5633H",         0x6F, 0x01, 0x33, 0x56, 0x78);

    TEST("MULUB 36, 32",        0x7C, 0x20, 0x24);
    TEST("MULUB 36, #32",       0x7D, 0x20, 0x24);
    TEST("MULUB 36, [32]",      0x7E, 0x20, 0x24);
    TEST("MULUB 36, [32]+",     0x7E, 0x21, 0x24);
    TEST("MULUB 52, 35[32]",    0x7F, 0x20, 0x23, 0x34);
    TEST("MULUB 70, 3423H[32]", 0x7F, 0x21, 0x23, 0x34, 0x46);

    TEST("DIV 52, 32",         0xFE, 0x8C, 0x20, 0x34);
    TEST("DIV 84, #3412H",     0xFE, 0x8D, 0x12, 0x34, 0x54);
    TEST("DIV 52, [32]",       0xFE, 0x8E, 0x20, 0x34);
    TEST("DIV 52, [32]+",      0xFE, 0x8E, 0x21, 0x34);
    TEST("DIV 84, 52[32]",     0xFE, 0x8F, 0x20, 0x34, 0x54);
    TEST("DIV 120, 5634H[32]", 0xFE, 0x8F, 0x21, 0x34, 0x56, 0x78);

    TEST("DIVB 36, 32",        0xFE, 0x9C, 0x20, 0x24);
    TEST("DIVB 36, #32",       0xFE, 0x9D, 0x20, 0x24);
    TEST("DIVB 36, [32]",      0xFE, 0x9E, 0x20, 0x24);
    TEST("DIVB 36, [32]+",     0xFE, 0x9E, 0x21, 0x24);
    TEST("DIVB 52, 35[32]",    0xFE, 0x9F, 0x20, 0x23, 0x34);
    TEST("DIVB 70, 3423H[32]", 0xFE, 0x9F, 0x21, 0x23, 0x34, 0x46);

    TEST("DIVU 52, 32",         0x8C, 0x20, 0x34);
    TEST("DIVU 84, #3412H",     0x8D, 0x12, 0x34, 0x54);
    TEST("DIVU 52, [32]",       0x8E, 0x20, 0x34);
    TEST("DIVU 52, [32]+",      0x8E, 0x21, 0x34);
    TEST("DIVU 84, 52[32]",     0x8F, 0x20, 0x34, 0x54);
    TEST("DIVU 120, 5634H[32]", 0x8F, 0x21, 0x34, 0x56, 0x78);

    TEST("DIVUB 36, 32",        0x9C, 0x20, 0x24);
    TEST("DIVUB 36, #32",       0x9D, 0x20, 0x24);
    TEST("DIVUB 36, [32]",      0x9E, 0x20, 0x24);
    TEST("DIVUB 36, [32]+",     0x9E, 0x21, 0x24);
    TEST("DIVUB 52, 35[32]",    0x9F, 0x20, 0x23, 0x34);
    TEST("DIVUB 70, 3423H[32]", 0x9F, 0x21, 0x23, 0x34, 0x46);

    TEST("AND 52, 32",         0x60, 0x20, 0x34);
    TEST("AND 86, #3412H",     0x61, 0x12, 0x34, 0x56);
    TEST("AND 52, [32]",       0x62, 0x20, 0x34);
    TEST("AND 52, [32]+",      0x62, 0x21, 0x34);
    TEST("AND 86, 52[32]",     0x63, 0x20, 0x34, 0x56);
    TEST("AND 120, 5634H[32]", 0x63, 0x21, 0x34, 0x56, 0x78);

    TEST("ANDB 35, 32",        0x70, 0x20, 0x23);
    TEST("ANDB 35, #32",       0x71, 0x20, 0x23);
    TEST("ANDB 35, [32]",      0x72, 0x20, 0x23);
    TEST("ANDB 35, [32]+",     0x72, 0x21, 0x23);
    TEST("ANDB 52, 35[32]",    0x73, 0x20, 0x23, 0x34);
    TEST("ANDB 69, 3423H[32]", 0x73, 0x21, 0x23, 0x34, 0x45);

    TEST("OR 52, 32",         0x80, 0x20, 0x34);
    TEST("OR 86, #3412H",     0x81, 0x12, 0x34, 0x56);
    TEST("OR 52, [32]",       0x82, 0x20, 0x34);
    TEST("OR 52, [32]+",      0x82, 0x21, 0x34);
    TEST("OR 86, 52[32]",     0x83, 0x20, 0x34, 0x56);
    TEST("OR 120, 5634H[32]", 0x83, 0x21, 0x34, 0x56, 0x78);

    TEST("ORB 35, 32",        0x90, 0x20, 0x23);
    TEST("ORB 35, #32",       0x91, 0x20, 0x23);
    TEST("ORB 35, [32]",      0x92, 0x20, 0x23);
    TEST("ORB 35, [32]+",     0x92, 0x21, 0x23);
    TEST("ORB 52, 35[32]",    0x93, 0x20, 0x23, 0x34);
    TEST("ORB 69, 3423H[32]", 0x93, 0x21, 0x23, 0x34, 0x45);

    TEST("XOR 52, 32",         0x84, 0x20, 0x34);
    TEST("XOR 86, #3412H",     0x85, 0x12, 0x34, 0x56);
    TEST("XOR 52, [32]",       0x86, 0x20, 0x34);
    TEST("XOR 52, [32]+",      0x86, 0x21, 0x34);
    TEST("XOR 86, 52[32]",     0x87, 0x20, 0x34, 0x56);
    TEST("XOR 120, 5634H[32]", 0x87, 0x21, 0x34, 0x56, 0x78);

    TEST("XORB 35, 32",        0x94, 0x20, 0x23);
    TEST("XORB 35, #32",       0x95, 0x20, 0x23);
    TEST("XORB 35, [32]",      0x96, 0x20, 0x23);
    TEST("XORB 35, [32]+",     0x96, 0x21, 0x23);
    TEST("XORB 52, 35[32]",    0x97, 0x20, 0x23, 0x34);
    TEST("XORB 69, 3423H[32]", 0x97, 0x21, 0x23, 0x34, 0x45);
}

void test_3_operands() {
    TEST("ADD 86, 52, 32",               0x44, 0x20, 0x34, 0x56);
    ONAL("ADD 86, 52, 33", "33",         0x44, 0x21, 0x34, 0x56);
    ONAL("ADD 86, 53, 32", "53, 32",     0x44, 0x20, 0x35, 0x56);
    ONAL("ADD 87, 52, 32", "87, 52, 32", 0x44, 0x20, 0x34, 0x57);
    TEST("ADD 120, 86, #3412H", 0x45, 0x12, 0x34, 0x56, 0x78);
    TEST("ADD 120, 86, #3413H", 0x45, 0x13, 0x34, 0x56, 0x78);
    TEST("ADD 86, 52, [32]",         0x46, 0x20, 0x34, 0x56);
    TEST("ADD 86, 52, [32]+",        0x46, 0x21, 0x34, 0x56);
    ONAL("ADD 86, 52, [33]", "[33]", 0x46, 0x21, 0x34, 0x56);
    TEST("ADD 120, 86, 52[32]",                  0x47, 0x20, 0x34, 0x56, 0x78);
    TEST("ADD 154, 120, 5635H[32]",              0x47, 0x21, 0x35, 0x56, 0x78, 0x9A);
    ONAL("ADD 154, 120, 5635H[33]", "5635H[33]", 0x47, 0x21, 0x35, 0x56, 0x78, 0x9A);
    TEST("ADD 154, 120, 5634H",                  0x47, 0x01, 0x34, 0x56, 0x78, 0x9A);
    ONAL("ADD 154, 120, 5635H", "5635H",         0x47, 0x01, 0x35, 0x56, 0x78, 0x9A);

    TEST("ADDB 52, 35, 32",        0x54, 0x20, 0x23, 0x34);
    TEST("ADDB 52, 35, 33",        0x54, 0x21, 0x23, 0x34);
    TEST("ADDB 53, 35, 32",        0x54, 0x20, 0x23, 0x35);
    TEST("ADDB 52, 35, #32",       0x55, 0x20, 0x23, 0x34);
    TEST("ADDB 52, 35, [32]",      0x56, 0x20, 0x23, 0x34);
    TEST("ADDB 52, 35, [32]+",     0x56, 0x21, 0x23, 0x34);
    TEST("ADDB 69, 52, 35[32]",    0x57, 0x20, 0x23, 0x34, 0x45);
    TEST("ADDB 86, 69, 3423H[32]", 0x57, 0x21, 0x23, 0x34, 0x45, 0x56);
    TEST("ADDB 86, 69, 3423H",     0x57, 0x01, 0x23, 0x34, 0x45, 0x56);

    TEST("SUB 86, 52, 32",          0x48, 0x20, 0x34, 0x56);
    TEST("SUB 120, 86, #3412H",     0x49, 0x12, 0x34, 0x56, 0x78);
    TEST("SUB 86, 52, [32]",        0x4A, 0x20, 0x34, 0x56);
    TEST("SUB 86, 52, [32]+",       0x4A, 0x21, 0x34, 0x56);
    TEST("SUB 120, 86, 52[32]",     0x4B, 0x20, 0x34, 0x56, 0x78);
    TEST("SUB 154, 120, 5634H[32]", 0x4B, 0x21, 0x34, 0x56, 0x78, 0x9A);

    TEST("SUBB 52, 35, 32",        0x58, 0x20, 0x23, 0x34);
    TEST("SUBB 52, 35, #32",       0x59, 0x20, 0x23, 0x34);
    TEST("SUBB 52, 35, [32]",      0x5A, 0x20, 0x23, 0x34);
    TEST("SUBB 52, 35, [32]+",     0x5A, 0x21, 0x23, 0x34);
    TEST("SUBB 69, 52, 35[32]",    0x5B, 0x20, 0x23, 0x34, 0x45);
    TEST("SUBB 86, 69, 3423H[32]", 0x5B, 0x21, 0x23, 0x34, 0x45, 0x56);

    TEST("MUL 84, 52, 32",      0xFE, 0x4C, 0x20, 0x34, 0x54);
    TEST("MUL 120, 86, #3412H", 0xFE, 0x4D, 0x12, 0x34, 0x56, 0x78);
    TEST("MUL 84, 52, [32]",    0xFE, 0x4E, 0x20, 0x34, 0x54);
    TEST("MUL 84, 52, [32]+",   0xFE, 0x4E, 0x21, 0x34, 0x54);
    TEST("MUL 120, 86, 52[32]",           0xFE, 0x4F, 0x20, 0x34, 0x56, 0x78);
    TEST("MUL 120, 86, 53[32]",           0xFE, 0x4F, 0x20, 0x35, 0x56, 0x78);
    ONAL("MUL 120, 86, 52[33]", "52[33]", 0xFE, 0x4F, 0x20, 0x34, 0x56, 0x78);
    TEST("MUL 152, 120, 5635H[32]",              0xFE, 0x4F, 0x21, 0x35, 0x56, 0x78, 0x98);
    ONAL("MUL 152, 120, 5634H[33]", "5634H[33]", 0xFE, 0x4F, 0x21, 0x34, 0x56, 0x78, 0x98);
    TEST("MUL 152, 120, 5634H",                  0xFE, 0x4F, 0x01, 0x34, 0x56, 0x78, 0x98);
    ONAL("MUL 152, 120, 5635H", "5635H",         0xFE, 0x4F, 0x01, 0x35, 0x56, 0x78, 0x98);

    TEST("MULB 52, 35, 32",               0xFE, 0x5C, 0x20, 0x23, 0x34);
    TEST("MULB 52, 34, 33",               0xFE, 0x5C, 0x21, 0x22, 0x34);
    ONAL("MULB 53, 34, 32", "53, 34, 32", 0xFE, 0x5C, 0x20, 0x22, 0x35);
    TEST("MULB 52, 35, #32",              0xFE, 0x5D, 0x20, 0x23, 0x34);
    TEST("MULB 52, 35, [32]",             0xFE, 0x5E, 0x20, 0x23, 0x34);
    TEST("MULB 52, 35, [32]+",            0xFE, 0x5E, 0x21, 0x23, 0x34);
    TEST("MULB 70, 52, 35[32]",           0xFE, 0x5F, 0x20, 0x23, 0x34, 0x46);
    TEST("MULB 86, 69, 3423H[32]",        0xFE, 0x5F, 0x21, 0x23, 0x34, 0x45, 0x56);

    TEST("MULU 84, 52, 32",               0x4C, 0x20, 0x34, 0x54);
    ONAL("MULU 84, 52, 33", "33",         0x4C, 0x21, 0x34, 0x54);
    ONAL("MULU 84, 53, 32", "53, 32",     0x4C, 0x20, 0x35, 0x54);
    TEST("MULU 84, 54, 32",               0x4C, 0x20, 0x36, 0x54);
    ONAL("MULU 84, 55, 32", "55, 32",     0x4C, 0x20, 0x37, 0x54);
    ONAL("MULU 85, 52, 32", "85, 52, 32", 0x4C, 0x20, 0x34, 0x55);
    ONAL("MULU 86, 52, 32", "86, 52, 32", 0x4C, 0x20, 0x34, 0x56);
    ONAL("MULU 87, 52, 32", "87, 52, 32", 0x4C, 0x20, 0x34, 0x57);
    TEST("MULU 120, 86, #3412H",          0x4D, 0x12, 0x34, 0x56, 0x78);
    TEST("MULU 84, 52, [32]",             0x4E, 0x20, 0x34, 0x54);
    TEST("MULU 84, 52, [32]+",            0x4E, 0x21, 0x34, 0x54);
    TEST("MULU 120, 86, 52[32]",          0x4F, 0x20, 0x34, 0x56, 0x78);
    TEST("MULU 152, 120, 5634H[32]",      0x4F, 0x21, 0x34, 0x56, 0x78, 0x98);

    TEST("MULUB 52, 35, 33",                 0x5C, 0x21, 0x23, 0x34);
    ONAL("MULUB 53, 34, 32", "53, 34, 32",   0x5C, 0x20, 0x22, 0x35);
    TEST("MULUB 52, 35, #32",                0x5D, 0x20, 0x23, 0x34);
    ONAL("MULUB 53, 34, #33", "53, 34, #33", 0x5D, 0x21, 0x22, 0x35);
    TEST("MULUB 52, 35, [32]",               0x5E, 0x20, 0x23, 0x34);
    TEST("MULUB 52, 35, [32]+",              0x5E, 0x21, 0x23, 0x34);
    TEST("MULUB 70, 52, 35[32]",             0x5F, 0x20, 0x23, 0x34, 0x46);
    TEST("MULUB 86, 69, 3423H[32]",          0x5F, 0x21, 0x23, 0x34, 0x45, 0x56);

    TEST("AND 86, 52, 32",          0x40, 0x20, 0x34, 0x56);
    TEST("AND 120, 86, #3412H",     0x41, 0x12, 0x34, 0x56, 0x78);
    TEST("AND 86, 52, [32]",        0x42, 0x20, 0x34, 0x56);
    TEST("AND 86, 52, [32]+",       0x42, 0x21, 0x34, 0x56);
    TEST("AND 120, 86, 52[32]",     0x43, 0x20, 0x34, 0x56, 0x78);
    TEST("AND 154, 120, 5634H[32]", 0x43, 0x21, 0x34, 0x56, 0x78, 0x9A);

    TEST("ANDB 52, 35, 32",        0x50, 0x20, 0x23, 0x34);
    TEST("ANDB 52, 35, #32",       0x51, 0x20, 0x23, 0x34);
    TEST("ANDB 52, 35, [32]",      0x52, 0x20, 0x23, 0x34);
    TEST("ANDB 52, 35, [32]+",     0x52, 0x21, 0x23, 0x34);
    TEST("ANDB 69, 52, 35[32]",    0x53, 0x20, 0x23, 0x34, 0x45);
    TEST("ANDB 86, 69, 3423H[32]", 0x53, 0x21, 0x23, 0x34, 0x45, 0x56);
}

void test_move() {
    TEST("LD 52, 32",           0xA0, 0x20, 0x34);
    ONAL("LD 52, 33", "33",     0xA0, 0x21, 0x34);
    ONAL("LD 53, 32", "53, 32", 0xA0, 0x20, 0x35);
    TEST("LD 86, #3412H",       0xA1, 0x12, 0x34, 0x56);
    TEST("LD 52, [32]",         0xA2, 0x20, 0x34);
    TEST("LD 52, [32]+",        0xA2, 0x21, 0x34);
    TEST("LD 86, 52[32]",          0xA3, 0x20, 0x34, 0x56);
    TEST("LD 120, 5635H[32]",      0xA3, 0x21, 0x35, 0x56, 0x78);
    TEST("LD 120, 5634H",          0xA3, 0x01, 0x34, 0x56, 0x78);
    ONAL("LD 120, 5635H", "5635H", 0xA3, 0x01, 0x35, 0x56, 0x78);

    TEST("LDB 35, 32",           0xB0, 0x20, 0x23);
    TEST("LDB 34, 33",           0xB0, 0x21, 0x22);
    TEST("LDB 35, #32",          0xB1, 0x20, 0x23);
    TEST("LDB 35, [32]",         0xB2, 0x20, 0x23);
    TEST("LDB 35, [32]+",        0xB2, 0x21, 0x23);
    TEST("LDB 236, -19[254]",    0xB3, 0xFE, 0xED, 0xEC);
    TEST("LDB 235, 0ECEDH[254]", 0xB3, 0xFF, 0xED, 0xEC, 0xEB);
    TEST("LDB 235, 0ECEDH",      0xB3, 0x01, 0xED, 0xEC, 0xEB);

    TEST("ST 52, 32",           0xC0, 0x20, 0x34);
    ONAL("ST 52, 33", "33",     0xC0, 0x21, 0x34);
    ONAL("ST 53, 32", "53, 32", 0xC0, 0x20, 0x35);
    ERRT("ST #5634H, 32",       OPERAND_NOT_ALLOWED, "#5634H, 32");
    TEST("ST 52, [32]",         0xC2, 0x20, 0x34);
    TEST("ST 52, [32]+",        0xC2, 0x21, 0x34);
    TEST("ST 86, 53[32]",       0xC3, 0x20, 0x35, 0x56);
    TEST("ST 120, 5635H[32]",      0xC3, 0x21, 0x35, 0x56, 0x78);
    ONAL("ST 120, 5635H", "5635H", 0xC3, 0x01, 0x35, 0x56, 0x78);

    TEST("STB 35, 32",           0xC4, 0x20, 0x23);
    ERRT("STB #23, 32",          OPERAND_NOT_ALLOWED, "#23, 32");
    TEST("STB 35, [32]",         0xC6, 0x20, 0x23);
    TEST("STB 35, [32]+",        0xC6, 0x21, 0x23);
    TEST("STB 236, -19[254]",    0xC7, 0xFE, 0xED, 0xEC);
    TEST("STB 235, 0ECEDH[254]", 0xC7, 0xFF, 0xED, 0xEC, 0xEB);

    TEST("LDBSE 52, 32",           0xBC, 0x20, 0x34);
    TEST("LDBSE 52, 33",           0xBC, 0x21, 0x34);
    ONAL("LDBSE 53, 32", "53, 32", 0xBC, 0x20, 0x35);
    TEST("LDBSE 52, #32",          0xBD, 0x20, 0x34);
    TEST("LDBSE 52, [32]",         0xBE, 0x20, 0x34);
    TEST("LDBSE 52, [32]+",        0xBE, 0x21, 0x34);
    TEST("LDBSE 86, 52[32]",       0xBF, 0x20, 0x34, 0x56);
    TEST("LDBSE 120, 5635H[32]",   0xBF, 0x21, 0x35, 0x56, 0x78);
    TEST("LDBSE 120, 5635H",       0xBF, 0x01, 0x35, 0x56, 0x78);

    TEST("LDBZE 52, 32",           0xAC, 0x20, 0x34);
    TEST("LDBZE 52, 33",           0xAC, 0x21, 0x34);
    ONAL("LDBZE 53, 32", "53, 32", 0xAC, 0x20, 0x35);
    TEST("LDBZE 52, #32",          0xAD, 0x20, 0x34);
    TEST("LDBZE 52, [32]",         0xAE, 0x20, 0x34);
    TEST("LDBZE 52, [32]+",        0xAE, 0x21, 0x34);
    TEST("LDBZE 86, 52[32]",       0xAF, 0x20, 0x34, 0x56);
    TEST("LDBZE 120, 5635H[32]",   0xAF, 0x21, 0x35, 0x56, 0x78);
    TEST("LDBZE 120, 5635H",       0xAF, 0x01, 0x35, 0x56, 0x78);

    TEST("PUSH 32",       0xC8, 0x20);
    ONAL("PUSH 33", "33", 0xC8, 0x21);
    TEST("PUSH #3412H", 0xC9, 0x12, 0x34);
    TEST("PUSH #3413H", 0xC9, 0x13, 0x34);
    TEST("PUSH [32]",         0xCA, 0x20);
    TEST("PUSH [32]+",        0xCA, 0x21);
    ONAL("PUSH [33]", "[33]", 0xCA, 0x21);
    TEST("PUSH 53[32]",                 0xCB, 0x20, 0x35);
    ONAL("PUSH 52[33]", "52[33]",       0xCB, 0x20, 0x34);
    TEST("PUSH 5635H[32]",              0xCB, 0x21, 0x35, 0x56);
    ONAL("PUSH 5634H[33]", "5634H[33]", 0xCB, 0x21, 0x34, 0x56);
    TEST("PUSH 5634H",                  0xCB, 0x01, 0x34, 0x56);
    ONAL("PUSH 5635H", "5635H",         0xCB, 0x01, 0x35, 0x56);

    TEST("POP 32",       0xCC, 0x20);
    ONAL("POP 33", "33", 0xCC, 0x21);
    ERRT("POP #3412H", OPERAND_NOT_ALLOWED, "#3412H");
    TEST("POP [32]",         0xCE, 0x20);
    TEST("POP [32]+",        0xCE, 0x21);
    ONAL("POP [33]", "[33]", 0xCE, 0x21);
    TEST("POP 53[32]",                 0xCF, 0x20, 0x35);
    ONAL("POP 52[33]", "52[33]",       0xCF, 0x20, 0x34);
    TEST("POP 5635H[32]",              0xCF, 0x21, 0x35, 0x56);
    ONAL("POP 5634H[33]", "5634H[33]", 0xCF, 0x21, 0x34, 0x56);
    TEST("POP 5634H",                  0xCF, 0x01, 0x34, 0x56);
    ONAL("POP 5635H", "5635H",         0xCF, 0x01, 0x35, 0x56);

    TEST("PUSHF", 0xF2);
    TEST("POPF",  0xF3);
    if (is80196()) {
        TEST("BMOV  52, 32",           0xC1, 0x20, 0x34);
        ONAL("BMOV  54, 32", "54, 32", 0xC1, 0x20, 0x36);
        ONAL("BMOV  52, 33", "33",     0xC1, 0x21, 0x34);

        TEST("BMOVI  52, 32",           0xCD, 0x20, 0x34);
        ONAL("BMOVI  54, 32", "54, 32", 0xCD, 0x20, 0x36);
        ONAL("BMOVI  52, 33", "33",     0xCD, 0x21, 0x34);

        TEST("XCH 52, 32",         0x04, 0x20, 0x34);
        TEST("XCH 52, [32]",       0x0B, 0x20, 0x00, 0x34);
        TEST("XCH 86, 52[32]",     0x0B, 0x20, 0x34, 0x56);
        TEST("XCH 120, 5634H[32]", 0x0B, 0x21, 0x34, 0x56, 0x78);
        TEST("XCH 120, 5634H",     0x0B, 0x01, 0x34, 0x56, 0x78);
        ONAL("XCH 53, 32", "53, 32", 0x04, 0x20, 0x35);
        ONAL("XCH 52, 33",     "33", 0x04, 0x21, 0x34);
        ONAL("XCH 52, [33]",            "[33]", 0x0B, 0x20, 0x00, 0x34);
        ONAL("XCH 86, 52[33]",        "52[33]", 0x0B, 0x20, 0x34, 0x56);
        ONAL("XCH 120, 5634H[33]", "5634H[33]", 0x0B, 0x21, 0x34, 0x56, 0x78);
        ONAL("XCH 120, 5635H",     "5635H",     0x0B, 0x01, 0x35, 0x56, 0x78);

        TEST("XCHB 53, 32",         0x14, 0x20, 0x35);
        TEST("XCHB 52, 33",         0x14, 0x21, 0x34);;
        TEST("XCHB 52, [32]",       0x1B, 0x20, 0x00, 0x34);
        TEST("XCHB 86, 52[32]",     0x1B, 0x20, 0x34, 0x56);
        TEST("XCHB 120, 5634H[32]", 0x1B, 0x21, 0x34, 0x56, 0x78);
        TEST("XCHB 120, 5635H",     0x1B, 0x01, 0x35, 0x56, 0x78);
        ONAL("XCHB 52, [33]",            "[33]", 0x1B, 0x20, 0x00, 0x34);
        ONAL("XCHB 86, 52[33]",        "52[33]", 0x1B, 0x20, 0x34, 0x56);
        ONAL("XCHB 120, 5634H[33]", "5634H[33]", 0x1B, 0x21, 0x34, 0x56, 0x78);

        TEST("PUSHA", 0xF4);
        TEST("POPA",  0xF5);
    }

    symtab.intern(255,    "?255");
    symtab.intern(-129,   "_129");
    symtab.intern(0x2034, "A_?9");

    TEST("LDB 35, ?255",  0xB0, 0xFF, 0x23);
    TEST("LD  86, #_129", 0xA1, 0x7F, 0xFF, 0x56);
    TEST("LD  86, #A_?9", 0xA1, 0x34, 0x20, 0x56);
}

void test_branch() {
    ATEST(0x2000, "SJMP 2002H",   0x20, 0x00);
    ATEST(0x2000, "SJMP 2200H",   0x21, 0xFE);
    ATEST(0x2000, "SJMP 2202H",   0x22, 0x00);
    ATEST(0x2000, "SJMP 2401H",   0x23, 0xFF);
    AERRT(0x2000, "SJMP 2402H",   OPERAND_TOO_FAR, "2402H", 0x24, 0x00);
    AERRT(0xFF00, "SJMP 0202H",   OVERFLOW_RANGE,  "0202H", 0x23, 0x00);
    AERRT(0x2000, "SJMP 1C01H",   OPERAND_TOO_FAR, "1C01H", 0x23, 0xFF);
    AERRT(0x0100, "SJMP 0FE01H",  OVERFLOW_RANGE, "0FE01H", 0x24, 0xFF);
    ATEST(0x2000, "SJMP 1C02H",   0x24, 0x00);
    ATEST(0x2000, "SJMP 1E00H",   0x25, 0xFE);
    ATEST(0x2000, "SJMP 1E02H",   0x26, 0x00);
    ATEST(0x2000, "SJMP 2000H",   0x27, 0xFE);

    ATEST(0x2000, "LJMP 2003H",   0xE7, 0x00, 0x00);
    ATEST(0x2000, "LJMP $+8002H", 0xE7, 0xFF, 0x7F);
    AERRT(0x2000, "LJMP $+8003H", OVERFLOW_RANGE, "$+8003H", 0xE7, 0x00, 0x80);
    ATEST(0x2000, "LJMP 2103H",   0xE7, 0x00, 0x01);
    ATEST(0x2000, "LJMP 2400H",   0xE7, 0xFD, 0x03);
    ATEST(0x2000, "LJMP 2003H",   0xE7, 0x00, 0x00);
    ATEST(0x2000, "LJMP 2003H",   0xE7, 0x00, 0x00);
    ATEST(0xA000, "LJMP $-7FFDH", 0xE7, 0x00, 0x80);
    AERRT(0xA000, "LJMP $-7FFEH", OVERFLOW_RANGE, "$-7FFEH", 0xE7, 0xFF, 0x7F);
    ATEST(0x2000, "LJMP 2000H",   0xE7, 0xFD, 0xFF);

    ATEST(0x2000, "SCALL 2002H",  0x28, 0x00);
    ATEST(0x2000, "SCALL 2200H",  0x29, 0xFE);
    ATEST(0x2000, "SCALL 2202H",  0x2A, 0x00);
    ATEST(0x2000, "SCALL 2401H",  0x2B, 0xFF);
    AERRT(0x2000, "SCALL 2402H",  OPERAND_TOO_FAR, "2402H", 0x2C, 0x00);
    AERRT(0xFF00, "SCALL 0202H",  OVERFLOW_RANGE,  "0202H", 0x2B, 0x00);
    AERRT(0x2000, "SCALL 1C01H",  OPERAND_TOO_FAR, "1C01H", 0x2B, 0xFF);
    AERRT(0x0100, "SCALL 0FE01H", OVERFLOW_RANGE, "0FE01H", 0x2C, 0xFF);
    ATEST(0x2000, "SCALL 1C02H",  0x2C, 0x00);
    ATEST(0x2000, "SCALL 1E00H",  0x2D, 0xFE);
    ATEST(0x2000, "SCALL 1E02H",  0x2E, 0x00);
    ATEST(0x2000, "SCALL 2000H",  0x2F, 0xFE);

    ATEST(0x2000, "LCALL 2003H",  0xEF, 0x00, 0x00);
    ATEST(0x2000, "LCALL 0A002H", 0xEF, 0xFF, 0x7F);
    AERRT(0x2000, "LCALL 0A003H", OVERFLOW_RANGE, "0A003H", 0xEF, 0x00, 0x80);
    ATEST(0x2000, "LCALL 2103H",  0xEF, 0x00, 0x01);
    ATEST(0x2000, "LCALL 2400H",  0xEF, 0xFD, 0x03);
    ATEST(0x2000, "LCALL 2003H",  0xEF, 0x00, 0x00);
    ATEST(0x2000, "LCALL 2003H",  0xEF, 0x00, 0x00);
    ATEST(0xA000, "LCALL 2003H",  0xEF, 0x00, 0x80);
    AERRT(0xA000, "LCALL 2002H",  OVERFLOW_RANGE, "2002H", 0xEF, 0xFF, 0x7F);
    ATEST(0x2000, "LCALL 2000H",  0xEF, 0xFD, 0xFF);

    TEST("BR [32]",         0xE3, 0x20);
    ERRT("BR [32]+", OPERAND_NOT_ALLOWED, "[32]+");
    ONAL("BR [33]", "[33]", 0xE3, 0x21);
    TEST("RET",     0xF0);

    ATEST(0x2000, "JNST 2002H",   0xD0, 0x00);
    ATEST(0x2000, "JNH  2000H",   0xD1, 0xFE);
    ATEST(0x2000, "JGT  2002H",   0xD2, 0x00);
    ATEST(0x2000, "JNC  2081H",   0xD3, 0x7F);
    ATEST(0x2000, "JNVT 1F82H",   0xD4, 0x80);
    ATEST(0x2000, "JNV  2000H",   0xD5, 0xFE);
    ATEST(0x2000, "JGE  2002H",   0xD6, 0x00);
    ATEST(0x2000, "JNE  2000H",   0xD7, 0xFE);
    ATEST(0x2000, "JST  2002H",   0xD8, 0x00);
    ATEST(0x2000, "JH   2000H",   0xD9, 0xFE);
    ATEST(0x2000, "JLE  2002H",   0xDA, 0x00);
    ATEST(0x2000, "JC   2001H",   0xDB, 0xFF);
    ATEST(0x2000, "JVT  2002H",   0xDC, 0x00);
    ATEST(0x2000, "JV   2000H",   0xDD, 0xFE);
    ATEST(0x2000, "JLT  2002H",   0xDE, 0x00);
    ATEST(0x2000, "JE   2000H",   0xDF, 0xFE);
    AERRT(0x2000, "JE   2082H",   OPERAND_TOO_FAR, "2082H", 0xDF, 0x80);
    AERRT(0x2000, "JE   1F81H",   OPERAND_TOO_FAR, "1F81H", 0xDF, 0x7F);

    ATEST(0x2000, "DJNZ 32, 2000H", 0xE0, 0x20, 0xFD);
    ATEST(0x2000, "DJNZ 32, 2082H", 0xE0, 0x20, 0x7F);
    ATEST(0x2000, "DJNZ 32, 1F83H", 0xE0, 0x20, 0x80);
    ATEST(0x2000, "DJNZ 32, 2003H", 0xE0, 0x20, 0x00);
    AERRT(0x2000, "DJNZ 32, 2083H", OPERAND_TOO_FAR, "2083H", 0xE0, 0x20, 0x80);
    AERRT(0x2000, "DJNZ 32, 1F82H", OPERAND_TOO_FAR, "1F82H", 0xE0, 0x20, 0x7F);

    ATEST(0x2000, "JBC 32, 0, 2000H", 0x30, 0x20, 0xFD);
    ATEST(0x2000, "JBC 32, 1, 2082H", 0x31, 0x20, 0x7F);
    ATEST(0x2000, "JBC 32, 2, 1F83H", 0x32, 0x20, 0x80);
    ATEST(0x2000, "JBC 32, 3, 2003H", 0x33, 0x20, 0x00);
    ATEST(0x2000, "JBC 32, 4, 2000H", 0x34, 0x20, 0xFD);
    ATEST(0x2000, "JBC 32, 5, 2082H", 0x35, 0x20, 0x7F);
    ATEST(0x2000, "JBC 32, 6, 1F83H", 0x36, 0x20, 0x80);
    ATEST(0x2000, "JBC 32, 7, 2003H", 0x37, 0x20, 0x00);
    ATEST(0x2000, "JBS 32, 0, 2000H", 0x38, 0x20, 0xFD);

    ATEST(0x2000, "JBS 32, 1, 2082H", 0x39, 0x20, 0x7F);
    ATEST(0x2000, "JBS 32, 2, 1F83H", 0x3A, 0x20, 0x80);
    ATEST(0x2000, "JBS 32, 3, 2003H", 0x3B, 0x20, 0x00);
    ATEST(0x2000, "JBS 32, 4, 2000H", 0x3C, 0x20, 0xFD);
    ATEST(0x2000, "JBS 32, 5, 2082H", 0x3D, 0x20, 0x7F);
    ATEST(0x2000, "JBS 32, 6, 1F83H", 0x3E, 0x20, 0x80);
    ATEST(0x2000, "JBS 32, 7, 2003H", 0x3F, 0x20, 0x00);
    AERRT(0x2000, "JBS 32, 7, 2083H", OPERAND_TOO_FAR, "2083H", 0x3F, 0x20, 0x80);
    AERRT(0x2000, "JBS 32, 7, 1F82H", OPERAND_TOO_FAR, "1F82H", 0x3F, 0x20, 0x7F);
    AERRT(0x2000, "JBS 32, 8, 2003H",  ILLEGAL_BIT_NUMBER, "8, 2003H",  0x38, 0x20, 0x00);
    AERRT(0x2000, "JBS 32, -1, 2003H", ILLEGAL_BIT_NUMBER, "-1, 2003H", 0x3F, 0x20, 0x00);
}

void test_smart_branch() {
    TEST("option smart-branch, on");

    ATEST(0x2000, "SJMP 2002H", 0x20, 0x00);
    ATEST(0x2000, "SJMP 2401H", 0x23, 0xFF);
    ATEST(0x2000, "SJMP 2402H", 0xE7, 0xFF, 0x03);
    AERRT(0xFF00, "SJMP 0202H", OVERFLOW_RANGE,  "0202H", 0x23, 0x00);
    ATEST(0x2000, "SJMP 1C01H", 0xE7, 0xFE, 0xFB);
    AERRT(0x0100, "SJMP 0FE01H",OVERFLOW_RANGE, "0FE01H", 0x24, 0xFF);
    ATEST(0x2000, "SJMP 1C02H", 0x24, 0x00);
    ATEST(0x2000, "SJMP 2000H", 0x27, 0xFE);

    ATEST(0x2000, "LJMP 2002H", 0x20, 0x00);
    ATEST(0x2000, "LJMP 2401H", 0x23, 0xFF);
    ATEST(0x2000, "LJMP 2402H", 0xE7, 0xFF, 0x03);
    ATEST(0x2000, "LJMP 1C01H", 0xE7, 0xFE, 0xFB);
    ATEST(0x2000, "LJMP 1C02H", 0x24, 0x00);
    ATEST(0x2000, "LJMP 2000H", 0x27, 0xFE);
    ATEST(0x2000, "LJMP $+8002H",                            0xE7, 0xFF, 0x7F);
    AERRT(0x2000, "LJMP $+8003H", OVERFLOW_RANGE, "$+8003H", 0xE7, 0x00, 0x80);
    ATEST(0xA000, "LJMP $-7FFDH",                            0xE7, 0x00, 0x80);
    AERRT(0xA000, "LJMP $-7FFEH", OVERFLOW_RANGE, "$-7FFEH", 0xE7, 0xFF, 0x7F);

    ATEST(0x2000, "SCALL 2002H", 0x28, 0x00);
    ATEST(0x2000, "SCALL 2401H", 0x2B, 0xFF);
    ATEST(0x2000, "SCALL 2402H", 0xEF, 0xFF, 0x03);
    AERRT(0xFF00, "SCALL 0202H",  OVERFLOW_RANGE,  "0202H", 0x2B, 0x00);
    ATEST(0x2000, "SCALL 1C01H", 0xEF, 0xFE, 0xFB);
    AERRT(0x0100, "SCALL 0FE01H", OVERFLOW_RANGE, "0FE01H", 0x2C, 0xFF);
    ATEST(0x2000, "SCALL 1C02H", 0x2C, 0x00);
    ATEST(0x2000, "SCALL 2000H", 0x2F, 0xFE);

    ATEST(0x2000, "LCALL 2002H", 0x28, 0x00);
    ATEST(0x2000, "LCALL 2401H", 0x2B, 0xFF);
    ATEST(0x2000, "LCALL 2402H", 0xEF, 0xFF, 0x03);
    ATEST(0x2000, "LCALL 1C01H", 0xEF, 0xFE, 0xFB);
    ATEST(0x2000, "LCALL 1C02H", 0x2C, 0x00);
    ATEST(0x2000, "LCALL 2000H", 0x2F, 0xFE);
    ATEST(0x2000, "LCALL 0A002H",                           0xEF, 0xFF, 0x7F);
    AERRT(0x2000, "LCALL 0A003H", OVERFLOW_RANGE, "0A003H", 0xEF, 0x00, 0x80);
    ATEST(0xA000, "LCALL 2003H",                            0xEF, 0x00, 0x80);
    AERRT(0xA000, "LCALL 2002H",  OVERFLOW_RANGE, "2002H",  0xEF, 0xFF, 0x7F);

    ATEST(0x2000, "JE 2081H",                           0xDF, 0x7F);
    AERRT(0x2000, "JE 2082H", OPERAND_TOO_FAR, "2082H", 0xDF, 0x80);
    ATEST(0x2000, "JE 1F82H",                           0xDF, 0x80);
    AERRT(0x2000, "JE 1F81H", OPERAND_TOO_FAR, "1F81H", 0xDF, 0x7F);

    ATEST(0x2000, "DJNZ 32, 2082H",                           0xE0, 0x20, 0x7F);
    AERRT(0x2000, "DJNZ 32, 2083H", OPERAND_TOO_FAR, "2083H", 0xE0, 0x20, 0x80);
    ATEST(0x2000, "DJNZ 32, 1F83H",                           0xE0, 0x20, 0x80);
    AERRT(0x2000, "DJNZ 32, 1F82H", OPERAND_TOO_FAR, "1F82H", 0xE0, 0x20, 0x7F);

    if (is80196()) {
        ATEST(0x2000, "DJNZW 32, 2082H",                           0xE1, 0x20, 0x7F);
        AERRT(0x2000, "DJNZW 32, 2083H", OPERAND_TOO_FAR, "2083H", 0xE1, 0x20, 0x80);
        ATEST(0x2000, "DJNZW 32, 1F83H",                           0xE1, 0x20, 0x80);
        AERRT(0x2000, "DJNZW 32, 1F82H", OPERAND_TOO_FAR, "1F82H", 0xE1, 0x20, 0x7F);
        ONAL(         "DJNZW 33, $", "33, $",                      0xE1, 0x21, 0xFD);
    }

    ATEST(0x2000, "JBC 32, 1, 2082H",                           0x31, 0x20, 0x7F);
    AERRT(0x2000, "JBS 32, 7, 2083H", OPERAND_TOO_FAR, "2083H", 0x3F, 0x20, 0x80);
    ATEST(0x2000, "JBC 32, 2, 1F83H",                           0x32, 0x20, 0x80);
    AERRT(0x2000, "JBS 32, 7, 1F82H", OPERAND_TOO_FAR, "1F82H", 0x3F, 0x20, 0x7F);

    if (is80196()) {
        TEST("TIJMP 86, 32, #0FH",                           0xE2, 0x20, 0x0F, 0x56);
        ONAL("TIJMP 87, 32, #0FH", "87, 32, #0FH",           0xE2, 0x20, 0x0F, 0x57);
        ONAL("TIJMP 86, 33, #0FH", "33, #0FH",               0xE2, 0x21, 0x0F, 0x56);
        ERRT("TIJMP 86, 32, #100H", OVERFLOW_RANGE, "#100H", 0xE2, 0x20, 0x00, 0x56);
    }
}

void test_modify() {
    TEST("DEC  6",      0x05, 0x06);
    ONAL("DEC  9", "9", 0x05, 0x09);
    TEST("DECB 7", 0x15, 0x07);
    TEST("INC  8", 0x07, 0x08);
    TEST("INCB 9", 0x17, 0x09);
    TEST("EXT  8",       0x06, 0x08);
    ONAL("EXT  9",  "9", 0x06, 0x09);
    ONAL("EXT 10", "10", 0x06, 0x0A);
    ONAL("EXT 11", "11", 0x06, 0x0B);
    TEST("EXT 12",      0x06, 0x0C);
    TEST("EXTB 6",      0x16, 0x06);
    ONAL("EXTB 7", "7", 0x16, 0x07);
    TEST("EXTB 8",      0x16, 0x08);
    TEST("NOT  8", 0x02, 0x08);
    TEST("NOTB 9", 0x12, 0x09);
    TEST("CLR  6", 0x01, 0x06);
    TEST("CLRB 7", 0x11, 0x07);

    TEST("SHL  10, #11",          0x09, 0x0B, 0x0A);
    TEST("SHL  10, 11",           0x09, 0x0B, 0x0A);
    ONAL("SHL  11, 16", "11, 16", 0x09, 0x10, 0x0B);
    TEST("SHLB 23, #11", 0x19, 0x0B, 0x17);
    TEST("SHLB 23, 15",  0x19, 0x0F, 0x17);
    TEST("SHLL 24, #11", 0x0D, 0x0B, 0x18);
    TEST("SHLL 24, 17",  0x0D, 0x11, 0x18);
    ONAL("SHLL 25, 16", "25, 16", 0x0D, 0x10, 0x19);
    ONAL("SHLL 26, 16", "26, 16", 0x0D, 0x10, 0x1A);
    ONAL("SHLL 27, 16", "27, 16", 0x0D, 0x10, 0x1B);

    TEST("SHR  10, #15", 0x08, 0x0F, 0x0A);
    TEST("SHR  10, 16",  0x08, 0x10, 0x0A);
    TEST("SHRB 23, #15", 0x18, 0x0F, 0x17);
    TEST("SHRB 23, 16",  0x18, 0x10, 0x17);
    TEST("SHRL 24, #15", 0x0C, 0x0F, 0x18);
    TEST("SHRL 24, 16",  0x0C, 0x10, 0x18);

    TEST("SHRA  10, #11", 0x0A, 0x0B, 0x0A);
    TEST("SHRA  10, 16",  0x0A, 0x10, 0x0A);
    TEST("SHRAB 23, #11", 0x1A, 0x0B, 0x17);
    TEST("SHRAB 23, 16",  0x1A, 0x10, 0x17);
    TEST("SHRAL 24, #11", 0x0E, 0x0B, 0x18);
    TEST("SHRAL 24, 16",  0x0E, 0x10, 0x18);

    TEST("NORML 20, 33",           0x0F, 0x21, 0x14);
    ONAL("NORML 21, 33", "21, 33", 0x0F, 0x21, 0x15);
    ONAL("NORML 22, 33", "22, 33", 0x0F, 0x21, 0x16);
    ONAL("NORML 23, 33", "23, 33", 0x0F, 0x21, 0x17);
}

void test_control() {
    TEST("SETC",   0xF9);
    TEST("CLRC",   0xF8);
    TEST("CLRVT",  0xFC);
    TEST("RST",    0xFF);
    TEST("DI",     0xFA);
    TEST("EI",     0xFB);
    TEST("NOP",    0xFD);
    TEST("SKIP 1", 0x00, 0x01);
    TEST("TRAP",   0xF7);
    if (is80196()) {
        TEST("DPTS",  0xEC);
        TEST("EPTS",  0xED);
        TEST("IDLPD #2", 0xF6, 0x02);
    }
}

void test_comment() {
    COMM("SUB 52, 32         ; comment", "; comment", 0x68, 0x20, 0x34);
    COMM("SUB 86, #3412H     ; comment", "; comment", 0x69, 0x12, 0x34, 0x56);
    COMM("SUB 52, [32]       ; comment", "; comment", 0x6A, 0x20, 0x34);
    COMM("SUB 86, 52[32]     ; comment", "; comment", 0x6B, 0x20, 0x34, 0x56);
    COMM("SUB 120, 5634H[32] ; comment", "; comment", 0x6B, 0x21, 0x34, 0x56, 0x78);
    COMM("DCB -128, 255      ; comment", "; comment", 0x80, 0xFF);
    COMM("DCB 'TEXT'         ; comment", "; comment", 0x54, 0x45, 0x58, 0x54);
    COMM("DCW -128, 255      ; comment", "; comment", 0x80, 0xFF, 0xFF, 0x00);
    COMM("DCL 12345678H      ; comment", "; comment", 0x78, 0x56, 0x34, 0x12);
}

void test_undef() {
    ERUS("SKIP UNDEF", "UNDEF", 0x00, 0x00);

    ERUS("ADD UNDEF, 32",      "UNDEF, 32",      0x64, 0x20, 0x00);
    ERUS("ADD 52, UNDEF",      "UNDEF",          0x67, 0x01, 0x00, 0x00, 0x34);
    ERUS("ADD UNDEF, UNDEF",   "UNDEF, UNDEF",   0x67, 0x01, 0x00, 0x00, 0x00);
    ERUS("ADD UNDEF, #1234H",  "UNDEF, #1234H",  0x65, 0x34, 0x12, 0x00);
    ERUS("ADD 86, #UNDEF",     "UNDEF",          0x65, 0x00, 0x00, 0x56);
    ERUS("ADD UNDEF, #UNDEF",  "UNDEF, #UNDEF",  0x65, 0x00, 0x00, 0x00);
    ERUS("ADD UNDEF, [32]",    "UNDEF, [32]",    0x66, 0x20, 0x00);
    ERUS("ADD 86, [UNDEF]",    "UNDEF]",         0x66, 0x00, 0x56);
    ERUS("ADD UNDEF, [UNDEF]", "UNDEF, [UNDEF]", 0x66, 0x00, 0x00);
    ERUS("ADD UNDEF, 52[32]",  "UNDEF, 52[32]",  0x67, 0x20, 0x34, 0x00);
    ERUS("ADD 86, UNDEF[32]",  "UNDEF[32]",      0x67, 0x21, 0x00, 0x00, 0x56);
    ERUS("ADD 86, 52[UNDEF]",  "UNDEF]",         0x67, 0x01, 0x34, 0x00, 0x56);
    ERUS("ADD UNDEF, UNDEF[32]",    "UNDEF, UNDEF[32]",    0x67, 0x21, 0x00, 0x00, 0x00);
    ERUS("ADD UNDEF, 52[UNDEF]",    "UNDEF, 52[UNDEF]",    0x67, 0x01, 0x34, 0x00, 0x00);
    ERUS("ADD 86, UNDEF[UNDEF]",    "UNDEF[UNDEF]",        0x67, 0x01, 0x00, 0x00, 0x56);
    ERUS("ADD UNDEF, UNDEF[UNDEF]", "UNDEF, UNDEF[UNDEF]", 0x67, 0x01, 0x00, 0x00, 0x00);

    ERUS("SHLL 24, #UNDEF", "UNDEF", 0x0D, 0x00, 0x18);
    ERUS("SHLL 24, UNDEF",  "UNDEF", 0x0D, 0x00, 0x18);

    AERUS(0x2000, "SJMP  UNDEF", "UNDEF", 0x20, 0x00);
    AERUS(0x2000, "LJMP  UNDEF", "UNDEF", 0xE7, 0x00, 0x00);
    AERUS(0x2000, "SCALL UNDEF", "UNDEF", 0x28, 0x00);
    AERUS(0x2000, "LCALL UNDEF", "UNDEF", 0xEF, 0x00, 0x00);
    AERUS(0x2000, "JNE   UNDEF", "UNDEF", 0xD7, 0x00);
    AERUS(0x2000, "DJNZ UNDEF, $",  "UNDEF, $", 0xE0, 0x00, 0xFD);
    AERUS(0x2000, "DJNZ 32, UNDEF", "UNDEF",    0xE0, 0x20, 0x00);

    AERUS(0x2000, "JBC 32, 0, UNDEF", "UNDEF", 0x30, 0x20, 0x00);
    AERUS(0x2000, "JBS 32, 7, UNDEF", "UNDEF", 0x3F, 0x20, 0x00);

    TEST("option smart-branch, on");
    AERUS(0x2000, "SJMP  UNDEF", "UNDEF", 0xE7, 0x00, 0x00);
    AERUS(0x2000, "LJMP  UNDEF", "UNDEF", 0xE7, 0x00, 0x00);
    AERUS(0x2000, "SCALL UNDEF", "UNDEF", 0xEF, 0x00, 0x00);
    AERUS(0x2000, "LCALL UNDEF", "UNDEF", 0xEF, 0x00, 0x00);
}

void test_data_constant() {
    TEST("DCB -128, 255", 0x80, 0xFF);
    TEST(R"(DCB 'A', '"')", 0x41, 0x22);
    TEST("DCB '9'-'0'",   0x09);
    TEST("DCB ''''",      0x27);
    ERRT("DCB '''",       MISSING_CLOSING_QUOTE, "'''");
    TEST("DCB 'A''B',0",  0x41, 0x27, 0x42, 0x00);
    ERRT("DCB 'A''B,0",   MISSING_CLOSING_QUOTE, "'A''B,0");
    TEST("DCW -128, 255", 0x80, 0xFF, 0xFF, 0x00);
    TEST("DCW 'A''B'",    0x41, 0x27, 0x42, 0x00);
    ERRT("DCW 'A''B",     MISSING_CLOSING_QUOTE, "'A''B");
    TEST("DCL 12345678H", 0x78, 0x56, 0x34, 0x12);
    TEST(R"(DCL 'A''B"C')", 0x41, 0x27, 0x42, 0x22, 0x43, 0x00, 0x00, 0x00);
    ERRT(R"(DCL 'A''B"C)",  MISSING_CLOSING_QUOTE, "'A''B\"C");
    ERUS("DCB 1, UNDEF, 2", "UNDEF, 2", 0x01, 0x00, 0x02);
    ERUS("DCW 1, UNDEF, 2", "UNDEF, 2", 0x01, 0x00, 0x00, 0x00, 0x02, 0x00);
    ERUS("DCL 1, UNDEF, 2", "UNDEF, 2",
         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00);

    ERRT("DCB '"
         "1234567890" "1234567890" "1234567890" "1234567890" "1234567890" "1234567890"
         "1234567890'",
         NO_MEMORY,
         "567890'",
         0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
         0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
         0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
         0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
         0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
         0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
         0x31, 0x32, 0x33, 0x34);

    ERRT("DCL "
         "12345678H, 9ABCDEF0H, 12345678H, 9ABCDEF0H, "
         "12345678H, 9ABCDEF0H, 12345678H, 9ABCDEF0H, "
         "12345678H, 9ABCDEF0H, 12345678H, 9ABCDEF0H, "
         "12345678H, 9ABCDEF0H, 12345678H, 9ABCDEH, "
         "0AAAAH, 0BBBBH",
         NO_MEMORY,
         "0AAAAH, 0BBBBH",
         0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A,
         0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A,
         0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A,
         0x78, 0x56, 0x34, 0x12, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12, 0xDE, 0xBC, 0x9A, 0x00);
}

// clang-format on

void run_tests(const char *cpu) {
    assembler.setCpu(cpu);
    RUN_TEST(test_2_operands);
    RUN_TEST(test_3_operands);
    RUN_TEST(test_move);
    RUN_TEST(test_branch);
    RUN_TEST(test_smart_branch);
    RUN_TEST(test_modify);
    RUN_TEST(test_control);
    RUN_TEST(test_comment);
    RUN_TEST(test_undef);
    RUN_TEST(test_data_constant);
}

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
