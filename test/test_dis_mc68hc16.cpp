/*
 * Copyright 2025 Tadashi G. Takaoka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "dis_mc68hc16.h"
#include "test_dis_helper.h"
#include "test_symtab.h"

using namespace libasm;
using namespace libasm::mc68hc16;
using namespace libasm::test;

DisMc68HC16 dis6816;
Disassembler &disassembler(dis6816);

void set_up() {
    disassembler.reset();
}

void tear_down() {
    symtab.reset();
}

// clang-format off
void test_cpu() {
    EQUALS("cpu 68hc16", true, disassembler.setCpu("68hc16"));
    EQUALS_P("cpu 68hc16", "68HC16", disassembler.config().cpu_P());

    EQUALS("cpu MC68HC16", true, disassembler.setCpu("MC68HC16"));
    EQUALS_P("cpu MC68HC16", "68HC16", disassembler.config().cpu_P());
}

void test_load() {
    TEST("LDAA", "$46,X",   0x45, 0x46);
    TEST("LDAA", "#$76",    0x75, 0x76);
    TEST("LDAA", "$5657,Y", 0x17, 0x55, 0x56, 0x57);
    TEST("LDAA", "$7677",   0x17, 0x75, 0x76, 0x77);
    TEST("LDAA", "E,Z",     0x27, 0x65);

    TEST("LDAB", "$D6,Y",    0xD5, 0xD6);
    TEST("LDAB", "#$F6",     0xF5, 0xF6);
    TEST("LDAB", "-$1919,Z", 0x17, 0xE5, 0xE6, 0xE7);
    TEST("LDAB", "$F6F7",    0x17, 0xF5, 0xF6, 0xF7);
    TEST("LDAB", "E,X",      0x27, 0xC5);

    TEST("LDD", "$A6,Z",    0xA5, 0xA6);
    TEST("LDD", "#$B6B7",   0x37, 0xB5, 0xB6, 0xB7);
    TEST("LDD", "-$3939,X", 0x37, 0xC5, 0xC6, 0xC7);
    TEST("LDD", "$F6F7",    0x37, 0xF5, 0xF6, 0xF7);
    TEST("LDD", "E,Y",      0x27, 0x95);

    TEST("LDE", "#$3637",  0x37, 0x35, 0x36, 0x37);
    TEST("LDE", "$6667,Z", 0x37, 0x65, 0x66, 0x67);
    TEST("LDE", "$7677",   0x37, 0x75, 0x76, 0x77);

    TEST("LDED", "$7273", 0x27, 0x71, 0x72, 0x73);
}

void test_move() {
    TEST("MOVB", "$31,X, $3233", 0x30, 0x31, 0x32, 0x33);
    TEST("MOVB", "$3435, $33,X", 0x32, 0x33, 0x34, 0x35);
    TEST("MOVB", "$FF00, $0102", 0x37, 0xFE, 0xFF, 0x00, 0x01, 0x02);

    TEST("MOVW", "$32,X, $3334", 0x31, 0x32, 0x33, 0x34);
    TEST("MOVW", "$3536, $34,X", 0x33, 0x34, 0x35, 0x36);
    TEST("MOVW", "$0001, $0203", 0x37, 0xFF, 0x00, 0x01, 0x02, 0x03);
}

void test_store() {
    TEST("STAA", "$4B,X",   0x4A, 0x4B);
    TEST("STAA", "$5B5C,Y", 0x17, 0x5A, 0x5B, 0x5C);
    TEST("STAA", "$7B7C",   0x17, 0x7A, 0x7B, 0x7C);
    TEST("STAA", "E,Z",     0x27, 0x6A);

    TEST("STAB", "$DB,Y",    0xDA, 0xDB);
    TEST("STAB", "-$1414,Z", 0x17, 0xEA, 0xEB, 0xEC);
    TEST("STAB", "$FBFC",    0x17, 0xFA, 0xFB, 0xFC);
    TEST("STAB", "E,X",      0x27, 0xCA);

    TEST("STD", "$AB,Z",    0xAA, 0xAB);
    TEST("STD", "-$3434,X", 0x37, 0xCA, 0xCB, 0xCC);
    TEST("STD", "$FBFC",    0x37, 0xFA, 0xFB, 0xFC);
    TEST("STD", "E,Y",      0x27, 0x9A);

    TEST("STE", "$6B6C,Z", 0x37, 0x6A, 0x6B, 0x6C);
    TEST("STE", "$7B7C",   0x37, 0x7A, 0x7B, 0x7C);

    TEST("STED", "$7475", 0x27, 0x73, 0x74, 0x75);
}

void test_transfer() {
    TEST("TAB", "", 0x37, 0x17);
    TEST("TBA", "", 0x37, 0x07);

    TEST("TDE", "", 0x27, 0x7B);
    TEST("TED", "", 0x27, 0xFB);
}

void test_exchange() {
    TEST("XGAB", "",  0x37, 0x1A);
    TEST("XGDE", "",  0x27, 0x7A);
}

void test_add_sub() {
    TEST("ABA", "", 0x37, 0x0B);

    TEST("ADCA", "$44,X",   0x43, 0x44);
    TEST("ADCA", "$54,Y",   0x53, 0x54);
    TEST("ADCA", "$64,Z",   0x63, 0x64);
    TEST("ADCA", "#$74",    0x73, 0x74);
    TEST("ADCA", "$4445,X", 0x17, 0x43, 0x44, 0x45);
    TEST("ADCA", "$5455,Y", 0x17, 0x53, 0x54, 0x55);
    TEST("ADCA", "$6465,Z", 0x17, 0x63, 0x64, 0x65);
    TEST("ADCA", "$7475",   0x17, 0x73, 0x74, 0x75);
    TEST("ADCA", "E,X",     0x27, 0x43);
    TEST("ADCA", "E,Y",     0x27, 0x53);
    TEST("ADCA", "E,Z",     0x27, 0x63);

    TEST("ADCB", "$C4,X",    0xC3, 0xC4);
    TEST("ADCB", "#$F4",     0xF3, 0xF4);
    TEST("ADCB", "-$2B2B,Y", 0x17, 0xD3, 0xD4, 0xD5);
    TEST("ADCB", "$F4F5",    0x17, 0xF3, 0xF4, 0xF5);
    TEST("ADCB", "E,Z",      0x27, 0xE3);

    TEST("ADCD", "$94,Y",    0x93, 0x94);
    TEST("ADCD", "#$B4B5",   0x37, 0xB3, 0xB4, 0xB5);
    TEST("ADCD", "-$1B1B,Z", 0x37, 0xE3, 0xE4, 0xE5);
    TEST("ADCD", "$F4F5",    0x37, 0xF3, 0xF4, 0xF5);
    TEST("ADCD", "E,X",      0x27, 0x83);

    TEST("ADCE", "#$3435",  0x37, 0x33, 0x34, 0x35);
    TEST("ADCE", "$4445,X", 0x37, 0x43, 0x44, 0x45);
    TEST("ADCE", "$7475",   0x37, 0x73, 0x74, 0x75);

    TEST("ADDA", "$62,Z",   0x61, 0x62);
    TEST("ADDA", "#$72",    0x71, 0x72);
    TEST("ADDA", "$4243,X", 0x17, 0x41, 0x42, 0x43);
    TEST("ADDA", "$7273",   0x17, 0x71, 0x72, 0x73);
    TEST("ADDA", "E,Y",     0x27, 0x51);

    TEST("ADDB", "$D2,Y",    0xD1, 0xD2);
    TEST("ADDB", "#$F2",     0xF1, 0xF2);
    TEST("ADDB", "-$1D1D,Z", 0x17, 0xE1, 0xE2, 0xE3);
    TEST("ADDB", "$F2F3",    0x17, 0xF1, 0xF2, 0xF3);
    TEST("ADDB", "E,X",      0x27, 0xC1);

    TEST("ADDD", "$82,X",    0x81, 0x82);
    TEST("ADDD", "#$FD",     0xFC, 0xFD);
    TEST("ADDD", "#$B2B3",   0x37, 0xB1, 0xB2, 0xB3);
    TEST("ADDD", "-$2D2D,Y", 0x37, 0xD1, 0xD2, 0xD3);
    TEST("ADDD", "$F2F3",    0x37, 0xF1, 0xF2, 0xF3);
    TEST("ADDD", "E,Z",      0x27, 0xA1);

    TEST("ADDE", "#$7D",    0x7C, 0x7D);
    TEST("ADDE", "#$3233",  0x37, 0x31, 0x32, 0x33);
    TEST("ADDE", "$6263,Z", 0x37, 0x61, 0x62, 0x63);
    TEST("ADDE", "$7273",   0x37, 0x71, 0x72, 0x73);

    TEST("ADE", "", 0x27, 0x78);

    TEST("SBA", "", 0x37, 0x0A);

    TEST("SBCA", "$43,X",   0x42, 0x43);
    TEST("SBCA", "#$73",    0x72, 0x73);
    TEST("SBCA", "$5354,Y", 0x17, 0x52, 0x53, 0x54);
    TEST("SBCA", "$7374",   0x17, 0x72, 0x73, 0x74);
    TEST("SBCA", "E,Z",     0x27, 0x62);

    TEST("SBCB", "$D3,Y",    0xD2, 0xD3);
    TEST("SBCB", "#$F3",     0xF2, 0xF3);
    TEST("SBCB", "-$1C1C,Z", 0x17, 0xE2, 0xE3, 0xE4);
    TEST("SBCB", "$F3F4",    0x17, 0xF2, 0xF3, 0xF4);
    TEST("SBCB", "E,X",      0x27, 0xC2);

    TEST("SBCD", "$A3,Z",    0xA2, 0xA3);
    TEST("SBCD", "#$B3B4",   0x37, 0xB2, 0xB3, 0xB4);
    TEST("SBCD", "-$3C3C,X", 0x37, 0xC2, 0xC3, 0xC4);
    TEST("SBCD", "$F3F4",    0x37, 0xF2, 0xF3, 0xF4);
    TEST("SBCD", "E,Y",      0x27, 0x92);

    TEST("SBCE", "#$3334",   0x37, 0x32, 0x33, 0x34);
    TEST("SBCE", "$6364,Z",  0x37, 0x62, 0x63, 0x64);
    TEST("SBCE", "$7374",    0x37, 0x72, 0x73, 0x74);

    TEST("SUBA", "$41,X",   0x40, 0x41);
    TEST("SUBA", "#$71",    0x70, 0x71);
    TEST("SUBA", "$5152,Y", 0x17, 0x50, 0x51, 0x52);
    TEST("SUBA", "$7172",   0x17, 0x70, 0x71, 0x72);
    TEST("SUBA", "E,Z",     0x27, 0x60);

    TEST("SUBB", "$D1,Y",    0xD0, 0xD1);
    TEST("SUBB", "#$F1",     0xF0, 0xF1);
    TEST("SUBB", "-$1E1E,Z", 0x17, 0xE0, 0xE1, 0xE2);
    TEST("SUBB", "$F1F2",    0x17, 0xF0, 0xF1, 0xF2);
    TEST("SUBB", "E,X",      0x27, 0xC0);

    TEST("SUBD", "$91,Y",    0x90, 0x91);
    TEST("SUBD", "#$B1B2",   0x37, 0xB0, 0xB1, 0xB2);
    TEST("SUBD", "-$3E3E,X", 0x37, 0xC0, 0xC1, 0xC2);
    TEST("SUBD", "$F1F2",    0x37, 0xF0, 0xF1, 0xF2);
    TEST("SUBD", "E,Z",      0x27, 0xA0);

    TEST("SUBE", "#$3132",  0x37, 0x30, 0x31, 0x32);
    TEST("SUBE", "$4142,X", 0x37, 0x40, 0x41, 0x42);
    TEST("SUBE", "$7172",   0x37, 0x70, 0x71, 0x72);

    TEST("DAA", "", 0x37, 0x21);
    TEST("SXT", "", 0x27, 0xF8);
}

void test_cmp_tst() {
    TEST("CBA", "", 0x37, 0x1B);

    TEST("CMPA", "$49,X",   0x48, 0x49);
    TEST("CMPA", "#$88",    0x78, 0x88);
    TEST("CMPA", "$595A,Y", 0x17, 0x58, 0x59, 0x5A);
    TEST("CMPA", "$797A",   0x17, 0x78, 0x79, 0x7A);
    TEST("CMPA", "E,Z",     0x27, 0x68);

    TEST("CMPB", "$D9,Y",    0xD8, 0xD9);
    TEST("CMPB", "#$F9",     0xF8, 0xF9);
    TEST("CMPB", "-$1616,Z", 0x17, 0xE8, 0xE9, 0xEA);
    TEST("CMPB", "$F9FA",    0x17, 0xF8, 0xF9, 0xFA);
    TEST("CMPB", "E,X",      0x27, 0xC8);

    TEST("CPD", "$99,Y",    0x98, 0x99);
    TEST("CPD", "#$B9BA",   0x37, 0xB8, 0xB9, 0xBA);
    TEST("CPD", "-$1616,Z", 0x37, 0xE8, 0xE9, 0xEA);
    TEST("CPD", "$F9FA",    0x37, 0xF8, 0xF9, 0xFA);
    TEST("CPD", "E,X",      0x27, 0x88);

    TEST("CPE", "#$393A",  0x37, 0x38, 0x39, 0x3A);
    TEST("CPE", "$595A,Y", 0x37, 0x58, 0x59, 0x5A);
    TEST("CPE", "$797A",   0x37, 0x78, 0x79, 0x7A);

    TEST("TST", "$27,Z",   0x26, 0x27);
    TEST("TST", "$0708,X", 0x17, 0x06, 0x07, 0x08);
    TEST("TST", "$3738",   0x17, 0x36, 0x37, 0x38);

    TEST("TSTA", "", 0x37, 0x06);
    TEST("TSTB", "", 0x37, 0x16);
    TEST("TSTD", "", 0x27, 0xF6);
    TEST("TSTE", "", 0x27, 0x76);

    TEST("TSTW", "$1718,Y", 0x27, 0x16, 0x17, 0x18);
    TEST("TSTW", "$3738",   0x27, 0x36, 0x37, 0x38);
}

void test_mul_div() {
    TEST("EDIV",  "", 0x37, 0x28);
    TEST("EDIVS", "", 0x37, 0x29);

    TEST("EMUL",  "", 0x37, 0x25);
    TEST("EMULS", "", 0x37, 0x26);

    TEST("FDIV",  "", 0x37, 0x2B);
    TEST("FMULS", "", 0x37, 0x27);

    TEST("IDIV",  "", 0x37, 0x2A);
    TEST("MUL",   "", 0x37, 0x24);
}

void test_dec_inc() {
    TEST("DEC", "2,X",     0x01, 0x02);
    TEST("DEC", "$1213,Y", 0x17, 0x11, 0x12, 0x13);
    TEST("DEC", "$3233",   0x17, 0x31, 0x32, 0x33);

    TEST("DECA", "", 0x37, 0x01);
    TEST("DECB", "", 0x37, 0x11);

    TEST("DECW", "$2223,Z", 0x27, 0x21, 0x22, 0x23);
    TEST("DECW", "$3233",   0x27, 0x31, 0x32, 0x33);

    TEST("INC", "20,Y",    0x13, 0x14);
    TEST("INC", "$2425,Z", 0x17, 0x23, 0x24, 0x25);
    TEST("INC", "$3435",   0x17, 0x33, 0x34, 0x35);

    TEST("INCA", "", 0x37, 0x03);
    TEST("INCB", "", 0x37, 0x13);

    TEST("INCW", "$2425,Z", 0x27, 0x23, 0x24, 0x25);
    TEST("INCW", "$3435",   0x27, 0x33, 0x34, 0x35);
}

void test_clr_com_neg() {
    TEST("CLR", "22,Y",    0x15, 0x16);
    TEST("CLR", "$2627,Z", 0x17, 0x25, 0x26, 0x27);
    TEST("CLR", "$3637",   0x17, 0x35, 0x36, 0x37);

    TEST("CLRA", "", 0x37, 0x05);
    TEST("CLRB", "", 0x37, 0x15);
    TEST("CLRD", "", 0x27, 0xF5);
    TEST("CLRE", "", 0x27, 0x75);

    TEST("CLRW", "$0607,X", 0x27, 0x05, 0x06, 0x07);
    TEST("CLRW", "$3637",   0x27, 0x35, 0x36, 0x37);

    TEST("COM", "17,Y",    0x10, 0x11);
    TEST("COM", "$2122,Z", 0x17, 0x20, 0x21, 0x22);
    TEST("COM", "$3132",   0x17, 0x30, 0x31, 0x32);

    TEST("COMA", "", 0x37, 0x00);
    TEST("COMB", "", 0x37, 0x10);
    TEST("COMD", "", 0x27, 0xF0);
    TEST("COME", "", 0x27, 0x70);

    TEST("COMW", "$1112,Y", 0x27, 0x10, 0x11, 0x12);
    TEST("COMW", "$3132",   0x27, 0x30, 0x31, 0x32);

    TEST("NEG", "$23,Z",   0x22, 0x23);
    TEST("NEG", "$0304,X", 0x17, 0x02, 0x03, 0x04);
    TEST("NEG", "$3334",   0x17, 0x32, 0x33, 0x34);

    TEST("NEGA", "", 0x37, 0x02);
    TEST("NEGB", "", 0x37, 0x12);

    TEST("NEGD", "", 0x27, 0xF2);
    TEST("NEGE", "", 0x27, 0x72);

    TEST("NEGW", "$1314,Y", 0x27, 0x12, 0x13, 0x14);
    TEST("NEGW", "$3334",   0x27, 0x32, 0x33, 0x34);
}

void test_bool_logic() {
    TEST("ANDA", "$47,X",   0x46, 0x47);
    TEST("ANDA", "#$77",    0x76, 0x77);
    TEST("ANDA", "$5758,Y", 0x17, 0x56, 0x57, 0x58);
    TEST("ANDA", "$7778",   0x17, 0x76, 0x77, 0x78);
    TEST("ANDA", "E,Z",     0x27, 0x66);

    TEST("ANDB", "$D7,Y",    0xD6, 0xD7);
    TEST("ANDB", "#$F7",     0xF6, 0xF7);
    TEST("ANDB", "-$1818,Z", 0x17, 0xE6, 0xE7, 0xE8);
    TEST("ANDB", "$F7F8",    0x17, 0xF6, 0xF7, 0xF8);
    TEST("ANDB", "E,X",      0x27, 0xC6);

    TEST("ANDD", "$A7,Z",    0xA6, 0xA7);
    TEST("ANDD", "#$B7B8",   0x37, 0xB6, 0xB7, 0xB8);
    TEST("ANDD", "-$3838,X", 0x37, 0xC6, 0xC7, 0xC8);
    TEST("ANDD", "$F7F8",    0x37, 0xF6, 0xF7, 0xF8);
    TEST("ANDD", "E,Y",      0x27, 0x96);

    TEST("ANDE", "#$3738",  0x37, 0x36, 0x37, 0x38);
    TEST("ANDE", "$4748,X", 0x37, 0x46, 0x47, 0x48);
    TEST("ANDE", "$7778",   0x37, 0x76, 0x77, 0x78);

    TEST("EORA", "$55,Y",   0x54, 0x55);
    TEST("EORA", "#$75",    0x74, 0x75);
    TEST("EORA", "$6566,Z", 0x17, 0x64, 0x65, 0x66);
    TEST("EORA", "$7576",   0x17, 0x74, 0x75, 0x76);
    TEST("EORA", "E,X",     0x27, 0x44);

    TEST("EORB", "$E5,Z",    0xE4, 0xE5);
    TEST("EORB", "#$F5",     0xF4, 0xF5);
    TEST("EORB", "-$3A3A,X", 0x17, 0xC4, 0xC5, 0xC6);
    TEST("EORB", "$F5F6",    0x17, 0xF4, 0xF5, 0xF6);
    TEST("EORB", "E,Y",      0x27, 0xD4);

    TEST("EORD", "$85,X",    0x84, 0x85);
    TEST("EORD", "#$B5B6",   0x37, 0xB4, 0xB5, 0xB6);
    TEST("EORD", "-$2A2A,Y", 0x37, 0xD4, 0xD5, 0xD6);
    TEST("EORD", "$F5F6",    0x37, 0xF4, 0xF5, 0xF6);

    TEST("EORE", "#$3536",  0x37, 0x34, 0x35, 0x36);
    TEST("EORE", "$6566,Z", 0x37, 0x64, 0x65, 0x66);
    TEST("EORE", "$7576",   0x37, 0x74, 0x75, 0x76);

    TEST("ORAA", "$48,X",   0x47, 0x48);
    TEST("ORAA", "#$78",    0x77, 0x78);
    TEST("ORAA", "$5859,Y", 0x17, 0x57, 0x58, 0x59);
    TEST("ORAA", "$7879",   0x17, 0x77, 0x78, 0x79);
    TEST("ORAA", "E,Z",     0x27, 0x67);

    TEST("ORAB", "$D8,Y",    0xD7, 0xD8);
    TEST("ORAB", "#$F8",     0xF7, 0xF8);
    TEST("ORAB", "-$1717,Z", 0x17, 0xE7, 0xE8, 0xE9);
    TEST("ORAB", "$F8F9",    0x17, 0xF7, 0xF8, 0xF9);

    TEST("ORD", "$A8,Z",    0xA7, 0xA8);
    TEST("ORD", "#$B8B9",   0x37, 0xB7, 0xB8, 0xB9);
    TEST("ORD", "-$3737,X", 0x37, 0xC7, 0xC8, 0xC9);
    TEST("ORD", "$F8F9",    0x37, 0xF7, 0xF8, 0xF9);
    TEST("ORD", "E,Y",      0x27, 0x97);

    TEST("ORE", "#$3839",  0x37, 0x37, 0x38, 0x39);
    TEST("ORE", "$6869,Z", 0x37, 0x67, 0x68, 0x69);
    TEST("ORE", "$7879",   0x37, 0x77, 0x78, 0x79);
}

void test_bit_manip() {
    TEST("BITA", "$4A,X",   0x49, 0x4A);
    TEST("BITA", "#$7A",    0x79, 0x7A);
    TEST("BITA", "$5A5B,Y", 0x17, 0x59, 0x5A, 0x5B);
    TEST("BITA", "$7A7B",   0x17, 0x79, 0x7A, 0x7B);
    TEST("BITA", "E,Z",     0x27, 0x69);

    TEST("BITB", "$DA,Y",    0xD9, 0xDA);
    TEST("BITB", "#$FA",     0xF9, 0xFA);
    TEST("BITB", "-$1515,Z", 0x17, 0xE9, 0xEA, 0xEB);
    TEST("BITB", "$FAFB",    0x17, 0xF9, 0xFA, 0xFB);
    TEST("BITB", "E,X",      0x27, 0xC9);

    TEST("BCLR", "10,X, #9",     0x17, 0x08, 0x09, 0x0A);
    TEST("BCLR", "$1A1B,Y, #25", 0x18, 0x19, 0x1A, 0x1B);
    TEST("BCLR", "$3A3B, #$39",  0x38, 0x39, 0x3A, 0x3B);

    TEST("BCLRW", "$292A,Z, #$2B2C", 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C);
    TEST("BCLRW", "$393A, #$3B3C",   0x27, 0x38, 0x39, 0x3A, 0x3B, 0x3C);

    TEST("BSET", "$2B,Z, #$2A",  0x17, 0x29, 0x2A, 0x2B);
    TEST("BSET", "$0B0C,X, #10", 0x09, 0x0A, 0x0B, 0x0C);
    TEST("BSET", "$3B3C, #$3A",  0x39, 0x3A, 0x3B, 0x3C);

    TEST("BSETW", "$1A1B,Y, #$1C1D", 0x27, 0x19, 0x1A, 0x1B, 0x1C, 0x1D);
    TEST("BSETW", "$3A3B, #$3C3D",   0x27, 0x39, 0x3A, 0x3B, 0x3C, 0x3D);
}

void test_shift_rotate() {
    TEST("LSR", "16,X",    0x0F, 0x10);
    TEST("LSR", "$2021,Y", 0x17, 0x1F, 0x20, 0x21);
    TEST("LSR", "$4041",   0x17, 0x3F, 0x40, 0x41);

    TEST("LSRA", "", 0x37, 0x0F);
    TEST("LSRB", "", 0x37, 0x1F);
    TEST("LSRD", "", 0x27, 0xFF);
    TEST("LSRE", "", 0x27, 0x7F);

    TEST("LSRW", "$3031,Z", 0x27, 0x2F, 0x30, 0x31);
    TEST("LSRW", "$4041",   0x27, 0x3F, 0x40, 0x41);

    TEST("ASL", "21,Y",    0x14, 0x15);
    TEST("ASL", "$2526,Z", 0x17, 0x24, 0x25, 0x26);
    TEST("ASL", "$3536",   0x17, 0x34, 0x35, 0x36);

    TEST("ASLA", "", 0x37, 0x04);
    TEST("ASLB", "", 0x37, 0x14);
    TEST("ASLD", "", 0x27, 0xF4);
    TEST("ASLE", "", 0x27, 0x74);

    TEST("ASLW", "$0506,X", 0x27, 0x04, 0x05, 0x06);
    TEST("ASLW", "$3536",   0x27, 0x34, 0x35, 0x36);
    // LSL
    // LSLA
    // LSLB
    // LSLD
    // LSLE
    // LSLW

    TEST("ASR", "30,Y",    0x1D, 0x1E);
    TEST("ASR", "$2E2F,Z", 0x17, 0x2D, 0x2E, 0x2F);
    TEST("ASR", "$3E3F",   0x17, 0x3D, 0x3E, 0x3F);

    TEST("ASRA", "", 0x37, 0x0D);
    TEST("ASRB", "", 0x37, 0x1D);
    TEST("ASRD", "", 0x27, 0xFD);
    TEST("ASRE", "", 0x27, 0x7D);

    TEST("ASRW", "$0E0F,X",  0x27, 0x0D, 0x0E, 0x0F);
    TEST("ASRW", "$3E3F",    0x27, 0x3D, 0x3E, 0x3F);

    TEST("ROL", "29,Y",   0x1C, 0x1D);
    TEST("ROL", "$2D2E,Z", 0x17, 0x2C, 0x2D, 0x2E);
    TEST("ROL", "$3D3E",   0x17, 0x3C, 0x3D, 0x3E);

    TEST("ROLA", "", 0x37, 0x0C);
    TEST("ROLB", "", 0x37, 0x1C);
    TEST("ROLD", "", 0x27, 0xFC);
    TEST("ROLE", "", 0x27, 0x7C);

    TEST("ROLW", "$0D0E,X", 0x27, 0x0C, 0x0D, 0x0E);
    TEST("ROLW", "$3D3E",   0x27, 0x3C, 0x3D, 0x3E);

    TEST("ROR", "31,Y",    0x1E, 0x1F);
    TEST("ROR", "$2F30,Z", 0x17, 0x2E, 0x2F, 0x30);
    TEST("ROR", "$3F40",   0x17, 0x3E, 0x3F, 0x40);

    TEST("RORA", "", 0x37, 0x0E);
    TEST("RORB", "", 0x37, 0x1E);
    TEST("RORD", "", 0x27, 0xFE);
    TEST("RORE", "", 0x27, 0x7E);

    TEST("RORW", "$0F10,X", 0x27, 0x0E, 0x0F, 0x10);
    TEST("RORW", "$3F40",   0x27, 0x3E, 0x3F, 0x40);
}

void test_branch() {
    ATEST(0x01000, "BRA", "$00FB6", 0xB0, 0xB0);
    ATEST(0x01000, "BRN", "$00FB8", 0xB1, 0xB2);
    AERRT(0x00010, "BRA", "$FFF96",
          OVERFLOW_RANGE, "$FFF96", 0xB0, 0x80);
    AERRT(0xFFFF0, "BRA", "$00074",
          OVERFLOW_RANGE, "$00074", 0xB0, 0x7E);
    ATEST(0x01000, "BHI", "$00FB8", 0xB2, 0xB2);
    ATEST(0x01000, "BLS", "$00FBA", 0xB3, 0xB4);
    ATEST(0x01000, "BCC", "$00FBA", 0xB4, 0xB4);
    ATEST(0x01000, "BCS", "$00FBC", 0xB5, 0xB6);
    ATEST(0x01000, "BNE", "$00FBC", 0xB6, 0xB6);
    ATEST(0x01000, "BEQ", "$00FBE", 0xB7, 0xB8);
    ATEST(0x01000, "BVC", "$00FBE", 0xB8, 0xB8);
    ATEST(0x01000, "BVS", "$00FC0", 0xB9, 0xBA);
    ATEST(0x01000, "BPL", "$00FC0", 0xBA, 0xBA);
    ATEST(0x01000, "BMI", "$00FC2", 0xBB, 0xBC);
    ATEST(0x01000, "BGE", "$00FC2", 0xBC, 0xBC);
    ATEST(0x01000, "BLT", "$00FC4", 0xBD, 0xBE);
    ATEST(0x01000, "BGT", "$00FC4", 0xBE, 0xBE);
    ATEST(0x01000, "BLE", "$00FC6", 0xBF, 0xC0);
    // BHS
    // BLO

    ATEST(0x10000, "LBRA", "$10006", 0x37, 0x80, 0x00, 0x00);
    ATEST(0x10000, "LBRA", "$18004", 0x37, 0x80, 0x7F, 0xFE);
    ATEST(0x10000, "LBRA", "$08006", 0x37, 0x80, 0x80, 0x00);
    AERRT(0xF9000, "LBRA", "$01004",
          OVERFLOW_RANGE,  "$01004", 0x37, 0x80, 0x7F, 0xFE);
    AERRT(0x01000, "LBRA", "$F9006",
          OVERFLOW_RANGE,  "$F9006", 0x37, 0x80, 0x80, 0x00);
    ATEST(0x10000, "LBRN", "$10000", 0x37, 0x81, 0xFF, 0xFA);
    ATEST(0x10000, "LBHI", "$0838A", 0x37, 0x82, 0x83, 0x84);
    ATEST(0x10000, "LBLS", "$0848A", 0x37, 0x83, 0x84, 0x84);
    ATEST(0x10000, "LBCC", "$0858C", 0x37, 0x84, 0x85, 0x86);
    ATEST(0x10000, "LBCS", "$0868C", 0x37, 0x85, 0x86, 0x86);
    ATEST(0x10000, "LBNE", "$0878E", 0x37, 0x86, 0x87, 0x88);
    ATEST(0x10000, "LBEQ", "$0888E", 0x37, 0x87, 0x88, 0x88);
    ATEST(0x10000, "LBVC", "$08990", 0x37, 0x88, 0x89, 0x8A);
    ATEST(0x10000, "LBVS", "$08A90", 0x37, 0x89, 0x8A, 0x8A);
    ATEST(0x10000, "LBPL", "$08B92", 0x37, 0x8A, 0x8B, 0x8C);
    ATEST(0x10000, "LBMI", "$08C92", 0x37, 0x8B, 0x8C, 0x8C);
    ATEST(0x10000, "LBGE", "$08D94", 0x37, 0x8C, 0x8D, 0x8E);
    ATEST(0x10000, "LBLT", "$08E94", 0x37, 0x8D, 0x8E, 0x8E);
    ATEST(0x10000, "LBGT", "$08F96", 0x37, 0x8E, 0x8F, 0x90);
    ATEST(0x10000, "LBLE", "$09096", 0x37, 0x8F, 0x90, 0x90);
    // LBHS
    // LBLO

    ATEST(0x10000, "LBEV", "$09298", 0x37, 0x91, 0x92, 0x92);
    ATEST(0x10000, "LBMV", "$09198", 0x37, 0x90, 0x91, 0x92);
}

void test_bit_branch() {
    ATEST(0x01000, "BRCLR", "$CD,X, #$CC, $00FD4",   0xCB, 0xCC, 0xCD, 0xCE);
    ATEST(0x01000, "BRCLR", "$1C1D,Y, #27, $02E24",  0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1E);
    ATEST(0x01000, "BRCLR", ">$001D,Y, #27, $02E24", 0x1A, 0x1B, 0x00, 0x1D, 0x1E, 0x1E);
    ATEST(0x01000, "BRCLR", "$3C3D, #$3B, $04E44",   0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3E);

    ATEST(0x01000, "BRSET", "$9D,Y, #$9C, $00FA4",    0x9B, 0x9C, 0x9D, 0x9E);
    ATEST(0x01000, "BRSET", "$2D2E,Z, #$2C, $03F36",  0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30);
    ATEST(0x01000, "BRSET", ">$002E,Z, #$2C, $03F36", 0x2B, 0x2C, 0x00, 0x2E, 0x2F, 0x30);
    ATEST(0x01000, "BRSET", "$3D3E, #$3C, $04F46",    0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40);
}

void test_jump() {
    TEST("JMP", "$B7C7D",    0x7A, 0x0B, 0x7C, 0x7D);
    TEST("JMP", "-$3B2B2,X", 0x4B, 0x0C, 0x4D, 0x4E);

    ATEST(0x10000, "BSR",  "$1003C", 0x36, 0x36);
    ATEST(0x10000, "LBSR", "$0FB00", 0x27, 0xF9, 0xFA, 0xFA);

    TEST("JSR", "$4FCFD",    0xFA, 0x04, 0xFC, 0xFD);
    TEST("JSR", "-$57474,X", 0x89, 0x0A, 0x8B, 0x8C);

    TEST("RTS", "", 0x27, 0xF7);
}

void test_interrupt() {
    TEST("RTI", "", 0x27, 0x77);
    TEST("SWI", "", 0x37, 0x20);
}

void test_indexing() {
    TEST("ABX", "", 0x37, 0x4F);
    TEST("ABY", "", 0x37, 0x5F);
    TEST("ABZ", "", 0x37, 0x6F);
    TEST("ADX", "", 0x37, 0xCD);
    TEST("ADY", "", 0x37, 0xDD);
    TEST("ADZ", "", 0x37, 0xED);
    TEST("AEX", "", 0x37, 0x4D);
    TEST("AEY", "", 0x37, 0x5D);
    TEST("AEZ", "", 0x37, 0x6D);
    TEST("AIX", "#$3D",   0x3C, 0x3D);
    TEST("AIX", "#$3D3E", 0x37, 0x3C, 0x3D, 0x3E);
    TEST("AIY", "#$3E",   0x3D, 0x3E);
    TEST("AIY", "#$3E3F", 0x37, 0x3D, 0x3E, 0x3F);
    TEST("AIZ", "#$3F",   0x3E, 0x3F);
    TEST("AIZ", "#$3F40", 0x37, 0x3E, 0x3F, 0x40);
    // DEX
    // DEY
    // INX
    // INY

    TEST("CPX", "$6D,Z",   0x6C, 0x6D);
    TEST("CPX", "#$7D7E",  0x37, 0x7C, 0x7D, 0x7E);
    TEST("CPX", "$4D4E,X", 0x17, 0x4C, 0x4D, 0x4E);
    TEST("CPX", "$7D7E",   0x17, 0x7C, 0x7D, 0x7E);

    TEST("CPY", "$4E,X",   0x4D, 0x4E);
    TEST("CPY", "#$7E7F",  0x37, 0x7D, 0x7E, 0x7F);
    TEST("CPY", "$6E6F,Z", 0x17, 0x6D, 0x6E, 0x6F);
    TEST("CPY", "$7E7F",   0x17, 0x7D, 0x7E, 0x7F);

    TEST("CPZ", "$5F,Y",   0x5E, 0x5F);
    TEST("CPZ", "#$7F80",  0x37, 0x7E, 0x7F, 0x80);
    TEST("CPZ", "$4F50,X", 0x17, 0x4E, 0x4F, 0x50);
    TEST("CPZ", "$7F80",   0x17, 0x7E, 0x7F, 0x80);

    TEST("LDX", "$ED,Z",    0xEC, 0xED);
    TEST("LDX", "#$BDBE",   0x37, 0xBC, 0xBD, 0xBE);
    TEST("LDX", "-$3232,X", 0x17, 0xCC, 0xCD, 0xCE);
    TEST("LDX", "$FDFE",    0x17, 0xFC, 0xFD, 0xFE);

    TEST("LDY", "$DE,Y",    0xDD, 0xDE);
    TEST("LDY", "#$BEBF",   0x37, 0xBD, 0xBE, 0xBF);
    TEST("LDY", "-$1111,Z", 0x17, 0xED, 0xEE, 0xEF);
    TEST("LDY", "$FEFF",    0x17, 0xFD, 0xFE, 0xFF);

    TEST("LDZ", "$CF,X",    0xCE, 0xCF);
    TEST("LDZ", "#$BFC0",   0x37, 0xBE, 0xBF, 0xC0);
    TEST("LDZ", "-$2020,Y", 0x17, 0xDE, 0xDF, 0xE0);
    TEST("LDZ", "$FF00",    0x17, 0xFE, 0xFF, 0x00);

    TEST("STX", "$AD,Z",    0xAC, 0xAD);
    TEST("STX", "-$7272,X", 0x17, 0x8C, 0x8D, 0x8E);
    TEST("STX", "$BDBE",    0x17, 0xBC, 0xBD, 0xBE);

    TEST("STY", "$9E,Y",    0x9D, 0x9E);
    TEST("STY", "-$5151,Z", 0x17, 0xAD, 0xAE, 0xAF);
    TEST("STY", "$BEBF",    0x17, 0xBD, 0xBE, 0xBF);

    TEST("STZ", "$8F,X",    0x8E, 0x8F);
    TEST("STZ", "-$6060,Y", 0x17, 0x9E, 0x9F, 0xA0);
    TEST("STZ", "$BFC0",    0x17, 0xBE, 0xBF, 0xC0);

    TEST("TSX", "", 0x27, 0x4F);
    TEST("TSY", "", 0x27, 0x5F);
    TEST("TSZ", "", 0x27, 0x6F);

    TEST("TXS", "", 0x37, 0x4E);
    TEST("TXY", "", 0x27, 0x5C);
    TEST("TXZ", "", 0x27, 0x6C);

    TEST("TYS", "", 0x37, 0x5E);
    TEST("TYX", "", 0x27, 0x4D);
    TEST("TYZ", "", 0x27, 0x6D);

    TEST("TZS", "", 0x37, 0x6E);
    TEST("TZX", "", 0x27, 0x4E);
    TEST("TZY", "", 0x27, 0x5E);

    TEST("XGDX", "", 0x37, 0xCC);
    TEST("XGDY", "", 0x37, 0xDC);
    TEST("XGDZ", "", 0x37, 0xEC);

    TEST("XGEX", "", 0x37, 0x4C);
    TEST("XGEY", "", 0x37, 0x5C);
    TEST("XGEZ", "", 0x37, 0x6C);
}

void test_addr_extension() {
    TEST("TBEK", "", 0x27, 0xFA);
    TEST("TBSK", "", 0x37, 0x9F);
    TEST("TBXK", "", 0x37, 0x9C);
    TEST("TBYK", "", 0x37, 0x9D);
    TEST("TBZK", "", 0x37, 0x9E);

    TEST("TEKB", "", 0x27, 0xBB);
    TEST("TSKB", "", 0x37, 0xAF);
    TEST("TXKB", "", 0x37, 0xAC);
    TEST("TYKB", "", 0x37, 0xAD);
    TEST("TZKB", "", 0x37, 0xAE);
}

void test_stacking() {
    TEST("AIS", "#$40", 0x3F, 0x40);
    // DES
    // INS

    TEST("CPS", "$50,X",   0x4F, 0x50);
    TEST("CPS", "#$8081",  0x37, 0x7F, 0x80, 0x81);
    TEST("CPS", "$6061,Y", 0x17, 0x5F, 0x60, 0x61);
    TEST("CPS", "$8081",   0x17, 0x7F, 0x80, 0x81);

    TEST("LDS", "$F0,Z",    0xEF, 0xF0);
    TEST("LDS", "#$C0C1",   0x37, 0xBF, 0xC0, 0xC1);
    TEST("LDS", "-$2F2F,X", 0x17, 0xCF, 0xD0, 0xD1);
    TEST("LDS", "$0001",    0x17, 0xFF, 0x00, 0x01);

    TEST("STS", "$A0,Y",    0x9F, 0xA0);
    TEST("STS", "-$4F4F,Z", 0x17, 0xAF, 0xB0, 0xB1);
    TEST("STS", "$C0C1",    0x17, 0xBF, 0xC0, 0xC1);

    TEST("TSX", "", 0x27, 0x4F);
    TEST("TSY", "", 0x27, 0x5F);
    TEST("TSZ", "", 0x27, 0x6F);

    TEST("TXS", "", 0x37, 0x4E);
    TEST("TYS", "", 0x37, 0x5E);
    TEST("TZS", "", 0x37, 0x6E);

    TEST("PSHA", "", 0x37, 0x08);
    TEST("PSHB", "", 0x37, 0x18);

    TEST("PSHM", "D,X,Z,K", 0x34, 0x35);
    TEST("PSHM", "CCR",     0x34, 0x40);
    TEST("PSHM", "K",       0x34, 0x20);
    TEST("PSHM", "Z",       0x34, 0x10);
    TEST("PSHM", "Y",       0x34, 0x08);
    TEST("PSHM", "X",       0x34, 0x04);
    TEST("PSHM", "E",       0x34, 0x02);
    TEST("PSHM", "D",       0x34, 0x01);
    ERRT("PSHM", "", OPCODE_HAS_NO_EFFECT, "", 0x34, 0x00);
    ERRT("PSHM", "D", UNKNOWN_POSTBYTE, "D", 0x34, 0x81);
    // PSHD
    // PSHX
    // PSHY

    TEST("PULA", "", 0x37, 0x09);
    TEST("PULB", "", 0x37, 0x19);

    TEST("PULM", "K,Z,X,E", 0x35, 0x36);
    TEST("PULM", "D",       0x35, 0x40);
    TEST("PULM", "E",       0x35, 0x20);
    TEST("PULM", "X",       0x35, 0x10);
    TEST("PULM", "Y",       0x35, 0x08);
    TEST("PULM", "Z",       0x35, 0x04);
    TEST("PULM", "K",       0x35, 0x02);
    TEST("PULM", "CCR",     0x35, 0x01);
    ERRT("PULM", "", OPCODE_HAS_NO_EFFECT, "", 0x35, 0x00);
    ERRT("PULM", "K", UNKNOWN_POSTBYTE, "K", 0x35, 0x82);
    // PULD
    // PULX
    // PULY
}

void test_condition_code() {
    TEST("ANDP", "#$3B3C", 0x37, 0x3A, 0x3B, 0x3C);
    // CLC
    // CLI
    // CLV

    TEST("ORP", "#$3C3D", 0x37, 0x3B, 0x3C, 0x3D);
    // SEC
    // SEI
    // SEV

    TEST("TAP", "", 0x37, 0xFD);
    TEST("TDP", "", 0x37, 0x2D);

    TEST("TPA", "", 0x37, 0xFC);
    TEST("TPD", "", 0x37, 0x2C);
}

void test_dsp() {
    TEST("ACE",    "", 0x37, 0x22);
    TEST("ACED",   "", 0x37, 0x23);
    TEST("ASLM",   "", 0x27, 0xB6);
    TEST("ASRM",   "", 0x27, 0xBA);
    TEST("CLRM",   "", 0x27, 0xB7);
    TEST("LDHI",   "$B1B2", 0x27, 0xB0, 0xB1, 0xB2);
    TEST("MAC",    "7, -4", 0x7B, 0x7C);
    TEST("PSHMAC", "", 0x27, 0xB8);
    TEST("PULMAC", "", 0x27, 0xB9);
    TEST("RMAC",   "-1, -4", 0xFB, 0xFC);
    TEST("TDMSK",  "", 0x37, 0x2F);
    TEST("TEDM",   "", 0x27, 0xB1);
    TEST("TEM",    "", 0x27, 0xB2);
    TEST("TMER",   "", 0x27, 0xB4);
    TEST("TMET",   "", 0x27, 0xB5);
    TEST("TMXED",  "", 0x27, 0xB3);
}

void test_stop_wait() {
    TEST("LPSTOP", "", 0x27, 0xF1);
    TEST("WAI",    "", 0x27, 0xF3);
}

void test_debug_null() {
    TEST("BGND", "", 0x37, 0xA6);

    ATEST(0x10000, "BRN",  "$10000", 0xB1, 0xFE);
    ATEST(0x10000, "LBRN", "$10004", 0x37, 0x80, 0x00, 0x00);

    TEST("NOP",  "", 0x27, 0x4C);
}

bool contains(const uint8_t *begin, const uint8_t *end, const uint8_t opc) {
    do {
        auto p = begin + (end - begin) / 2;
        if (*p == opc) {
            return true;
        } else if (*p < opc) {
            begin = p + 1;
        } else {
            end = p - 1;
        }
    } while (begin <= end);
    return false;
}

void test_illegal() {
    static constexpr Config::opcode_t illegals[] = {
        0x07, 0x7D, 0x7E, 0x7F, 0xFD, 0xFE, 0xFF,
    };
    for (const auto opc : illegals) {
        UNKN(opc);
    }
    static constexpr Config::opcode_t illegals_17[] = {
        0x07, 0x0A, 0x0B, 0x17, 0x1A, 0x1B, 0x27, 0x2A, 0x2B,
        0x37, 0x38, 0x39, 0x3A, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B,
        0xCB, 0xDB, 0xEB, 0xFB,
    };
    for (const auto opc : illegals_17) {
        UNKN(0x17, opc);
    }
    for (Config::opcode_t opc = 0xB0; opc < 0xC0; opc++) {
        if ((opc & 0xF) < 0x0C)
            UNKN(0x17, opc);
    }

    static constexpr Config::opcode_t illegals_27[] = {
        0x07, 0x0A, 0x0B, 0x17, 0x1A, 0x1B, 0x27, 0x2A, 0x2B, 0x37, 0x3A, 0x3B,
        0x4B, 0x5B, 0x5D, 0x6B, 0x6E,
        0x89, 0x8B, 0x99, 0x9B, 0xA9, 0xAB, 0xCB, 0xDB, 0xEB,
    };
    for (const auto opc : illegals_27) {
        UNKN(0x27, opc);
    }
    for (Config::opcode_t opc = 0x80; opc < 0xF0; opc++) {
        if ((opc & 0xF) >= 0x0C)
            UNKN(0x27, opc);
    }

    static constexpr Config::opcode_t illegals_37[] = {
        0x2E, 0x39, 0x49, 0x4B, 0x59, 0x5B, 0x69, 0x6B, 0x79, 0x7B,
        0xB9, 0xBA, 0xBB, 0xC9, 0xCB, 0xCE, 0xCF, 0xD9, 0xDB, 0xDE, 0xDF,
        0xE9, 0xEB, 0xEE, 0xEF, 0xF9, 0xFB,
    };
    for (const auto opc : illegals_37) {
        UNKN(0x37, opc);
    }
    for (Config::opcode_t opc = 0x92; opc < 0xB0; opc++) {
        if ((opc & 0xF) < 0x0C && opc != 0xA6)
            UNKN(0x37, opc);
    }
}
// clang-format on

void run_tests(const char *cpu) {
    disassembler.setCpu(cpu);
    RUN_TEST(test_load);
    RUN_TEST(test_move);
    RUN_TEST(test_store);
    RUN_TEST(test_transfer);
    RUN_TEST(test_exchange);
    RUN_TEST(test_add_sub);
    RUN_TEST(test_cmp_tst);
    RUN_TEST(test_mul_div);
    RUN_TEST(test_dec_inc);
    RUN_TEST(test_clr_com_neg);
    RUN_TEST(test_bool_logic);
    RUN_TEST(test_bit_manip);
    RUN_TEST(test_shift_rotate);
    RUN_TEST(test_branch);
    RUN_TEST(test_bit_branch);
    RUN_TEST(test_jump);
    RUN_TEST(test_interrupt);
    RUN_TEST(test_indexing);
    RUN_TEST(test_addr_extension);
    RUN_TEST(test_stacking);
    RUN_TEST(test_condition_code);
    RUN_TEST(test_dsp);
    RUN_TEST(test_illegal);
}

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
